(declare-sort id 0)
(declare-sort node 0)


(declare-fun __leader (node) Bool)
(declare-fun __pending (id node) Bool)

(declare-fun leader (node) Bool)
(declare-fun pending (id node) Bool)

(define-fun .leader ((V0 node)) Bool (! (__leader V0) :next leader))
(define-fun .pending ((V0 id) (V1 node)) Bool (! (__pending V0 V1) :next pending))

(declare-fun btw (node node node) Bool)
(declare-fun idn (node) id)
(declare-fun le (id id) Bool)

(define-fun .btw ((V0 node) (V1 node) (V2 node)) Bool (! (btw V0 V1 V2) :global true))
(define-fun .idn ((V0 node)) id (! (idn V0) :global true))
(define-fun .le ((V0 id) (V1 id)) Bool (! (le V0 V1) :global true))

(declare-fun __fml:nondet () Bool)
(declare-fun __m_pending (id node) Bool)
(declare-fun __ts0__ts0_a_a () Bool)
(declare-fun __ts0_b () Bool)

(define-fun .prop () Bool (! 
 (let (($v (forall ((X node) (Y node)) (=> (and (__leader X) (__leader Y)) (= X Y)))
 ))
 (and $v))
 :invar-property 0))

(define-fun .axiom () Bool (! 
 (let (($v (and (forall ((X id)) (le X X)) (forall ((X id) (Y id) (Z id)) (=> (and (le X Y) (le Y Z)) (le X Z))) (forall ((X id) (Y id)) (=> (and (le X Y) (le Y X)) (= X Y))) (forall ((X id) (Y id)) (or (le X Y) (le Y X))) (forall ((W node) (X node) (Y node) (Z node)) (=> (and (btw W X Y) (btw W Y Z)) (btw W X Z))) (forall ((W node) (X node) (Y node)) (=> (btw W X Y) (not (btw W Y X)))) (forall ((W node) (X node) (Y node)) (or (btw W X Y) (btw W Y X) (= W X) (= W Y) (= X Y))) (forall ((X node) (Y node) (Z node)) (=> (btw X Y Z) (btw Y Z X))) (forall ((X node) (Y node)) (=> (= (idn X) (idn Y)) (= X Y))))
 ))
 (and $v))
 :axiom true))

(define-fun .init () Bool (! 
 (let (($v (and (forall ((V0 node)) (= (__leader V0) false)) (forall ((V0 id) (V1 node)) (= (__pending V0 V1) false)))
 ))
 (and $v))
 :init true))

(define-fun .action_recv () Bool (! 
 (let (($v (exists ((n node) (next node) (v id)) (and (forall ((V0 id) (V1 node)) (= (__m_pending V0 V1) (ite (and (= V0 v) (= V1 n)) __fml:nondet (__pending V0 V1)))) (forall ((V0 node)) (= (leader V0) (ite __ts0_b (ite (= V0 n) true (__leader V0)) (__leader V0)))) (= __ts0__ts0_a_a (le (idn n) v)) (forall ((V0 id) (V1 node)) (= (pending V0 V1) (ite __ts0_b (__m_pending V0 V1) (ite __ts0__ts0_a_a (ite (and (= V0 v) (= V1 next)) true (__m_pending V0 V1)) (__m_pending V0 V1))))) (= __ts0_b (= v (idn n))) (forall ((Z node)) (=> (and (not (= Z n)) (not (= Z next))) (btw n next Z))) (__pending v n)))
 ))
 (and $v))
 :action recv))

(define-fun .action_send () Bool (! 
 (let (($v (exists ((n node) (next node)) (and (forall ((V0 id) (V1 node)) (= (pending V0 V1) (ite (and (= V0 (idn n)) (= V1 next)) true (__pending V0 V1)))) (forall ((Z node)) (=> (and (not (= Z n)) (not (= Z next))) (btw n next Z)))))
 ))
 (and $v))
 :action send))

