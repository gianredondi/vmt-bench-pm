(declare-sort node 0)
(declare-sort nodeset 0)


(declare-fun __didNotVote (node) Bool)
(declare-fun __leader (node) Bool)
(declare-fun __vote (node node) Bool)
(declare-fun __voters (node nodeset) Bool)

(declare-fun didNotVote (node) Bool)
(declare-fun leader (node) Bool)
(declare-fun vote (node node) Bool)
(declare-fun voters (node nodeset) Bool)

(define-fun .didNotVote ((V0 node)) Bool (! (__didNotVote V0) :next didNotVote))
(define-fun .leader ((V0 node)) Bool (! (__leader V0) :next leader))
(define-fun .vote ((V0 node) (V1 node)) Bool (! (__vote V0 V1) :next vote))
(define-fun .voters ((V0 node) (V1 nodeset)) Bool (! (__voters V0 V1) :next voters))

(declare-fun emptyset () nodeset)
(declare-fun majority (nodeset) Bool)
(declare-fun member (node nodeset) Bool)
(declare-fun setOverlap (nodeset nodeset) Bool)

(define-fun .emptyset () nodeset (! emptyset :global true))
(define-fun .majority ((V0 nodeset)) Bool (! (majority V0) :global true))
(define-fun .member ((V0 node) (V1 nodeset)) Bool (! (member V0 V1) :global true))
(define-fun .setOverlap ((V0 nodeset) (V1 nodeset)) Bool (! (setOverlap V0 V1) :global true))

(define-fun .def___didNotVote () Bool (! 
 (let (($v (forall ((V0 node)) (= (__didNotVote V0) (forall ((V node)) (not (__vote V0 V)))))
 ))
 (and $v))
 :definition __didNotVote))

(define-fun .def_didNotVote () Bool (! 
 (let (($v (forall ((V0 node)) (= (didNotVote V0) (forall ((V node)) (not (vote V0 V)))))
 ))
 (and $v))
 :definition didNotVote))

(define-fun .def_setOverlap () Bool (! 
 (let (($v (forall ((V0 nodeset) (V1 nodeset)) (= (setOverlap V0 V1) (exists ((N node)) (and (member N V0) (member N V1)))))
 ))
 (and $v))
 :definition setOverlap))

(define-fun .prop () Bool (! 
 (let (($v (forall ((X node) (Y node)) (=> (and (__leader X) (__leader Y)) (= X Y)))
 ))
 (and $v))
 :invar-property 0))

(define-fun .axiom () Bool (! 
 (let (($v (and (forall ((S1 nodeset) (S2 nodeset)) (=> (and (majority S1) (majority S2)) (setOverlap S1 S2))) (forall ((N node)) (not (member N emptyset))))
 ))
 (and $v))
 :axiom true))

(define-fun .init () Bool (! 
 (let (($v (and (forall ((V0 node) (V1 node)) (= (__vote V0 V1) false)) (forall ((V0 node)) (= (__leader V0) false)) (forall ((V0 node) (V1 nodeset)) (= (__voters V0 V1) (= V1 emptyset))))
 ))
 (and $v))
 :init true))

(define-fun .action_become_leader () Bool (! 
 (let (($v (exists ((n node) (vs nodeset)) (and (forall ((V0 node)) (= (leader V0) (ite (= V0 n) true (__leader V0)))) (__voters n vs) (majority vs)))
 ))
 (and $v))
 :action become_leader))

(define-fun .action_receive_vote () Bool (! 
 (let (($v (exists ((n node) (s2 nodeset) (voter node) (vs nodeset) (V__new_fml:n node) (V__new_fml:s1 nodeset) (V__new_fml:vs nodeset)) (and (= V__new_fml:n voter) (= V__new_fml:s1 vs) (= V__new_fml:vs s2) (forall ((V0 node) (V1 nodeset)) (= (voters V0 V1) (ite (= V0 n) (= V1 V__new_fml:vs) (__voters V0 V1)))) (__vote voter n) (__voters n vs) (not (member voter vs)) (forall ((N node)) (= (member N s2) (or (member N V__new_fml:s1) (= N V__new_fml:n)))) (=> (majority V__new_fml:s1) (majority s2))))
 ))
 (and $v))
 :action receive_vote))

(define-fun .action_voting () Bool (! 
 (let (($v (exists ((n1 node) (n2 node)) (and (forall ((V0 node) (V1 node)) (= (vote V0 V1) (ite (and (= V0 n1) (= V1 n2)) true (__vote V0 V1)))) (__didNotVote n1)))
 ))
 (and $v))
 :action voting))

(define-fun .action_ns.add () Bool (! 
 (let (($v (exists ((n node) (s1 nodeset) (s2 nodeset)) (and (forall ((N node)) (= (member N s2) (or (member N s1) (= N n)))) (=> (majority s1) (majority s2))))
 ))
 (and $v))
 :action ns.add))

