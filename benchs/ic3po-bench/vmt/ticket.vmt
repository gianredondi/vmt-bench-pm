(declare-sort thread 0)
(declare-sort ticket 0)


(declare-fun __m (thread ticket) Bool)
(declare-fun __next_ticket () ticket)
(declare-fun __pc1 (thread) Bool)
(declare-fun __pc2 (thread) Bool)
(declare-fun __pc3 (thread) Bool)
(declare-fun __service () ticket)

(declare-fun m (thread ticket) Bool)
(declare-fun next_ticket () ticket)
(declare-fun pc1 (thread) Bool)
(declare-fun pc2 (thread) Bool)
(declare-fun pc3 (thread) Bool)
(declare-fun service () ticket)

(define-fun .m ((V0 thread) (V1 ticket)) Bool (! (__m V0 V1) :next m))
(define-fun .next_ticket () ticket (! __next_ticket :next next_ticket))
(define-fun .pc1 ((V0 thread)) Bool (! (__pc1 V0) :next pc1))
(define-fun .pc2 ((V0 thread)) Bool (! (__pc2 V0) :next pc2))
(define-fun .pc3 ((V0 thread)) Bool (! (__pc3 V0) :next pc3))
(define-fun .service () ticket (! __service :next service))

(declare-fun le (ticket ticket) Bool)
(declare-fun max () ticket)
(declare-fun zero () ticket)

(define-fun .le ((V0 ticket) (V1 ticket)) Bool (! (le V0 V1) :global true))
(define-fun .max () ticket (! max :global true))
(define-fun .zero () ticket (! zero :global true))

(define-fun .prop () Bool (! 
 (let (($v (forall ((T1 thread) (T2 thread)) (=> (and (__pc3 T1) (__pc3 T2)) (= T1 T2)))
 ))
 (and $v))
 :invar-property 0))

(define-fun .axiom () Bool (! 
 (let (($v (and (forall ((X ticket)) (le X X)) (forall ((X ticket) (Y ticket) (Z ticket)) (=> (and (le X Y) (le Y Z)) (le X Z))) (forall ((X ticket) (Y ticket)) (=> (and (le X Y) (le Y X)) (= X Y))) (forall ((X ticket) (Y ticket)) (or (le X Y) (le Y X))) (forall ((X ticket)) (le zero X)) (forall ((X ticket)) (le X max)))
 ))
 (and $v))
 :axiom true))

(define-fun .init () Bool (! 
 (let (($v (and (forall ((V0 thread)) (= (__pc1 V0) true)) (forall ((V0 thread)) (= (__pc2 V0) false)) (forall ((V0 thread)) (= (__pc3 V0) false)) (= __service zero) (= __next_ticket zero) (forall ((V0 thread) (V1 ticket)) (= (__m V0 V1) (= V1 zero))))
 ))
 (and $v))
 :init true))

(define-fun .action_step12 () Bool (! 
 (let (($v (exists ((t thread) (y ticket)) (and (forall ((V0 thread) (V1 ticket)) (= (m V0 V1) (ite (= V0 t) (= V1 __next_ticket) (__m V0 V1)))) (forall ((V0 thread)) (= (pc1 V0) (ite (= V0 t) false (__pc1 V0)))) (forall ((V0 thread)) (= (pc2 V0) (ite (= V0 t) true (__pc2 V0)))) (= next_ticket y) (__pc1 t) (not (le y __next_ticket)) (forall ((Z ticket)) (=> (not (le Z __next_ticket)) (le y Z)))))
 ))
 (and $v))
 :action step12))

(define-fun .action_step23 () Bool (! 
 (let (($v (exists ((k ticket) (t thread)) (and (forall ((V0 thread)) (= (pc2 V0) (ite (= V0 t) false (__pc2 V0)))) (forall ((V0 thread)) (= (pc3 V0) (ite (= V0 t) true (__pc3 V0)))) (__pc2 t) (__m t k) (le k __service)))
 ))
 (and $v))
 :action step23))

(define-fun .action_step31 () Bool (! 
 (let (($v (exists ((t thread) (y ticket)) (and (forall ((V0 thread)) (= (pc3 V0) (ite (= V0 t) false (__pc3 V0)))) (forall ((V0 thread)) (= (pc1 V0) (ite (= V0 t) true (__pc1 V0)))) (= service y) (__pc3 t) (not (le y __service)) (forall ((Z ticket)) (=> (not (le Z __service)) (le y Z)))))
 ))
 (and $v))
 :action step31))

