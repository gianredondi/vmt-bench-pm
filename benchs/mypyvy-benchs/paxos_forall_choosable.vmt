(declare-sort node 0)
(declare-sort value 0)
(declare-sort quorum 0)
(declare-sort round 0)
(declare-const none round)
(define-fun none.sv () round (! none :rigid true))
(declare-fun le (round round) Bool)
(declare-fun member (node quorum) Bool)
(declare-fun _0__one_a (round) Bool)
(declare-fun _1__one_a (round) Bool)
(define-fun _0__one_a.sv ((V0 round)) Bool (! (_0__one_a V0) :next _1__one_a))
(declare-fun _0__one_b (node round) Bool)
(declare-fun _1__one_b (node round) Bool)
(define-fun _0__one_b.sv ((V0 node) (V1 round)) Bool (! (_0__one_b V0 V1) :next _1__one_b))
(declare-fun _0__left_round (node round) Bool)
(declare-fun _1__left_round (node round) Bool)
(define-fun _0__left_round.sv ((V0 node) (V1 round)) Bool (! (_0__left_round V0 V1) :next _1__left_round))
(declare-fun _0__proposal (round value) Bool)
(declare-fun _1__proposal (round value) Bool)
(define-fun _0__proposal.sv ((V0 round) (V1 value)) Bool (! (_0__proposal V0 V1) :next _1__proposal))
(declare-fun _0__vote (node round value) Bool)
(declare-fun _1__vote (node round value) Bool)
(define-fun _0__vote.sv ((V0 node) (V1 round) (V2 value)) Bool (! (_0__vote V0 V1 V2) :next _1__vote))
(declare-fun _0__decision (round value) Bool)
(declare-fun _1__decision (round value) Bool)
(define-fun _0__decision.sv ((V0 round) (V1 value)) Bool (! (_0__decision V0 V1) :next _1__decision))
(declare-fun _0__choosable (round value quorum) Bool)
(declare-fun _1__choosable (round value quorum) Bool)
(define-fun _0__choosable.sv ((V0 round) (V1 value) (V2 quorum)) Bool (! (_0__choosable V0 V1 V2) :next _1__choosable))
(declare-fun _0__decision_quorum (round value) quorum)
(declare-fun _1__decision_quorum (round value) quorum)
(define-fun _0__decision_quorum.sv ((V0 round) (V1 value)) quorum (! (_0__decision_quorum V0 V1) :next _1__decision_quorum))
(define-fun axiom_0 () Bool (! (forall ((X_0 round)) (le X_0 X_0)) :axiom true))
(define-fun axiom_1 () Bool (! (forall ((X_1 round) (Y_2 round) (Z_3 round))
  (=> (and (le X_1 Y_2) (le Y_2 Z_3)) (le X_1 Z_3))) :axiom true))
(define-fun axiom_2 () Bool (! (forall ((X_4 round) (Y_5 round))
  (=> (and (le X_4 Y_5) (le Y_5 X_4)) (= X_4 Y_5))) :axiom true))
(define-fun axiom_3 () Bool (! (forall ((X_6 round) (Y_7 round)) (or (le X_6 Y_7) (le Y_7 X_6))) :axiom true))
(define-fun axiom_4 () Bool (! (forall ((Q1_8 quorum) (Q2_9 quorum))
  (exists ((N_10 node)) (and (member N_10 Q1_8) (member N_10 Q2_9)))) :axiom true))
(define-fun init () Bool (! (and (forall ((R_0 round)) (not (_0__one_a R_0)))
     (forall ((N_1 node) (R_2 round)) (not (_0__one_b N_1 R_2)))
     (forall ((N_3 node) (R_4 round)) (not (_0__left_round N_3 R_4)))
     (forall ((R_5 round) (V_6 value)) (not (_0__proposal R_5 V_6)))
     (forall ((N_7 node) (R_8 round) (V_9 value)) (not (_0__vote N_7 R_8 V_9)))
     (forall ((R_10 round) (V_11 value)) (not (_0__decision R_10 V_11)))) :init true))
(define-fun transition_0 () Bool (! (exists ((r_0 round))
  (let ((a!1 (forall ((R_1 round))
               (= (_1__one_a R_1) (or (_0__one_a R_1) (= R_1 r_0))))))
    (and (distinct r_0 none)
         a!1
         (forall ((x0_2 node) (x1_3 round))
           (= (_1__one_b x0_2 x1_3) (_0__one_b x0_2 x1_3)))
         (forall ((x0_4 node) (x1_5 round))
           (= (_1__left_round x0_4 x1_5) (_0__left_round x0_4 x1_5)))
         (forall ((x0_6 round) (x1_7 value))
           (= (_1__proposal x0_6 x1_7) (_0__proposal x0_6 x1_7)))
         (forall ((x0_8 node) (x1_9 round) (x2_10 value))
           (= (_1__vote x0_8 x1_9 x2_10) (_0__vote x0_8 x1_9 x2_10)))
         (forall ((x0_11 round) (x1_12 value))
           (= (_1__decision x0_11 x1_12) (_0__decision x0_11 x1_12)))
         (forall ((x0_13 round) (x1_14 value))
           (= (_1__decision_quorum x0_13 x1_14)
              (_0__decision_quorum x0_13 x1_14)))))) :action true))
(define-fun transition_1 () Bool (! (exists ((n_15 node) (r_16 round))
  (let ((a!1 (forall ((N_17 node) (R_18 round))
               (= (_1__one_b N_17 R_18)
                  (or (_0__one_b N_17 R_18) (and (= N_17 n_15) (= R_18 r_16)))))))
    (and (distinct r_16 none)
         (_0__one_a r_16)
         (not (_0__left_round n_15 r_16))
         a!1
         (forall ((N_19 node) (R_20 round))
           (let ((a!1 (or (_0__left_round N_19 R_20)
                          (and (= N_19 n_15) (not (le r_16 R_20))))))
             (= (_1__left_round N_19 R_20) a!1)))
         (forall ((x0_21 round)) (= (_1__one_a x0_21) (_0__one_a x0_21)))
         (forall ((x0_22 round) (x1_23 value))
           (= (_1__proposal x0_22 x1_23) (_0__proposal x0_22 x1_23)))
         (forall ((x0_24 node) (x1_25 round) (x2_26 value))
           (= (_1__vote x0_24 x1_25 x2_26) (_0__vote x0_24 x1_25 x2_26)))
         (forall ((x0_27 round) (x1_28 value))
           (= (_1__decision x0_27 x1_28) (_0__decision x0_27 x1_28)))
         (forall ((x0_29 round) (x1_30 value))
           (= (_1__decision_quorum x0_29 x1_30)
              (_0__decision_quorum x0_29 x1_30)))))) :action true))
(define-fun transition_2 () Bool (! (exists ((r_31 round) (q_32 quorum) (maxr_33 round) (v_34 value))
  (let ((a!1 (exists ((N_40 node))
               (and (member N_40 q_32)
                    (not (le r_31 maxr_33))
                    (_0__vote N_40 maxr_33 v_34))))
        (a!4 (forall ((R_44 round) (V_45 value))
               (= (_1__proposal R_44 V_45)
                  (or (_0__proposal R_44 V_45)
                      (and (= R_44 r_31) (= V_45 v_34)))))))
  (let ((a!2 (and (distinct maxr_33 none)
                  a!1
                  (forall ((N_41 node) (MAXR_42 round) (V_43 value))
                    (let ((a!1 (and (member N_41 q_32)
                                    (not (le r_31 MAXR_42))
                                    (_0__vote N_41 MAXR_42 V_43))))
                      (=> a!1 (le MAXR_42 maxr_33)))))))
  (let ((a!3 (or (and (= maxr_33 none)
                      (forall ((N_37 node) (MAXR_38 round) (V_39 value))
                        (let ((a!1 (and (member N_37 q_32)
                                        (not (le r_31 MAXR_38))
                                        (_0__vote N_37 MAXR_38 V_39))))
                          (not a!1))))
                 a!2)))
    (and (distinct r_31 none)
         (forall ((V_35 value)) (not (_0__proposal r_31 V_35)))
         (forall ((N_36 node)) (=> (member N_36 q_32) (_0__one_b N_36 r_31)))
         a!3
         a!4
         (forall ((x0_46 round)) (= (_1__one_a x0_46) (_0__one_a x0_46)))
         (forall ((x0_47 node) (x1_48 round))
           (= (_1__one_b x0_47 x1_48) (_0__one_b x0_47 x1_48)))
         (forall ((x0_49 node) (x1_50 round))
           (= (_1__left_round x0_49 x1_50) (_0__left_round x0_49 x1_50)))
         (forall ((x0_51 node) (x1_52 round) (x2_53 value))
           (= (_1__vote x0_51 x1_52 x2_53) (_0__vote x0_51 x1_52 x2_53)))
         (forall ((x0_54 round) (x1_55 value))
           (= (_1__decision x0_54 x1_55) (_0__decision x0_54 x1_55)))
         (forall ((x0_56 round) (x1_57 value))
           (= (_1__decision_quorum x0_56 x1_57)
              (_0__decision_quorum x0_56 x1_57)))))))) :action true))
(define-fun transition_3 () Bool (! (exists ((n_58 node) (v_59 value) (r_60 round))
  (let ((a!1 (forall ((N_61 node) (R_62 round) (V_63 value))
               (= (_1__vote N_61 R_62 V_63)
                  (or (_0__vote N_61 R_62 V_63)
                      (and (= N_61 n_58) (= R_62 r_60) (= V_63 v_59)))))))
    (and (distinct r_60 none)
         (not (_0__left_round n_58 r_60))
         (_0__proposal r_60 v_59)
         a!1
         (forall ((x0_64 round)) (= (_1__one_a x0_64) (_0__one_a x0_64)))
         (forall ((x0_65 node) (x1_66 round))
           (= (_1__one_b x0_65 x1_66) (_0__one_b x0_65 x1_66)))
         (forall ((x0_67 node) (x1_68 round))
           (= (_1__left_round x0_67 x1_68) (_0__left_round x0_67 x1_68)))
         (forall ((x0_69 round) (x1_70 value))
           (= (_1__proposal x0_69 x1_70) (_0__proposal x0_69 x1_70)))
         (forall ((x0_71 round) (x1_72 value))
           (= (_1__decision x0_71 x1_72) (_0__decision x0_71 x1_72)))
         (forall ((x0_73 round) (x1_74 value))
           (= (_1__decision_quorum x0_73 x1_74)
              (_0__decision_quorum x0_73 x1_74)))))) :action true))
(define-fun transition_4 () Bool (! (exists ((r_75 round) (v_76 value) (q_77 quorum))
  (let ((a!1 (forall ((R_79 round) (V_80 value))
               (= (_1__decision R_79 V_80)
                  (or (_0__decision R_79 V_80)
                      (and (= R_79 r_75) (= V_80 v_76))))))
        (a!2 (forall ((R_81 round) (V_82 value))
               (=> (not (and (= R_81 r_75) (= V_82 v_76)))
                   (= (_1__decision_quorum R_81 V_82)
                      (_0__decision_quorum R_81 V_82))))))
    (and (distinct r_75 none)
         (forall ((N_78 node))
           (=> (member N_78 q_77) (_0__vote N_78 r_75 v_76)))
         a!1
         a!2
         (= (_1__decision_quorum r_75 v_76) q_77)
         (forall ((x0_83 round)) (= (_1__one_a x0_83) (_0__one_a x0_83)))
         (forall ((x0_84 node) (x1_85 round))
           (= (_1__one_b x0_84 x1_85) (_0__one_b x0_84 x1_85)))
         (forall ((x0_86 node) (x1_87 round))
           (= (_1__left_round x0_86 x1_87) (_0__left_round x0_86 x1_87)))
         (forall ((x0_88 round) (x1_89 value))
           (= (_1__proposal x0_88 x1_89) (_0__proposal x0_88 x1_89)))
         (forall ((x0_90 node) (x1_91 round) (x2_92 value))
           (= (_1__vote x0_90 x1_91 x2_92) (_0__vote x0_90 x1_91 x2_92)))))) :action true))
(define-fun safety-prop () Bool (!(let ((a!1 (forall ((R1_0 round) (V1_1 value) (R2_2 round) (V2_3 value))
             (=> (and (_0__decision R1_0 V1_1) (_0__decision R2_2 V2_3))
                 (= V1_1 V2_3)))))
  (and a!1)) :invar-property 0))
(define-fun invariant_0 () Bool (! (forall ((R1_0 round) (V1_1 value) (R2_2 round) (V2_3 value))
  (=> (and (_0__decision R1_0 V1_1) (_0__decision R2_2 V2_3)) (= V1_1 V2_3))) :invar-property 0))
(define-fun invariant_1 () Bool (! (forall ((R_4 round) (V1_5 value) (V2_6 value))
  (=> (and (_0__proposal R_4 V1_5) (_0__proposal R_4 V2_6)) (= V1_5 V2_6))) :invar-property 1))
(define-fun invariant_2 () Bool (! (forall ((N_7 node) (R_8 round) (V_9 value))
  (=> (_0__vote N_7 R_8 V_9) (_0__proposal R_8 V_9))) :invar-property 2))
(define-fun invariant_3 () Bool (! (forall ((R_10 round) (V_11 value) (N_12 node) (Q_13 quorum))
  (=> (and (_0__decision R_10 V_11)
           (member N_12 Q_13)
           (= Q_13 (_0__decision_quorum R_10 V_11)))
      (_0__vote N_12 R_10 V_11))) :invar-property 3))
(define-fun invariant_4 () Bool (! (forall ((N_14 node) (V_15 value)) (not (_0__vote N_14 none V_15))) :invar-property 4))
(define-fun invariant_5 () Bool (! (forall ((N_16 node) (R2_17 round) (R1_18 round))
  (=> (and (_0__one_b N_16 R2_17) (not (le R2_17 R1_18)))
      (_0__left_round N_16 R1_18))) :invar-property 5))
(define-fun invariant_6 () Bool (! (forall ((R1_19 round) (R2_20 round) (V1_21 value) (V2_22 value) (Q_23 quorum))
  (=> (and (not (le R2_20 R1_19))
           (_0__proposal R2_20 V2_22)
           (distinct V1_21 V2_22))
      (not (_0__choosable R1_19 V1_21 Q_23)))) :invar-property 6))
