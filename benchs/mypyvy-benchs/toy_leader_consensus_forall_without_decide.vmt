(declare-sort quorum 0)
(declare-sort node 0)
(declare-const _0__voting_quorum quorum)
(declare-const _1__voting_quorum quorum)
(define-fun _0__voting_quorum.sv () quorum (! _0__voting_quorum :next _1__voting_quorum))
(declare-fun member (node quorum) Bool)
(declare-fun _0__vote_request_msg (node node) Bool)
(declare-fun _1__vote_request_msg (node node) Bool)
(define-fun _0__vote_request_msg.sv ((V0 node) (V1 node)) Bool (! (_0__vote_request_msg V0 V1) :next _1__vote_request_msg))
(declare-fun _0__voted (node) Bool)
(declare-fun _1__voted (node) Bool)
(define-fun _0__voted.sv ((V0 node)) Bool (! (_0__voted V0) :next _1__voted))
(declare-fun _0__vote_msg (node node) Bool)
(declare-fun _1__vote_msg (node node) Bool)
(define-fun _0__vote_msg.sv ((V0 node) (V1 node)) Bool (! (_0__vote_msg V0 V1) :next _1__vote_msg))
(declare-fun _0__votes (node node) Bool)
(declare-fun _1__votes (node node) Bool)
(define-fun _0__votes.sv ((V0 node) (V1 node)) Bool (! (_0__votes V0 V1) :next _1__votes))
(declare-fun _0__leader (node) Bool)
(declare-fun _1__leader (node) Bool)
(define-fun _0__leader.sv ((V0 node)) Bool (! (_0__leader V0) :next _1__leader))
(define-fun axiom_0 () Bool (! (forall ((Q1_0 quorum) (Q2_1 quorum))
  (exists ((N_2 node)) (and (member N_2 Q1_0) (member N_2 Q2_1)))) :axiom true))
(define-fun init () Bool (! (and (forall ((N1_0 node) (N2_1 node)) (not (_0__vote_request_msg N1_0 N2_1)))
     (forall ((N_2 node)) (not (_0__voted N_2)))
     (forall ((N1_3 node) (N2_4 node)) (not (_0__vote_msg N1_3 N2_4)))
     (forall ((N1_5 node) (N2_6 node)) (not (_0__votes N1_5 N2_6)))
     (forall ((N1_7 node)) (not (_0__leader N1_7)))) :init true))
(define-fun transition_0 () Bool (! (exists ((src_0 node) (dst_1 node))
  (let ((a!1 (forall ((N1_2 node) (N2_3 node))
               (= (_1__vote_request_msg N1_2 N2_3)
                  (or (_0__vote_request_msg N1_2 N2_3)
                      (and (= N1_2 src_0) (= N2_3 dst_1)))))))
    (and a!1
         (forall ((x0_4 node)) (= (_1__voted x0_4) (_0__voted x0_4)))
         (forall ((x0_5 node) (x1_6 node))
           (= (_1__vote_msg x0_5 x1_6) (_0__vote_msg x0_5 x1_6)))
         (forall ((x0_7 node) (x1_8 node))
           (= (_1__votes x0_7 x1_8) (_0__votes x0_7 x1_8)))
         (forall ((x0_9 node)) (= (_1__leader x0_9) (_0__leader x0_9)))
         (= _1__voting_quorum _0__voting_quorum)))) :action true))
(define-fun transition_1 () Bool (! (exists ((src_10 node) (dst_11 node))
  (let ((a!1 (forall ((N1_12 node) (N2_13 node) (N_14 node))
               (let ((a!1 (= (_1__vote_msg N1_12 N2_13)
                             (or (_0__vote_msg N1_12 N2_13)
                                 (and (= N1_12 src_10) (= N2_13 dst_11)))))
                     (a!2 (=> (not (and (= N1_12 dst_11) (= N2_13 src_10)))
                              (= (_1__vote_request_msg N1_12 N2_13)
                                 (_0__vote_request_msg N1_12 N2_13)))))
                 (and (not (_0__voted src_10))
                      (_0__vote_request_msg dst_11 src_10)
                      a!1
                      (= (_1__voted N_14) (or (_0__voted N_14) (= N_14 src_10)))
                      a!2)))))
    (and a!1
         (forall ((x0_15 node) (x1_16 node))
           (= (_1__votes x0_15 x1_16) (_0__votes x0_15 x1_16)))
         (forall ((x0_17 node)) (= (_1__leader x0_17) (_0__leader x0_17)))
         (= _1__voting_quorum _0__voting_quorum)))) :action true))
(define-fun transition_2 () Bool (! (exists ((n_18 node) (sender_19 node))
  (and (forall ((N1_20 node) (N2_21 node))
         (let ((a!1 (= (_1__votes N1_20 N2_21)
                       (or (_0__votes N1_20 N2_21)
                           (and (= N1_20 n_18) (= N2_21 sender_19))))))
           (and (_0__vote_msg sender_19 n_18) a!1)))
       (forall ((x0_22 node) (x1_23 node))
         (= (_1__vote_request_msg x0_22 x1_23)
            (_0__vote_request_msg x0_22 x1_23)))
       (forall ((x0_24 node)) (= (_1__voted x0_24) (_0__voted x0_24)))
       (forall ((x0_25 node) (x1_26 node))
         (= (_1__vote_msg x0_25 x1_26) (_0__vote_msg x0_25 x1_26)))
       (forall ((x0_27 node)) (= (_1__leader x0_27) (_0__leader x0_27)))
       (= _1__voting_quorum _0__voting_quorum))) :action true))
(define-fun transition_3 () Bool (! (exists ((q_28 quorum) (sn_29 node))
  (and (forall ((N_30 node)) (=> (member N_30 q_28) (_0__votes sn_29 N_30)))
       (= _1__voting_quorum q_28)
       (forall ((x0_31 node) (x1_32 node))
         (= (_1__vote_request_msg x0_31 x1_32)
            (_0__vote_request_msg x0_31 x1_32)))
       (forall ((x0_33 node)) (= (_1__voted x0_33) (_0__voted x0_33)))
       (forall ((x0_34 node) (x1_35 node))
         (= (_1__vote_msg x0_34 x1_35) (_0__vote_msg x0_34 x1_35)))
       (forall ((x0_36 node) (x1_37 node))
         (= (_1__votes x0_36 x1_37) (_0__votes x0_36 x1_37)))
       (forall ((x0_38 node)) (= (_1__leader x0_38) (_0__leader x0_38))))) :action true))
(define-fun transition_4 () Bool (! (exists ((n_39 node))
  (let ((a!1 (forall ((N_40 node))
               (and (=> (member N_40 _0__voting_quorum) (_0__votes n_39 N_40))
                    (= (_1__leader N_40) (or (_0__leader N_40) (= N_40 n_39)))))))
    (and a!1
         (forall ((x0_41 node) (x1_42 node))
           (= (_1__vote_request_msg x0_41 x1_42)
              (_0__vote_request_msg x0_41 x1_42)))
         (forall ((x0_43 node)) (= (_1__voted x0_43) (_0__voted x0_43)))
         (forall ((x0_44 node) (x1_45 node))
           (= (_1__vote_msg x0_44 x1_45) (_0__vote_msg x0_44 x1_45)))
         (forall ((x0_46 node) (x1_47 node))
           (= (_1__votes x0_46 x1_47) (_0__votes x0_46 x1_47)))
         (= _1__voting_quorum _0__voting_quorum)))) :action true))
(define-fun safety-prop () Bool (!(let ((a!1 (forall ((N1_0 node) (N2_1 node))
             (=> (and (_0__leader N1_0) (_0__leader N2_1)) (= N1_0 N2_1)))))
  (and a!1)) :invar-property 0))
(define-fun invariant_0 () Bool (! (forall ((N1_0 node) (N2_1 node))
  (=> (and (_0__leader N1_0) (_0__leader N2_1)) (= N1_0 N2_1))) :invar-property 0))
(define-fun invariant_1 () Bool (! (forall ((N_2 node) (N1_3 node))
  (=> (_0__votes N_2 N1_3) (_0__vote_msg N1_3 N_2))) :invar-property 1))
(define-fun invariant_2 () Bool (! (forall ((N_4 node) (N1_5 node) (N2_6 node))
  (=> (and (_0__vote_msg N_4 N1_5) (_0__vote_msg N_4 N2_6)) (= N1_5 N2_6))) :invar-property 2))
(define-fun invariant_3 () Bool (! (forall ((N_7 node) (N1_8 node)) (=> (_0__vote_msg N_7 N1_8) (_0__voted N_7))) :invar-property 3))
(define-fun invariant_4 () Bool (! (forall ((N_9 node) (N1_10 node))
  (=> (and (_0__leader N_9) (member N1_10 _0__voting_quorum))
      (_0__votes N_9 N1_10))) :invar-property 4))
