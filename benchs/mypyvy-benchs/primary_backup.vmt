(declare-sort data 0)
(declare-const zero data)
(define-fun zero.sv () data (! zero :rigid true))
(declare-const _0__primary data)
(declare-const _1__primary data)
(define-fun _0__primary.sv () data (! _0__primary :next _1__primary))
(declare-const _0__backup data)
(declare-const _1__backup data)
(define-fun _0__backup.sv () data (! _0__backup :next _1__backup))
(declare-fun le (data data) Bool)
(declare-fun _0__msg (data) Bool)
(declare-fun _1__msg (data) Bool)
(define-fun _0__msg.sv ((V0 data)) Bool (! (_0__msg V0) :next _1__msg))
(define-fun axiom_0 () Bool (! (forall ((X_0 data)) (le X_0 X_0)) :axiom true))
(define-fun axiom_1 () Bool (! (forall ((X_1 data) (Y_2 data))
  (=> (and (le X_1 Y_2) (le Y_2 X_1)) (= X_1 Y_2))) :axiom true))
(define-fun axiom_2 () Bool (! (forall ((X_3 data) (Y_4 data) (Z_5 data))
  (=> (and (le X_3 Y_4) (le Y_4 Z_5)) (le X_3 Z_5))) :axiom true))
(define-fun axiom_3 () Bool (! (forall ((X_6 data) (Y_7 data)) (or (le X_6 Y_7) (le Y_7 X_6))) :axiom true))
(define-fun axiom_4 () Bool (! (forall ((X_8 data)) (le zero X_8)) :axiom true))
(define-fun init () Bool (! (and (= _0__primary zero)
     (= _0__backup zero)
     (forall ((X_0 data)) (not (_0__msg X_0)))) :init true))
(define-fun transition_0 () Bool (! (let ((a!1 (forall ((X_0 data))
             (= (_1__msg X_0) (or (_0__msg X_0) (= X_0 _0__primary))))))
  (and a!1 (= _1__primary _0__primary) (= _1__backup _0__backup))) :action true))
(define-fun transition_1 () Bool (! (exists ((x_1 data))
  (let ((a!1 (forall ((X_2 data))
               (= (_1__msg X_2) (and (_0__msg X_2) (distinct X_2 x_1))))))
    (and (_0__msg x_1) (= _1__backup x_1) a!1 (= _1__primary _0__primary)))) :action true))
(define-fun transition_2 () Bool (! (exists ((next_3 data))
  (and (le _0__primary next_3)
       (= _1__primary next_3)
       (forall ((x0_4 data)) (= (_1__msg x0_4) (_0__msg x0_4)))
       (= _1__backup _0__backup))) :action true))
(define-fun safety-prop () Bool (!(and (le _0__backup _0__primary)) :invar-property 0))
(define-fun invariant_0 () Bool (! (le _0__backup _0__primary) :invar-property 0))
(define-fun invariant_1 () Bool (! (forall ((D_0 data)) (=> (_0__msg D_0) (le D_0 _0__primary))) :invar-property 1))
(define-fun invariant_2 () Bool (! (le _0__backup _0__primary) :invar-property 2))
