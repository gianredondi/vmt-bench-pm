(declare-sort node 0)
(declare-fun _0__table (node node node) Bool)
(declare-fun _1__table (node node node) Bool)
(define-fun _0__table.sv ((V0 node) (V1 node) (V2 node)) Bool (! (_0__table V0 V1 V2) :next _1__table))
(declare-fun _0__pending (node node node node) Bool)
(declare-fun _1__pending (node node node node) Bool)
(define-fun _0__pending.sv ((V0 node) (V1 node) (V2 node) (V3 node)) Bool (! (_0__pending V0 V1 V2 V3) :next _1__pending))
(define-fun init () Bool (! (and (forall ((T_0 node) (N1_1 node) (N2_2 node))
       (= (_0__table T_0 N1_1 N2_2) (= N1_1 N2_2)))
     (forall ((PS_3 node) (PD_4 node) (S_5 node) (D_6 node))
       (not (_0__pending PS_3 PD_4 S_5 D_6)))) :init true))
(define-fun transition_0 () Bool (! (exists ((ps_0 node) (pd_1 node))
  (let ((a!1 (forall ((PS_2 node) (PD_3 node) (S_4 node) (D_5 node))
               (= (_1__pending PS_2 PD_3 S_4 D_5)
                  (or (_0__pending PS_2 PD_3 S_4 D_5)
                      (and (= PS_2 ps_0)
                           (= PD_3 pd_1)
                           (= S_4 ps_0)
                           (= D_5 ps_0)))))))
    (and a!1
         (forall ((x0_6 node) (x1_7 node) (x2_8 node))
           (= (_1__table x0_6 x1_7 x2_8) (_0__table x0_6 x1_7 x2_8)))))) :action true))
(define-fun transition_1 () Bool (! (exists ((ps_9 node) (pd_10 node) (sw0_11 node) (sw1_12 node) (nondet_13 node))
  (let ((a!1 (forall ((PS_14 node) (PD_15 node) (S_16 node) (D_17 node))
               (= (_1__pending PS_14 PD_15 S_16 D_17)
                  (or (and (_0__pending PS_14 PD_15 S_16 D_17)
                           (= PS_14 nondet_13))
                      (and (= PS_14 ps_9) (= PD_15 pd_10) (= S_16 sw1_12))))))
        (a!2 (forall ((T_18 node) (N1_19 node) (N2_20 node))
               (let ((a!1 (forall ((W_21 node))
                            (=> (distinct W_21 sw1_12)
                                (not (_0__table T_18 sw1_12 W_21))))))
                 (= (_1__table T_18 N1_19 N2_20)
                    (or (_0__table T_18 N1_19 N2_20)
                        (and (= T_18 ps_9)
                             (distinct ps_9 sw1_12)
                             a!1
                             (_0__table T_18 N1_19 sw1_12)
                             (_0__table T_18 sw0_11 N2_20))))))))
    (and (_0__pending ps_9 pd_10 sw0_11 sw1_12) a!1 a!2))) :action true))
(define-fun safety-prop () Bool (!(let ((a!1 (forall ((T_2 node) (X_3 node) (Y_4 node) (Z_5 node))
             (=> (and (_0__table T_2 X_3 Y_4) (_0__table T_2 Y_4 Z_5))
                 (_0__table T_2 X_3 Z_5))))
      (a!2 (forall ((T_6 node) (X_7 node) (Y_8 node))
             (=> (and (_0__table T_6 X_7 Y_8) (_0__table T_6 Y_8 X_7))
                 (= X_7 Y_8))))
      (a!3 (forall ((T_9 node) (X_10 node) (Y_11 node) (Z_12 node))
             (=> (and (_0__table T_9 X_10 Y_11) (_0__table T_9 X_10 Z_12))
                 (or (_0__table T_9 Y_11 Z_12) (_0__table T_9 Z_12 Y_11))))))
  (and (forall ((T_0 node) (X_1 node)) (_0__table T_0 X_1 X_1)) a!1 a!2 a!3)) :invar-property 0))
(define-fun invariant_0 () Bool (! (forall ((T_0 node) (X_1 node)) (_0__table T_0 X_1 X_1)) :invar-property 0))
(define-fun invariant_1 () Bool (! (forall ((T_2 node) (X_3 node) (Y_4 node) (Z_5 node))
  (=> (and (_0__table T_2 X_3 Y_4) (_0__table T_2 Y_4 Z_5))
      (_0__table T_2 X_3 Z_5))) :invar-property 1))
(define-fun invariant_2 () Bool (! (forall ((T_6 node) (X_7 node) (Y_8 node))
  (=> (and (_0__table T_6 X_7 Y_8) (_0__table T_6 Y_8 X_7)) (= X_7 Y_8))) :invar-property 2))
(define-fun invariant_3 () Bool (! (forall ((T_9 node) (X_10 node) (Y_11 node) (Z_12 node))
  (=> (and (_0__table T_9 X_10 Y_11) (_0__table T_9 X_10 Z_12))
      (or (_0__table T_9 Y_11 Z_12) (_0__table T_9 Z_12 Y_11)))) :invar-property 3))
(define-fun invariant_4 () Bool (! (forall ((PS_13 node) (PD_14 node) (S_15 node) (D_16 node))
  (=> (and (_0__pending PS_13 PD_14 S_15 D_16) (distinct PS_13 S_15))
      (exists ((W_17 node))
        (and (_0__table PS_13 S_15 W_17) (distinct W_17 S_15))))) :invar-property 4))
(define-fun invariant_5 () Bool (! (forall ((T_18 node) (X_19 node) (Y_20 node))
  (=> (and (_0__table T_18 X_19 Y_20) (distinct T_18 Y_20) (distinct X_19 Y_20))
      (exists ((W_21 node))
        (and (_0__table T_18 Y_20 W_21) (distinct W_21 Y_20))))) :invar-property 5))
