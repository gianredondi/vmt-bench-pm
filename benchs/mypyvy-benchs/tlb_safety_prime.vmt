(declare-sort processor 0)
(declare-sort pmap 0)
(declare-sort pageentry 0)
(declare-sort location 0)
(declare-const i1 location)
(define-fun i1.sv () location (! i1 :rigid true))
(declare-const i2 location)
(define-fun i2.sv () location (! i2 :rigid true))
(declare-const i3 location)
(define-fun i3.sv () location (! i3 :rigid true))
(declare-const i4 location)
(define-fun i4.sv () location (! i4 :rigid true))
(declare-const i5 location)
(define-fun i5.sv () location (! i5 :rigid true))
(declare-const i6 location)
(define-fun i6.sv () location (! i6 :rigid true))
(declare-const i7 location)
(define-fun i7.sv () location (! i7 :rigid true))
(declare-const i8 location)
(define-fun i8.sv () location (! i8 :rigid true))
(declare-const i9 location)
(define-fun i9.sv () location (! i9 :rigid true))
(declare-const i11 location)
(define-fun i11.sv () location (! i11 :rigid true))
(declare-const i12 location)
(define-fun i12.sv () location (! i12 :rigid true))
(declare-const i14 location)
(define-fun i14.sv () location (! i14 :rigid true))
(declare-const i15 location)
(define-fun i15.sv () location (! i15 :rigid true))
(declare-const m2 location)
(define-fun m2.sv () location (! m2 :rigid true))
(declare-const m3 location)
(define-fun m3.sv () location (! m3 :rigid true))
(declare-const m5 location)
(define-fun m5.sv () location (! m5 :rigid true))
(declare-const r1 location)
(define-fun r1.sv () location (! r1 :rigid true))
(declare-const r2 location)
(define-fun r2.sv () location (! r2 :rigid true))
(declare-const r3 location)
(define-fun r3.sv () location (! r3 :rigid true))
(declare-const r5 location)
(define-fun r5.sv () location (! r5 :rigid true))
(declare-const r6 location)
(define-fun r6.sv () location (! r6 :rigid true))
(declare-const r7 location)
(define-fun r7.sv () location (! r7 :rigid true))
(declare-const r8 location)
(define-fun r8.sv () location (! r8 :rigid true))
(declare-const b1 location)
(define-fun b1.sv () location (! b1 :rigid true))
(declare-fun _0__actionlock (processor) Bool)
(declare-fun _1__actionlock (processor) Bool)
(define-fun _0__actionlock.sv ((V0 processor)) Bool (! (_0__actionlock V0) :next _1__actionlock))
(declare-fun _0__actionneeded (processor) Bool)
(declare-fun _1__actionneeded (processor) Bool)
(define-fun _0__actionneeded.sv ((V0 processor)) Bool (! (_0__actionneeded V0) :next _1__actionneeded))
(declare-fun _0__active (processor) Bool)
(declare-fun _1__active (processor) Bool)
(define-fun _0__active.sv ((V0 processor)) Bool (! (_0__active V0) :next _1__active))
(declare-fun _0__interrupt (processor) Bool)
(declare-fun _1__interrupt (processor) Bool)
(define-fun _0__interrupt.sv ((V0 processor)) Bool (! (_0__interrupt V0) :next _1__interrupt))
(declare-fun _0__currentcpu (processor processor) Bool)
(declare-fun _1__currentcpu (processor processor) Bool)
(define-fun _0__currentcpu.sv ((V0 processor) (V1 processor)) Bool (! (_0__currentcpu V0 V1) :next _1__currentcpu))
(declare-fun _0__plock (pmap) Bool)
(declare-fun _1__plock (pmap) Bool)
(define-fun _0__plock.sv ((V0 pmap)) Bool (! (_0__plock V0) :next _1__plock))
(declare-fun _0__todo (processor processor) Bool)
(declare-fun _1__todo (processor processor) Bool)
(define-fun _0__todo.sv ((V0 processor) (V1 processor)) Bool (! (_0__todo V0 V1) :next _1__todo))
(declare-fun _0__error () Bool)
(declare-fun _1__error () Bool)
(define-fun _0__error.sv () Bool (! _0__error :next _1__error))
(declare-fun _0__pc (processor) location)
(declare-fun _1__pc (processor) location)
(define-fun _0__pc.sv ((V0 processor)) location (! (_0__pc V0) :next _1__pc))
(declare-fun _0__userpmap (processor) pmap)
(declare-fun _1__userpmap (processor) pmap)
(define-fun _0__userpmap.sv ((V0 processor)) pmap (! (_0__userpmap V0) :next _1__userpmap))
(declare-fun _0__writepmap (processor) pmap)
(declare-fun _1__writepmap (processor) pmap)
(define-fun _0__writepmap.sv ((V0 processor)) pmap (! (_0__writepmap V0) :next _1__writepmap))
(declare-fun _0__tlb (processor) pageentry)
(declare-fun _1__tlb (processor) pageentry)
(define-fun _0__tlb.sv ((V0 processor)) pageentry (! (_0__tlb V0) :next _1__tlb))
(declare-fun _0__pentry (pmap) pageentry)
(declare-fun _1__pentry (pmap) pageentry)
(define-fun _0__pentry.sv ((V0 pmap)) pageentry (! (_0__pentry V0) :next _1__pentry))
(define-fun axiom_0 () Bool (! (distinct i1
          i2
          i3
          i4
          i5
          i6
          i7
          i8
          i9
          i11
          i12
          i14
          i15
          m2
          m3
          m5
          r1
          r2
          r3
          r5
          r6
          r7
          r8
          b1) :axiom true))
(define-fun axiom_1 () Bool (! (forall ((L_0 location))
  (or (= L_0 i1)
      (= L_0 i2)
      (= L_0 i3)
      (= L_0 i4)
      (= L_0 i5)
      (= L_0 i6)
      (= L_0 i7)
      (= L_0 i8)
      (= L_0 i9)
      (= L_0 i11)
      (= L_0 i12)
      (= L_0 i14)
      (= L_0 i15)
      (= L_0 m2)
      (= L_0 m3)
      (= L_0 m5)
      (= L_0 r1)
      (= L_0 r2)
      (= L_0 r3)
      (= L_0 r5)
      (= L_0 r6)
      (= L_0 r7)
      (= L_0 r8)
      (= L_0 b1))) :axiom true))
(define-fun init () Bool (! (let ((a!1 (forall ((P_4 processor))
             (and (not (_0__actionlock P_4))
                  (not (_0__actionneeded P_4))
                  (not (_0__interrupt P_4))
                  (_0__active P_4)))))
  (and (forall ((P_0 processor)) (= (_0__pc P_0) b1))
       (forall ((P_1 processor) (C_2 processor)) (not (_0__currentcpu P_1 C_2)))
       (forall ((P_3 pmap)) (not (_0__plock P_3)))
       a!1
       (not _0__error))) :init true))
(define-fun transition_0 () Bool (! (exists ((p_0 processor) (m_1 pmap))
  (let ((a!1 (forall ((P_2 processor))
               (= (_1__active P_2) (and (_0__active P_2) (distinct P_2 p_0)))))
        (a!2 (forall ((P_3 processor))
               (=> (distinct P_3 p_0)
                   (= (_1__writepmap P_3) (_0__writepmap P_3)))))
        (a!3 (forall ((P_4 processor))
               (=> (distinct P_4 p_0) (= (_1__pc P_4) (_0__pc P_4))))))
    (and (= (_0__pc p_0) i1)
         a!1
         a!2
         (= (_1__writepmap p_0) m_1)
         a!3
         (= (_1__pc p_0) i2)
         (forall ((x0_5 processor))
           (= (_1__actionlock x0_5) (_0__actionlock x0_5)))
         (forall ((x0_6 processor))
           (= (_1__actionneeded x0_6) (_0__actionneeded x0_6)))
         (forall ((x0_7 processor))
           (= (_1__interrupt x0_7) (_0__interrupt x0_7)))
         (forall ((x0_8 processor) (x1_9 processor))
           (= (_1__currentcpu x0_8 x1_9) (_0__currentcpu x0_8 x1_9)))
         (forall ((x0_10 pmap)) (= (_1__plock x0_10) (_0__plock x0_10)))
         (forall ((x0_11 processor) (x1_12 processor))
           (= (_1__todo x0_11 x1_12) (_0__todo x0_11 x1_12)))
         (= _1__error _0__error)
         (forall ((x0_13 processor))
           (= (_1__userpmap x0_13) (_0__userpmap x0_13)))
         (forall ((x0_14 processor)) (= (_1__tlb x0_14) (_0__tlb x0_14)))
         (forall ((x0_15 pmap)) (= (_1__pentry x0_15) (_0__pentry x0_15)))))) :action true))
(define-fun transition_1 () Bool (! (exists ((p_16 processor))
  (let ((a!1 (forall ((P_17 pmap))
               (= (_1__plock P_17)
                  (or (_0__plock P_17) (= P_17 (_0__writepmap p_16))))))
        (a!2 (forall ((P_18 processor) (X_19 processor))
               (=> (distinct P_18 p_16)
                   (= (_1__todo P_18 X_19) (_0__todo P_18 X_19)))))
        (a!3 (forall ((X_20 processor))
               (= (_1__todo p_16 X_20)
                  (and (distinct (_0__pc X_20) b1) (distinct p_16 X_20)))))
        (a!4 (forall ((P_21 processor))
               (=> (distinct P_21 p_16) (= (_1__pc P_21) (_0__pc P_21)))))
        (a!5 (and (forall ((P_22 pmap)) (= (_1__plock P_22) (_0__plock P_22)))
                  (forall ((P_23 processor) (X_24 processor))
                    (= (_1__todo P_23 X_24) (_0__todo P_23 X_24)))
                  (forall ((P_25 processor)) (= (_1__pc P_25) (_0__pc P_25))))))
  (let ((a!6 (ite (not (_0__plock (_0__writepmap p_16)))
                  (and a!1 a!2 a!3 a!4 (= (_1__pc p_16) i3))
                  a!5)))
    (and (= (_0__pc p_16) i2)
         a!6
         (forall ((x0_26 processor))
           (= (_1__actionlock x0_26) (_0__actionlock x0_26)))
         (forall ((x0_27 processor))
           (= (_1__actionneeded x0_27) (_0__actionneeded x0_27)))
         (forall ((x0_28 processor)) (= (_1__active x0_28) (_0__active x0_28)))
         (forall ((x0_29 processor))
           (= (_1__interrupt x0_29) (_0__interrupt x0_29)))
         (forall ((x0_30 processor) (x1_31 processor))
           (= (_1__currentcpu x0_30 x1_31) (_0__currentcpu x0_30 x1_31)))
         (= _1__error _0__error)
         (forall ((x0_32 processor))
           (= (_1__userpmap x0_32) (_0__userpmap x0_32)))
         (forall ((x0_33 processor))
           (= (_1__writepmap x0_33) (_0__writepmap x0_33)))
         (forall ((x0_34 processor)) (= (_1__tlb x0_34) (_0__tlb x0_34)))
         (forall ((x0_35 pmap)) (= (_1__pentry x0_35) (_0__pentry x0_35))))))) :action true))
(define-fun transition_2 () Bool (! (exists ((p_36 processor) (cpu_37 processor))
  (let ((a!1 (forall ((P_38 processor) (X_39 processor))
               (=> (distinct P_38 p_36)
                   (= (_1__currentcpu P_38 X_39) (_0__currentcpu P_38 X_39)))))
        (a!2 (forall ((P_43 processor))
               (=> (distinct P_43 p_36) (= (_1__pc P_43) (_0__pc P_43))))))
    (and (= (_0__pc p_36) i3)
         (_0__todo p_36 cpu_37)
         a!1
         (forall ((X_40 processor))
           (= (_1__currentcpu p_36 X_40) (= X_40 cpu_37)))
         (forall ((P_41 processor) (X_42 processor))
           (let ((a!1 (and (_0__todo P_41 X_42)
                           (not (and (= P_41 p_36) (= X_42 cpu_37))))))
             (= (_1__todo P_41 X_42) a!1)))
         a!2
         (= (_1__pc p_36) i4)
         (forall ((x0_44 processor))
           (= (_1__actionlock x0_44) (_0__actionlock x0_44)))
         (forall ((x0_45 processor))
           (= (_1__actionneeded x0_45) (_0__actionneeded x0_45)))
         (forall ((x0_46 processor)) (= (_1__active x0_46) (_0__active x0_46)))
         (forall ((x0_47 processor))
           (= (_1__interrupt x0_47) (_0__interrupt x0_47)))
         (forall ((x0_48 pmap)) (= (_1__plock x0_48) (_0__plock x0_48)))
         (= _1__error _0__error)
         (forall ((x0_49 processor))
           (= (_1__userpmap x0_49) (_0__userpmap x0_49)))
         (forall ((x0_50 processor))
           (= (_1__writepmap x0_50) (_0__writepmap x0_50)))
         (forall ((x0_51 processor)) (= (_1__tlb x0_51) (_0__tlb x0_51)))
         (forall ((x0_52 pmap)) (= (_1__pentry x0_52) (_0__pentry x0_52)))))) :action true))
(define-fun transition_3 () Bool (! (exists ((p_53 processor))
  (let ((a!1 (forall ((P_55 processor) (X_56 processor))
               (=> (distinct P_55 p_53)
                   (= (_1__todo P_55 X_56) (_0__todo P_55 X_56)))))
        (a!2 (forall ((X_57 processor))
               (= (_1__todo p_53 X_57)
                  (and (distinct (_1__pc X_57) b1) (distinct X_57 p_53)))))
        (a!3 (forall ((P_58 processor))
               (=> (distinct P_58 p_53) (= (_1__pc P_58) (_0__pc P_58))))))
    (and (= (_0__pc p_53) i3)
         (forall ((X_54 processor)) (not (_0__todo p_53 X_54)))
         a!1
         a!2
         a!3
         (= (_1__pc p_53) i9)
         (forall ((x0_59 processor))
           (= (_1__actionlock x0_59) (_0__actionlock x0_59)))
         (forall ((x0_60 processor))
           (= (_1__actionneeded x0_60) (_0__actionneeded x0_60)))
         (forall ((x0_61 processor)) (= (_1__active x0_61) (_0__active x0_61)))
         (forall ((x0_62 processor))
           (= (_1__interrupt x0_62) (_0__interrupt x0_62)))
         (forall ((x0_63 processor) (x1_64 processor))
           (= (_1__currentcpu x0_63 x1_64) (_0__currentcpu x0_63 x1_64)))
         (forall ((x0_65 pmap)) (= (_1__plock x0_65) (_0__plock x0_65)))
         (= _1__error _0__error)
         (forall ((x0_66 processor))
           (= (_1__userpmap x0_66) (_0__userpmap x0_66)))
         (forall ((x0_67 processor))
           (= (_1__writepmap x0_67) (_0__writepmap x0_67)))
         (forall ((x0_68 processor)) (= (_1__tlb x0_68) (_0__tlb x0_68)))
         (forall ((x0_69 pmap)) (= (_1__pentry x0_69) (_0__pentry x0_69)))))) :action true))
(define-fun transition_4 () Bool (! (exists ((p_70 processor) (cpu_71 processor))
  (let ((a!1 (forall ((P_72 processor))
               (=> (distinct P_72 p_70) (= (_1__pc P_72) (_0__pc P_72))))))
    (and (= (_0__pc p_70) i4)
         (_0__currentcpu p_70 cpu_71)
         a!1
         (ite (= (_0__userpmap cpu_71) (_0__writepmap p_70))
              (= (_1__pc p_70) i5)
              (= (_1__pc p_70) i3))
         (forall ((x0_73 processor))
           (= (_1__actionlock x0_73) (_0__actionlock x0_73)))
         (forall ((x0_74 processor))
           (= (_1__actionneeded x0_74) (_0__actionneeded x0_74)))
         (forall ((x0_75 processor)) (= (_1__active x0_75) (_0__active x0_75)))
         (forall ((x0_76 processor))
           (= (_1__interrupt x0_76) (_0__interrupt x0_76)))
         (forall ((x0_77 processor) (x1_78 processor))
           (= (_1__currentcpu x0_77 x1_78) (_0__currentcpu x0_77 x1_78)))
         (forall ((x0_79 pmap)) (= (_1__plock x0_79) (_0__plock x0_79)))
         (forall ((x0_80 processor) (x1_81 processor))
           (= (_1__todo x0_80 x1_81) (_0__todo x0_80 x1_81)))
         (= _1__error _0__error)
         (forall ((x0_82 processor))
           (= (_1__userpmap x0_82) (_0__userpmap x0_82)))
         (forall ((x0_83 processor))
           (= (_1__writepmap x0_83) (_0__writepmap x0_83)))
         (forall ((x0_84 processor)) (= (_1__tlb x0_84) (_0__tlb x0_84)))
         (forall ((x0_85 pmap)) (= (_1__pentry x0_85) (_0__pentry x0_85)))))) :action true))
(define-fun transition_5 () Bool (! (exists ((p_86 processor) (cpu_87 processor))
  (let ((a!1 (forall ((C_88 processor))
               (= (_1__actionlock C_88)
                  (or (_0__actionlock C_88) (= C_88 cpu_87)))))
        (a!2 (forall ((P_89 processor))
               (=> (distinct P_89 p_86) (= (_1__pc P_89) (_0__pc P_89)))))
        (a!3 (and (forall ((C_90 processor))
                    (= (_1__actionlock C_90) (_0__actionlock C_90)))
                  (forall ((P_91 processor)) (= (_1__pc P_91) (_0__pc P_91))))))
  (let ((a!4 (ite (not (_0__actionlock cpu_87))
                  (and a!1 a!2 (= (_1__pc p_86) i6))
                  a!3)))
    (and (= (_0__pc p_86) i5)
         (_0__currentcpu p_86 cpu_87)
         a!4
         (forall ((x0_92 processor))
           (= (_1__actionneeded x0_92) (_0__actionneeded x0_92)))
         (forall ((x0_93 processor)) (= (_1__active x0_93) (_0__active x0_93)))
         (forall ((x0_94 processor))
           (= (_1__interrupt x0_94) (_0__interrupt x0_94)))
         (forall ((x0_95 processor) (x1_96 processor))
           (= (_1__currentcpu x0_95 x1_96) (_0__currentcpu x0_95 x1_96)))
         (forall ((x0_97 pmap)) (= (_1__plock x0_97) (_0__plock x0_97)))
         (forall ((x0_98 processor) (x1_99 processor))
           (= (_1__todo x0_98 x1_99) (_0__todo x0_98 x1_99)))
         (= _1__error _0__error)
         (forall ((x0_100 processor))
           (= (_1__userpmap x0_100) (_0__userpmap x0_100)))
         (forall ((x0_101 processor))
           (= (_1__writepmap x0_101) (_0__writepmap x0_101)))
         (forall ((x0_102 processor)) (= (_1__tlb x0_102) (_0__tlb x0_102)))
         (forall ((x0_103 pmap)) (= (_1__pentry x0_103) (_0__pentry x0_103))))))) :action true))
(define-fun transition_6 () Bool (! (exists ((p_104 processor) (cpu_105 processor))
  (let ((a!1 (forall ((C_106 processor))
               (= (_1__actionneeded C_106)
                  (or (_0__actionneeded C_106) (= C_106 cpu_105)))))
        (a!2 (forall ((P_107 processor))
               (=> (distinct P_107 p_104) (= (_1__pc P_107) (_0__pc P_107))))))
    (and (= (_0__pc p_104) i6)
         (_0__currentcpu p_104 cpu_105)
         a!1
         a!2
         (= (_1__pc p_104) i7)
         (forall ((x0_108 processor))
           (= (_1__actionlock x0_108) (_0__actionlock x0_108)))
         (forall ((x0_109 processor))
           (= (_1__active x0_109) (_0__active x0_109)))
         (forall ((x0_110 processor))
           (= (_1__interrupt x0_110) (_0__interrupt x0_110)))
         (forall ((x0_111 processor) (x1_112 processor))
           (= (_1__currentcpu x0_111 x1_112) (_0__currentcpu x0_111 x1_112)))
         (forall ((x0_113 pmap)) (= (_1__plock x0_113) (_0__plock x0_113)))
         (forall ((x0_114 processor) (x1_115 processor))
           (= (_1__todo x0_114 x1_115) (_0__todo x0_114 x1_115)))
         (= _1__error _0__error)
         (forall ((x0_116 processor))
           (= (_1__userpmap x0_116) (_0__userpmap x0_116)))
         (forall ((x0_117 processor))
           (= (_1__writepmap x0_117) (_0__writepmap x0_117)))
         (forall ((x0_118 processor)) (= (_1__tlb x0_118) (_0__tlb x0_118)))
         (forall ((x0_119 pmap)) (= (_1__pentry x0_119) (_0__pentry x0_119)))))) :action true))
(define-fun transition_7 () Bool (! (exists ((p_120 processor) (cpu_121 processor))
  (let ((a!1 (forall ((C_122 processor))
               (= (_1__actionlock C_122)
                  (and (_0__actionlock C_122) (distinct C_122 cpu_121)))))
        (a!2 (forall ((P_123 processor))
               (=> (distinct P_123 p_120) (= (_1__pc P_123) (_0__pc P_123))))))
  (let ((a!3 (ite (not (_0__actionlock cpu_121))
                  _1__error
                  (and (= _1__error _0__error) a!1 a!2 (= (_1__pc p_120) i8)))))
    (and (= (_0__pc p_120) i7)
         (_0__currentcpu p_120 cpu_121)
         a!3
         (forall ((x0_124 processor))
           (= (_1__actionneeded x0_124) (_0__actionneeded x0_124)))
         (forall ((x0_125 processor))
           (= (_1__active x0_125) (_0__active x0_125)))
         (forall ((x0_126 processor))
           (= (_1__interrupt x0_126) (_0__interrupt x0_126)))
         (forall ((x0_127 processor) (x1_128 processor))
           (= (_1__currentcpu x0_127 x1_128) (_0__currentcpu x0_127 x1_128)))
         (forall ((x0_129 pmap)) (= (_1__plock x0_129) (_0__plock x0_129)))
         (forall ((x0_130 processor) (x1_131 processor))
           (= (_1__todo x0_130 x1_131) (_0__todo x0_130 x1_131)))
         (forall ((x0_132 processor))
           (= (_1__userpmap x0_132) (_0__userpmap x0_132)))
         (forall ((x0_133 processor))
           (= (_1__writepmap x0_133) (_0__writepmap x0_133)))
         (forall ((x0_134 processor)) (= (_1__tlb x0_134) (_0__tlb x0_134)))
         (forall ((x0_135 pmap)) (= (_1__pentry x0_135) (_0__pentry x0_135))))))) :action true))
(define-fun transition_8 () Bool (! (exists ((p_136 processor) (cpu_137 processor))
  (let ((a!1 (forall ((C_138 processor))
               (= (_1__interrupt C_138)
                  (or (_0__interrupt C_138) (= C_138 cpu_137)))))
        (a!2 (forall ((P_139 processor))
               (=> (distinct P_139 p_136) (= (_1__pc P_139) (_0__pc P_139))))))
    (and (= (_0__pc p_136) i8)
         (_0__currentcpu p_136 cpu_137)
         a!1
         a!2
         (= (_1__pc p_136) i3)
         (forall ((x0_140 processor))
           (= (_1__actionlock x0_140) (_0__actionlock x0_140)))
         (forall ((x0_141 processor))
           (= (_1__actionneeded x0_141) (_0__actionneeded x0_141)))
         (forall ((x0_142 processor))
           (= (_1__active x0_142) (_0__active x0_142)))
         (forall ((x0_143 processor) (x1_144 processor))
           (= (_1__currentcpu x0_143 x1_144) (_0__currentcpu x0_143 x1_144)))
         (forall ((x0_145 pmap)) (= (_1__plock x0_145) (_0__plock x0_145)))
         (forall ((x0_146 processor) (x1_147 processor))
           (= (_1__todo x0_146 x1_147) (_0__todo x0_146 x1_147)))
         (= _1__error _0__error)
         (forall ((x0_148 processor))
           (= (_1__userpmap x0_148) (_0__userpmap x0_148)))
         (forall ((x0_149 processor))
           (= (_1__writepmap x0_149) (_0__writepmap x0_149)))
         (forall ((x0_150 processor)) (= (_1__tlb x0_150) (_0__tlb x0_150)))
         (forall ((x0_151 pmap)) (= (_1__pentry x0_151) (_0__pentry x0_151)))))) :action true))
(define-fun transition_9 () Bool (! (exists ((p_152 processor) (cpu_153 processor))
  (let ((a!1 (ite (or (not (_0__active cpu_153))
                      (distinct (_0__userpmap cpu_153) (_0__writepmap p_152)))
                  (forall ((P_154 processor) (C_155 processor))
                    (let ((a!1 (and (_0__todo P_154 C_155)
                                    (not (and (= P_154 p_152) (= C_155 cpu_153))))))
                      (= (_1__todo P_154 C_155) a!1)))
                  (forall ((P_156 processor) (C_157 processor))
                    (= (_1__todo P_156 C_157) (_0__todo P_156 C_157))))))
    (and (= (_0__pc p_152) i9)
         (_0__todo p_152 cpu_153)
         a!1
         (forall ((x0_158 processor))
           (= (_1__actionlock x0_158) (_0__actionlock x0_158)))
         (forall ((x0_159 processor))
           (= (_1__actionneeded x0_159) (_0__actionneeded x0_159)))
         (forall ((x0_160 processor))
           (= (_1__active x0_160) (_0__active x0_160)))
         (forall ((x0_161 processor))
           (= (_1__interrupt x0_161) (_0__interrupt x0_161)))
         (forall ((x0_162 processor) (x1_163 processor))
           (= (_1__currentcpu x0_162 x1_163) (_0__currentcpu x0_162 x1_163)))
         (forall ((x0_164 pmap)) (= (_1__plock x0_164) (_0__plock x0_164)))
         (= _1__error _0__error)
         (forall ((x0_165 processor)) (= (_1__pc x0_165) (_0__pc x0_165)))
         (forall ((x0_166 processor))
           (= (_1__userpmap x0_166) (_0__userpmap x0_166)))
         (forall ((x0_167 processor))
           (= (_1__writepmap x0_167) (_0__writepmap x0_167)))
         (forall ((x0_168 processor)) (= (_1__tlb x0_168) (_0__tlb x0_168)))
         (forall ((x0_169 pmap)) (= (_1__pentry x0_169) (_0__pentry x0_169)))))) :action true))
(define-fun transition_10 () Bool (! (exists ((p_170 processor))
  (let ((a!1 (forall ((P_172 processor))
               (=> (distinct P_172 p_170) (= (_1__pc P_172) (_0__pc P_172))))))
    (and (= (_0__pc p_170) i9)
         (forall ((X_171 processor)) (not (_0__todo p_170 X_171)))
         a!1
         (= (_1__pc p_170) i11)
         (forall ((x0_173 processor))
           (= (_1__actionlock x0_173) (_0__actionlock x0_173)))
         (forall ((x0_174 processor))
           (= (_1__actionneeded x0_174) (_0__actionneeded x0_174)))
         (forall ((x0_175 processor))
           (= (_1__active x0_175) (_0__active x0_175)))
         (forall ((x0_176 processor))
           (= (_1__interrupt x0_176) (_0__interrupt x0_176)))
         (forall ((x0_177 processor) (x1_178 processor))
           (= (_1__currentcpu x0_177 x1_178) (_0__currentcpu x0_177 x1_178)))
         (forall ((x0_179 pmap)) (= (_1__plock x0_179) (_0__plock x0_179)))
         (forall ((x0_180 processor) (x1_181 processor))
           (= (_1__todo x0_180 x1_181) (_0__todo x0_180 x1_181)))
         (= _1__error _0__error)
         (forall ((x0_182 processor))
           (= (_1__userpmap x0_182) (_0__userpmap x0_182)))
         (forall ((x0_183 processor))
           (= (_1__writepmap x0_183) (_0__writepmap x0_183)))
         (forall ((x0_184 processor)) (= (_1__tlb x0_184) (_0__tlb x0_184)))
         (forall ((x0_185 pmap)) (= (_1__pentry x0_185) (_0__pentry x0_185)))))) :action true))
(define-fun transition_11 () Bool (! (exists ((p_186 processor) (e_187 pageentry))
  (let ((a!1 (forall ((P_188 pmap))
               (=> (distinct P_188 (_0__writepmap p_186))
                   (= (_1__pentry P_188) (_0__pentry P_188)))))
        (a!2 (forall ((P_189 processor))
               (=> (distinct P_189 p_186) (= (_1__pc P_189) (_0__pc P_189))))))
    (and (= (_0__pc p_186) i11)
         a!1
         (= (_1__pentry (_0__writepmap p_186)) e_187)
         a!2
         (= (_1__pc p_186) i12)
         (forall ((x0_190 processor))
           (= (_1__actionlock x0_190) (_0__actionlock x0_190)))
         (forall ((x0_191 processor))
           (= (_1__actionneeded x0_191) (_0__actionneeded x0_191)))
         (forall ((x0_192 processor))
           (= (_1__active x0_192) (_0__active x0_192)))
         (forall ((x0_193 processor))
           (= (_1__interrupt x0_193) (_0__interrupt x0_193)))
         (forall ((x0_194 processor) (x1_195 processor))
           (= (_1__currentcpu x0_194 x1_195) (_0__currentcpu x0_194 x1_195)))
         (forall ((x0_196 pmap)) (= (_1__plock x0_196) (_0__plock x0_196)))
         (forall ((x0_197 processor) (x1_198 processor))
           (= (_1__todo x0_197 x1_198) (_0__todo x0_197 x1_198)))
         (= _1__error _0__error)
         (forall ((x0_199 processor))
           (= (_1__userpmap x0_199) (_0__userpmap x0_199)))
         (forall ((x0_200 processor))
           (= (_1__writepmap x0_200) (_0__writepmap x0_200)))
         (forall ((x0_201 processor)) (= (_1__tlb x0_201) (_0__tlb x0_201)))))) :action true))
(define-fun transition_12 () Bool (! (exists ((p_202 processor))
  (let ((a!1 (forall ((P_203 processor))
               (=> (distinct P_203 p_202) (= (_1__tlb P_203) (_0__tlb P_203)))))
        (a!4 (forall ((P_205 processor))
               (=> (distinct P_205 p_202) (= (_1__pc P_205) (_0__pc P_205))))))
  (let ((a!2 (and a!1 (= (_1__tlb p_202) (_0__pentry (_0__writepmap p_202))))))
  (let ((a!3 (ite (= (_0__userpmap p_202) (_0__writepmap p_202))
                  a!2
                  (forall ((P_204 processor))
                    (= (_1__tlb P_204) (_0__tlb P_204))))))
    (and (= (_0__pc p_202) i12)
         a!3
         a!4
         (= (_1__pc p_202) i14)
         (forall ((x0_206 processor))
           (= (_1__actionlock x0_206) (_0__actionlock x0_206)))
         (forall ((x0_207 processor))
           (= (_1__actionneeded x0_207) (_0__actionneeded x0_207)))
         (forall ((x0_208 processor))
           (= (_1__active x0_208) (_0__active x0_208)))
         (forall ((x0_209 processor))
           (= (_1__interrupt x0_209) (_0__interrupt x0_209)))
         (forall ((x0_210 processor) (x1_211 processor))
           (= (_1__currentcpu x0_210 x1_211) (_0__currentcpu x0_210 x1_211)))
         (forall ((x0_212 pmap)) (= (_1__plock x0_212) (_0__plock x0_212)))
         (forall ((x0_213 processor) (x1_214 processor))
           (= (_1__todo x0_213 x1_214) (_0__todo x0_213 x1_214)))
         (= _1__error _0__error)
         (forall ((x0_215 processor))
           (= (_1__userpmap x0_215) (_0__userpmap x0_215)))
         (forall ((x0_216 processor))
           (= (_1__writepmap x0_216) (_0__writepmap x0_216)))
         (forall ((x0_217 pmap)) (= (_1__pentry x0_217) (_0__pentry x0_217)))))))) :action true))
(define-fun transition_13 () Bool (! (exists ((p_218 processor))
  (let ((a!1 (ite (not (_0__plock (_0__writepmap p_218)))
                  _1__error
                  (= _1__error _0__error)))
        (a!2 (forall ((P_219 pmap))
               (=> (distinct P_219 (_0__writepmap p_218))
                   (= (_1__plock P_219) (_0__plock P_219)))))
        (a!3 (forall ((P_220 processor))
               (=> (distinct P_220 p_218) (= (_1__pc P_220) (_0__pc P_220))))))
    (and (= (_0__pc p_218) i14)
         a!1
         a!2
         (not (_1__plock (_0__writepmap p_218)))
         a!3
         (= (_1__pc p_218) i15)
         (forall ((x0_221 processor))
           (= (_1__actionlock x0_221) (_0__actionlock x0_221)))
         (forall ((x0_222 processor))
           (= (_1__actionneeded x0_222) (_0__actionneeded x0_222)))
         (forall ((x0_223 processor))
           (= (_1__active x0_223) (_0__active x0_223)))
         (forall ((x0_224 processor))
           (= (_1__interrupt x0_224) (_0__interrupt x0_224)))
         (forall ((x0_225 processor) (x1_226 processor))
           (= (_1__currentcpu x0_225 x1_226) (_0__currentcpu x0_225 x1_226)))
         (forall ((x0_227 processor) (x1_228 processor))
           (= (_1__todo x0_227 x1_228) (_0__todo x0_227 x1_228)))
         (forall ((x0_229 processor))
           (= (_1__userpmap x0_229) (_0__userpmap x0_229)))
         (forall ((x0_230 processor))
           (= (_1__writepmap x0_230) (_0__writepmap x0_230)))
         (forall ((x0_231 processor)) (= (_1__tlb x0_231) (_0__tlb x0_231)))
         (forall ((x0_232 pmap)) (= (_1__pentry x0_232) (_0__pentry x0_232)))))) :action true))
(define-fun transition_14 () Bool (! (exists ((p_233 processor))
  (let ((a!1 (forall ((P_234 processor))
               (=> (distinct P_234 p_233)
                   (= (_1__active P_234) (_0__active P_234)))))
        (a!2 (forall ((P_235 processor))
               (=> (distinct P_235 p_233) (= (_1__pc P_235) (_0__pc P_235))))))
    (and (= (_0__pc p_233) i15)
         a!1
         (_1__active p_233)
         a!2
         (= (_1__pc p_233) m5)
         (forall ((x0_236 processor))
           (= (_1__actionlock x0_236) (_0__actionlock x0_236)))
         (forall ((x0_237 processor))
           (= (_1__actionneeded x0_237) (_0__actionneeded x0_237)))
         (forall ((x0_238 processor))
           (= (_1__interrupt x0_238) (_0__interrupt x0_238)))
         (forall ((x0_239 processor) (x1_240 processor))
           (= (_1__currentcpu x0_239 x1_240) (_0__currentcpu x0_239 x1_240)))
         (forall ((x0_241 pmap)) (= (_1__plock x0_241) (_0__plock x0_241)))
         (forall ((x0_242 processor) (x1_243 processor))
           (= (_1__todo x0_242 x1_243) (_0__todo x0_242 x1_243)))
         (= _1__error _0__error)
         (forall ((x0_244 processor))
           (= (_1__userpmap x0_244) (_0__userpmap x0_244)))
         (forall ((x0_245 processor))
           (= (_1__writepmap x0_245) (_0__writepmap x0_245)))
         (forall ((x0_246 processor)) (= (_1__tlb x0_246) (_0__tlb x0_246)))
         (forall ((x0_247 pmap)) (= (_1__pentry x0_247) (_0__pentry x0_247)))))) :action true))
(define-fun transition_15 () Bool (! (exists ((p_248 processor))
  (let ((a!1 (forall ((P_249 processor))
               (=> (distinct P_249 p_248) (= (_1__pc P_249) (_0__pc P_249))))))
    (and (= (_0__pc p_248) r1)
         a!1
         (= (_1__pc p_248) (ite (_0__actionneeded p_248) r2 m2))
         (forall ((x0_250 processor))
           (= (_1__actionlock x0_250) (_0__actionlock x0_250)))
         (forall ((x0_251 processor))
           (= (_1__actionneeded x0_251) (_0__actionneeded x0_251)))
         (forall ((x0_252 processor))
           (= (_1__active x0_252) (_0__active x0_252)))
         (forall ((x0_253 processor))
           (= (_1__interrupt x0_253) (_0__interrupt x0_253)))
         (forall ((x0_254 processor) (x1_255 processor))
           (= (_1__currentcpu x0_254 x1_255) (_0__currentcpu x0_254 x1_255)))
         (forall ((x0_256 pmap)) (= (_1__plock x0_256) (_0__plock x0_256)))
         (forall ((x0_257 processor) (x1_258 processor))
           (= (_1__todo x0_257 x1_258) (_0__todo x0_257 x1_258)))
         (= _1__error _0__error)
         (forall ((x0_259 processor))
           (= (_1__userpmap x0_259) (_0__userpmap x0_259)))
         (forall ((x0_260 processor))
           (= (_1__writepmap x0_260) (_0__writepmap x0_260)))
         (forall ((x0_261 processor)) (= (_1__tlb x0_261) (_0__tlb x0_261)))
         (forall ((x0_262 pmap)) (= (_1__pentry x0_262) (_0__pentry x0_262)))))) :action true))
(define-fun transition_16 () Bool (! (exists ((p_263 processor))
  (let ((a!1 (forall ((P_264 processor))
               (=> (distinct P_264 p_263)
                   (= (_1__active P_264) (_0__active P_264)))))
        (a!2 (forall ((P_265 processor))
               (=> (distinct P_265 p_263) (= (_1__pc P_265) (_0__pc P_265))))))
    (and (= (_0__pc p_263) r2)
         a!1
         (= (_1__active p_263) false)
         a!2
         (= (_1__pc p_263) r3)
         (forall ((x0_266 processor))
           (= (_1__actionlock x0_266) (_0__actionlock x0_266)))
         (forall ((x0_267 processor))
           (= (_1__actionneeded x0_267) (_0__actionneeded x0_267)))
         (forall ((x0_268 processor))
           (= (_1__interrupt x0_268) (_0__interrupt x0_268)))
         (forall ((x0_269 processor) (x1_270 processor))
           (= (_1__currentcpu x0_269 x1_270) (_0__currentcpu x0_269 x1_270)))
         (forall ((x0_271 pmap)) (= (_1__plock x0_271) (_0__plock x0_271)))
         (forall ((x0_272 processor) (x1_273 processor))
           (= (_1__todo x0_272 x1_273) (_0__todo x0_272 x1_273)))
         (= _1__error _0__error)
         (forall ((x0_274 processor))
           (= (_1__userpmap x0_274) (_0__userpmap x0_274)))
         (forall ((x0_275 processor))
           (= (_1__writepmap x0_275) (_0__writepmap x0_275)))
         (forall ((x0_276 processor)) (= (_1__tlb x0_276) (_0__tlb x0_276)))
         (forall ((x0_277 pmap)) (= (_1__pentry x0_277) (_0__pentry x0_277)))))) :action true))
(define-fun transition_17 () Bool (! (exists ((p_278 processor))
  (let ((a!1 (forall ((P_279 processor))
               (=> (distinct P_279 p_278)
                   (= (_1__actionlock P_279) (_0__actionlock P_279)))))
        (a!2 (forall ((P_280 processor))
               (=> (distinct P_280 p_278) (= (_1__pc P_280) (_0__pc P_280)))))
        (a!4 (and (= _1__error _0__error)
                  (forall ((P_281 processor))
                    (= (_1__actionlock P_281) (_0__actionlock P_281)))
                  (forall ((P_282 processor)) (= (_1__pc P_282) (_0__pc P_282))))))
  (let ((a!3 (and (= _1__error (or _0__error (_0__actionlock p_278)))
                  a!1
                  (_1__actionlock p_278)
                  a!2
                  (= (_1__pc p_278) r5))))
  (let ((a!5 (ite (not (_0__plock (_0__userpmap p_278))) a!3 a!4)))
    (and (= (_0__pc p_278) r3)
         a!5
         (forall ((x0_283 processor))
           (= (_1__actionneeded x0_283) (_0__actionneeded x0_283)))
         (forall ((x0_284 processor))
           (= (_1__active x0_284) (_0__active x0_284)))
         (forall ((x0_285 processor))
           (= (_1__interrupt x0_285) (_0__interrupt x0_285)))
         (forall ((x0_286 processor) (x1_287 processor))
           (= (_1__currentcpu x0_286 x1_287) (_0__currentcpu x0_286 x1_287)))
         (forall ((x0_288 pmap)) (= (_1__plock x0_288) (_0__plock x0_288)))
         (forall ((x0_289 processor) (x1_290 processor))
           (= (_1__todo x0_289 x1_290) (_0__todo x0_289 x1_290)))
         (forall ((x0_291 processor))
           (= (_1__userpmap x0_291) (_0__userpmap x0_291)))
         (forall ((x0_292 processor))
           (= (_1__writepmap x0_292) (_0__writepmap x0_292)))
         (forall ((x0_293 processor)) (= (_1__tlb x0_293) (_0__tlb x0_293)))
         (forall ((x0_294 pmap)) (= (_1__pentry x0_294) (_0__pentry x0_294)))))))) :action true))
(define-fun transition_18 () Bool (! (exists ((p_295 processor))
  (let ((a!1 (forall ((P_296 processor))
               (=> (distinct P_296 p_295) (= (_1__tlb P_296) (_0__tlb P_296)))))
        (a!2 (forall ((P_297 processor))
               (=> (distinct P_297 p_295) (= (_1__pc P_297) (_0__pc P_297))))))
    (and (= (_0__pc p_295) r5)
         a!1
         (= (_1__tlb p_295) (_0__pentry (_0__userpmap p_295)))
         a!2
         (= (_1__pc p_295) r6)
         (forall ((x0_298 processor))
           (= (_1__actionlock x0_298) (_0__actionlock x0_298)))
         (forall ((x0_299 processor))
           (= (_1__actionneeded x0_299) (_0__actionneeded x0_299)))
         (forall ((x0_300 processor))
           (= (_1__active x0_300) (_0__active x0_300)))
         (forall ((x0_301 processor))
           (= (_1__interrupt x0_301) (_0__interrupt x0_301)))
         (forall ((x0_302 processor) (x1_303 processor))
           (= (_1__currentcpu x0_302 x1_303) (_0__currentcpu x0_302 x1_303)))
         (forall ((x0_304 pmap)) (= (_1__plock x0_304) (_0__plock x0_304)))
         (forall ((x0_305 processor) (x1_306 processor))
           (= (_1__todo x0_305 x1_306) (_0__todo x0_305 x1_306)))
         (= _1__error _0__error)
         (forall ((x0_307 processor))
           (= (_1__userpmap x0_307) (_0__userpmap x0_307)))
         (forall ((x0_308 processor))
           (= (_1__writepmap x0_308) (_0__writepmap x0_308)))
         (forall ((x0_309 pmap)) (= (_1__pentry x0_309) (_0__pentry x0_309)))))) :action true))
(define-fun transition_19 () Bool (! (exists ((p_310 processor))
  (let ((a!1 (forall ((P_311 processor))
               (=> (distinct P_311 p_310)
                   (= (_1__actionneeded P_311) (_0__actionneeded P_311)))))
        (a!2 (forall ((P_312 processor))
               (=> (distinct P_312 p_310) (= (_1__pc P_312) (_0__pc P_312))))))
    (and (= (_0__pc p_310) r6)
         a!1
         (not (_1__actionneeded p_310))
         a!2
         (= (_1__pc p_310) r7)
         (forall ((x0_313 processor))
           (= (_1__actionlock x0_313) (_0__actionlock x0_313)))
         (forall ((x0_314 processor))
           (= (_1__active x0_314) (_0__active x0_314)))
         (forall ((x0_315 processor))
           (= (_1__interrupt x0_315) (_0__interrupt x0_315)))
         (forall ((x0_316 processor) (x1_317 processor))
           (= (_1__currentcpu x0_316 x1_317) (_0__currentcpu x0_316 x1_317)))
         (forall ((x0_318 pmap)) (= (_1__plock x0_318) (_0__plock x0_318)))
         (forall ((x0_319 processor) (x1_320 processor))
           (= (_1__todo x0_319 x1_320) (_0__todo x0_319 x1_320)))
         (= _1__error _0__error)
         (forall ((x0_321 processor))
           (= (_1__userpmap x0_321) (_0__userpmap x0_321)))
         (forall ((x0_322 processor))
           (= (_1__writepmap x0_322) (_0__writepmap x0_322)))
         (forall ((x0_323 processor)) (= (_1__tlb x0_323) (_0__tlb x0_323)))
         (forall ((x0_324 pmap)) (= (_1__pentry x0_324) (_0__pentry x0_324)))))) :action true))
(define-fun transition_20 () Bool (! (exists ((p_325 processor))
  (let ((a!1 (= _1__error (or _0__error (not (_0__actionlock p_325)))))
        (a!2 (forall ((P_326 processor))
               (=> (distinct P_326 p_325)
                   (= (_1__actionlock P_326) (_0__actionlock P_326)))))
        (a!3 (forall ((P_327 processor))
               (=> (distinct P_327 p_325) (= (_1__pc P_327) (_0__pc P_327))))))
    (and (= (_0__pc p_325) r7)
         a!1
         a!2
         (not (_1__actionlock p_325))
         a!3
         (= (_1__pc p_325) r8)
         (forall ((x0_328 processor))
           (= (_1__actionneeded x0_328) (_0__actionneeded x0_328)))
         (forall ((x0_329 processor))
           (= (_1__active x0_329) (_0__active x0_329)))
         (forall ((x0_330 processor))
           (= (_1__interrupt x0_330) (_0__interrupt x0_330)))
         (forall ((x0_331 processor) (x1_332 processor))
           (= (_1__currentcpu x0_331 x1_332) (_0__currentcpu x0_331 x1_332)))
         (forall ((x0_333 pmap)) (= (_1__plock x0_333) (_0__plock x0_333)))
         (forall ((x0_334 processor) (x1_335 processor))
           (= (_1__todo x0_334 x1_335) (_0__todo x0_334 x1_335)))
         (forall ((x0_336 processor))
           (= (_1__userpmap x0_336) (_0__userpmap x0_336)))
         (forall ((x0_337 processor))
           (= (_1__writepmap x0_337) (_0__writepmap x0_337)))
         (forall ((x0_338 processor)) (= (_1__tlb x0_338) (_0__tlb x0_338)))
         (forall ((x0_339 pmap)) (= (_1__pentry x0_339) (_0__pentry x0_339)))))) :action true))
(define-fun transition_21 () Bool (! (exists ((p_340 processor))
  (let ((a!1 (forall ((P_341 processor))
               (=> (distinct P_341 p_340)
                   (= (_1__active P_341) (_0__active P_341)))))
        (a!2 (forall ((P_342 processor))
               (=> (distinct P_342 p_340) (= (_1__pc P_342) (_0__pc P_342))))))
    (and (= (_0__pc p_340) r8)
         a!1
         (_1__active p_340)
         a!2
         (= (_1__pc p_340) r1)
         (forall ((x0_343 processor))
           (= (_1__actionlock x0_343) (_0__actionlock x0_343)))
         (forall ((x0_344 processor))
           (= (_1__actionneeded x0_344) (_0__actionneeded x0_344)))
         (forall ((x0_345 processor))
           (= (_1__interrupt x0_345) (_0__interrupt x0_345)))
         (forall ((x0_346 processor) (x1_347 processor))
           (= (_1__currentcpu x0_346 x1_347) (_0__currentcpu x0_346 x1_347)))
         (forall ((x0_348 pmap)) (= (_1__plock x0_348) (_0__plock x0_348)))
         (forall ((x0_349 processor) (x1_350 processor))
           (= (_1__todo x0_349 x1_350) (_0__todo x0_349 x1_350)))
         (= _1__error _0__error)
         (forall ((x0_351 processor))
           (= (_1__userpmap x0_351) (_0__userpmap x0_351)))
         (forall ((x0_352 processor))
           (= (_1__writepmap x0_352) (_0__writepmap x0_352)))
         (forall ((x0_353 processor)) (= (_1__tlb x0_353) (_0__tlb x0_353)))
         (forall ((x0_354 pmap)) (= (_1__pentry x0_354) (_0__pentry x0_354)))))) :action true))
(define-fun transition_22 () Bool (! (exists ((p_355 processor))
  (let ((a!1 (or _0__error
                 (distinct (_0__tlb p_355) (_0__pentry (_0__userpmap p_355)))))
        (a!2 (forall ((P_356 processor))
               (=> (distinct P_356 p_355) (= (_1__pc P_356) (_0__pc P_356))))))
    (and (= (_0__pc p_355) m2)
         (= _1__error a!1)
         a!2
         (= (_1__pc p_355) m3)
         (forall ((x0_357 processor))
           (= (_1__actionlock x0_357) (_0__actionlock x0_357)))
         (forall ((x0_358 processor))
           (= (_1__actionneeded x0_358) (_0__actionneeded x0_358)))
         (forall ((x0_359 processor))
           (= (_1__active x0_359) (_0__active x0_359)))
         (forall ((x0_360 processor))
           (= (_1__interrupt x0_360) (_0__interrupt x0_360)))
         (forall ((x0_361 processor) (x1_362 processor))
           (= (_1__currentcpu x0_361 x1_362) (_0__currentcpu x0_361 x1_362)))
         (forall ((x0_363 pmap)) (= (_1__plock x0_363) (_0__plock x0_363)))
         (forall ((x0_364 processor) (x1_365 processor))
           (= (_1__todo x0_364 x1_365) (_0__todo x0_364 x1_365)))
         (forall ((x0_366 processor))
           (= (_1__userpmap x0_366) (_0__userpmap x0_366)))
         (forall ((x0_367 processor))
           (= (_1__writepmap x0_367) (_0__writepmap x0_367)))
         (forall ((x0_368 processor)) (= (_1__tlb x0_368) (_0__tlb x0_368)))
         (forall ((x0_369 pmap)) (= (_1__pentry x0_369) (_0__pentry x0_369)))))) :action true))
(define-fun transition_23 () Bool (! (exists ((p_370 processor))
  (let ((a!1 (forall ((P_371 processor))
               (=> (distinct P_371 p_370) (= (_1__pc P_371) (_0__pc P_371))))))
    (and (= (_0__pc p_370) m3)
         a!1
         (= (_1__pc p_370) i1)
         (forall ((x0_372 processor))
           (= (_1__actionlock x0_372) (_0__actionlock x0_372)))
         (forall ((x0_373 processor))
           (= (_1__actionneeded x0_373) (_0__actionneeded x0_373)))
         (forall ((x0_374 processor))
           (= (_1__active x0_374) (_0__active x0_374)))
         (forall ((x0_375 processor))
           (= (_1__interrupt x0_375) (_0__interrupt x0_375)))
         (forall ((x0_376 processor) (x1_377 processor))
           (= (_1__currentcpu x0_376 x1_377) (_0__currentcpu x0_376 x1_377)))
         (forall ((x0_378 pmap)) (= (_1__plock x0_378) (_0__plock x0_378)))
         (forall ((x0_379 processor) (x1_380 processor))
           (= (_1__todo x0_379 x1_380) (_0__todo x0_379 x1_380)))
         (= _1__error _0__error)
         (forall ((x0_381 processor))
           (= (_1__userpmap x0_381) (_0__userpmap x0_381)))
         (forall ((x0_382 processor))
           (= (_1__writepmap x0_382) (_0__writepmap x0_382)))
         (forall ((x0_383 processor)) (= (_1__tlb x0_383) (_0__tlb x0_383)))
         (forall ((x0_384 pmap)) (= (_1__pentry x0_384) (_0__pentry x0_384)))))) :action true))
(define-fun transition_24 () Bool (! (exists ((p_385 processor))
  (let ((a!1 (forall ((P_386 processor))
               (=> (distinct P_386 p_385) (= (_1__pc P_386) (_0__pc P_386))))))
    (and (= (_0__pc p_385) m3)
         a!1
         (= (_1__pc p_385) m5)
         (forall ((x0_387 processor))
           (= (_1__actionlock x0_387) (_0__actionlock x0_387)))
         (forall ((x0_388 processor))
           (= (_1__actionneeded x0_388) (_0__actionneeded x0_388)))
         (forall ((x0_389 processor))
           (= (_1__active x0_389) (_0__active x0_389)))
         (forall ((x0_390 processor))
           (= (_1__interrupt x0_390) (_0__interrupt x0_390)))
         (forall ((x0_391 processor) (x1_392 processor))
           (= (_1__currentcpu x0_391 x1_392) (_0__currentcpu x0_391 x1_392)))
         (forall ((x0_393 pmap)) (= (_1__plock x0_393) (_0__plock x0_393)))
         (forall ((x0_394 processor) (x1_395 processor))
           (= (_1__todo x0_394 x1_395) (_0__todo x0_394 x1_395)))
         (= _1__error _0__error)
         (forall ((x0_396 processor))
           (= (_1__userpmap x0_396) (_0__userpmap x0_396)))
         (forall ((x0_397 processor))
           (= (_1__writepmap x0_397) (_0__writepmap x0_397)))
         (forall ((x0_398 processor)) (= (_1__tlb x0_398) (_0__tlb x0_398)))
         (forall ((x0_399 pmap)) (= (_1__pentry x0_399) (_0__pentry x0_399)))))) :action true))
(define-fun transition_25 () Bool (! (exists ((p_400 processor))
  (let ((a!1 (forall ((P_401 processor))
               (= (_1__interrupt P_401)
                  (and (_0__interrupt P_401) (distinct P_401 p_400)))))
        (a!2 (forall ((P_402 processor))
               (=> (distinct P_402 p_400) (= (_1__pc P_402) (_0__pc P_402)))))
        (a!3 (forall ((P_404 processor))
               (=> (distinct P_404 p_400) (= (_1__pc P_404) (_0__pc P_404))))))
  (let ((a!4 (and (forall ((P_403 processor))
                    (= (_1__interrupt P_403) (_0__interrupt P_403)))
                  a!3
                  (= (_1__pc p_400) m2))))
  (let ((a!5 (ite (_0__interrupt p_400) (and a!1 a!2 (= (_1__pc p_400) r1)) a!4)))
    (and (= (_0__pc p_400) m5)
         a!5
         (forall ((x0_405 processor))
           (= (_1__actionlock x0_405) (_0__actionlock x0_405)))
         (forall ((x0_406 processor))
           (= (_1__actionneeded x0_406) (_0__actionneeded x0_406)))
         (forall ((x0_407 processor))
           (= (_1__active x0_407) (_0__active x0_407)))
         (forall ((x0_408 processor) (x1_409 processor))
           (= (_1__currentcpu x0_408 x1_409) (_0__currentcpu x0_408 x1_409)))
         (forall ((x0_410 pmap)) (= (_1__plock x0_410) (_0__plock x0_410)))
         (forall ((x0_411 processor) (x1_412 processor))
           (= (_1__todo x0_411 x1_412) (_0__todo x0_411 x1_412)))
         (= _1__error _0__error)
         (forall ((x0_413 processor))
           (= (_1__userpmap x0_413) (_0__userpmap x0_413)))
         (forall ((x0_414 processor))
           (= (_1__writepmap x0_414) (_0__writepmap x0_414)))
         (forall ((x0_415 processor)) (= (_1__tlb x0_415) (_0__tlb x0_415)))
         (forall ((x0_416 pmap)) (= (_1__pentry x0_416) (_0__pentry x0_416)))))))) :action true))
(define-fun safety-prop () Bool (!(and (not _0__error)) :invar-property 0))
(define-fun invariant_0 () Bool (! (forall ((P_0 processor))
  (=> (or (= (_0__pc P_0) i3)
          (= (_0__pc P_0) i4)
          (= (_0__pc P_0) i5)
          (= (_0__pc P_0) i6)
          (= (_0__pc P_0) i7)
          (= (_0__pc P_0) i8)
          (= (_0__pc P_0) i9)
          (= (_0__pc P_0) i11)
          (= (_0__pc P_0) i12)
          (= (_0__pc P_0) i14))
      (_0__plock (_0__writepmap P_0)))) :invar-property 0))
(define-fun invariant_1 () Bool (! (forall ((P1_1 processor) (P2_2 processor))
  (let ((a!1 (and (or (= (_0__pc P1_1) i3)
                      (= (_0__pc P1_1) i4)
                      (= (_0__pc P1_1) i5)
                      (= (_0__pc P1_1) i6)
                      (= (_0__pc P1_1) i7)
                      (= (_0__pc P1_1) i8)
                      (= (_0__pc P1_1) i9)
                      (= (_0__pc P1_1) i11)
                      (= (_0__pc P1_1) i12)
                      (= (_0__pc P1_1) i14))
                  (or (= (_0__pc P2_2) i3)
                      (= (_0__pc P2_2) i4)
                      (= (_0__pc P2_2) i5)
                      (= (_0__pc P2_2) i6)
                      (= (_0__pc P2_2) i7)
                      (= (_0__pc P2_2) i8)
                      (= (_0__pc P2_2) i9)
                      (= (_0__pc P2_2) i11)
                      (= (_0__pc P2_2) i12)
                      (= (_0__pc P2_2) i14)))))
    (=> a!1
        (or (distinct (_0__writepmap P1_1) (_0__writepmap P2_2)) (= P1_1 P2_2))))) :invar-property 1))
(define-fun invariant_2 () Bool (! (forall ((P_3 processor) (C1_4 processor) (C2_5 processor))
  (=> (and (_0__currentcpu P_3 C1_4) (_0__currentcpu P_3 C2_5)) (= C1_4 C2_5))) :invar-property 2))
(define-fun invariant_3 () Bool (! (forall ((P_6 processor) (C_7 processor))
  (let ((a!1 (and (or (= (_0__pc P_6) i6) (= (_0__pc P_6) i7))
                  (_0__currentcpu P_6 C_7))))
    (=> a!1 (_0__actionlock C_7)))) :invar-property 3))
(define-fun invariant_4 () Bool (! (forall ((P_8 processor))
  (=> (or (= (_0__pc P_8) r5) (= (_0__pc P_8) r6) (= (_0__pc P_8) r7))
      (_0__actionlock P_8))) :invar-property 4))
(define-fun invariant_5 () Bool (! (forall ((P1_9 processor) (C_10 processor) (P2_11 processor))
  (let ((a!1 (and (or (= (_0__pc P1_9) i6) (= (_0__pc P1_9) i7))
                  (_0__currentcpu P1_9 C_10)
                  (or (= (_0__pc P2_11) i6) (= (_0__pc P2_11) i7))
                  (_0__currentcpu P2_11 C_10))))
    (=> a!1 (= P1_9 P2_11)))) :invar-property 5))
(define-fun invariant_6 () Bool (! (forall ((P1_12 processor) (P2_13 processor))
  (let ((a!1 (and (or (= (_0__pc P1_12) r5)
                      (= (_0__pc P1_12) r6)
                      (= (_0__pc P1_12) r7))
                  (or (= (_0__pc P2_13) i6) (= (_0__pc P2_13) i7))
                  (_0__currentcpu P2_13 P1_12))))
    (not a!1))) :invar-property 6))
(define-fun invariant_7 () Bool (! (forall ((C_14 processor))
  (let ((a!1 (not (or (= (_0__pc C_14) r5)
                      (= (_0__pc C_14) r6)
                      (= (_0__pc C_14) r7)))))
    (=> (and (_0__actionlock C_14) a!1) (_0__plock (_0__userpmap C_14))))) :invar-property 7))
(define-fun invariant_8 () Bool (! (forall ((C_15 processor) (P_16 processor))
  (let ((a!1 (not (or (= (_0__pc C_15) r5)
                      (= (_0__pc C_15) r6)
                      (= (_0__pc C_15) r7))))
        (a!3 (and (_0__currentcpu P_16 C_15)
                  (or (= (_0__pc P_16) i6) (= (_0__pc P_16) i7)))))
  (let ((a!2 (and (_0__actionlock C_15)
                  a!1
                  (or (= (_0__pc P_16) i3)
                      (= (_0__pc P_16) i4)
                      (= (_0__pc P_16) i5)
                      (= (_0__pc P_16) i6)
                      (= (_0__pc P_16) i7)
                      (= (_0__pc P_16) i8)
                      (= (_0__pc P_16) i9)
                      (= (_0__pc P_16) i11)
                      (= (_0__pc P_16) i12)
                      (= (_0__pc P_16) i14)))))
    (=> a!2 (or (distinct (_0__userpmap C_15) (_0__writepmap P_16)) a!3))))) :invar-property 8))
(define-fun invariant_9 () Bool (! (forall ((P_17 processor) (C_18 processor))
  (let ((a!1 (and (or (= (_0__pc P_17) i5)
                      (= (_0__pc P_17) i6)
                      (= (_0__pc P_17) i7))
                  (_0__currentcpu P_17 C_18))))
    (=> a!1 (= (_0__writepmap P_17) (_0__userpmap C_18))))) :invar-property 9))
(define-fun invariant_10 () Bool (! (forall ((P_19 processor))
  (= (_0__active P_19)
     (or (= (_0__pc P_19) b1)
         (= (_0__pc P_19) m2)
         (= (_0__pc P_19) m3)
         (= (_0__pc P_19) m5)
         (= (_0__pc P_19) i1)
         (= (_0__pc P_19) r1)
         (= (_0__pc P_19) r2)))) :invar-property 10))
(define-fun invariant_11 () Bool (! (forall ((P_20 processor) (C_21 processor))
  (let ((a!1 (and (or (= (_0__pc P_20) i3)
                      (= (_0__pc P_20) i7)
                      (= (_0__pc P_20) i8))
                  (not (_0__todo P_20 C_21))
                  (distinct (_0__pc C_21) b1)
                  (= (_0__userpmap C_21) (_0__writepmap P_20))))
        (a!2 (or (and (_0__actionneeded C_21)
                      (distinct (_0__pc C_21) r5)
                      (distinct (_0__pc C_21) r6))
                 (= P_20 C_21))))
    (=> a!1 a!2))) :invar-property 11))
(define-fun invariant_12 () Bool (! (forall ((P_22 processor) (C_23 processor))
  (let ((a!1 (and (or (= (_0__pc P_22) i4)
                      (= (_0__pc P_22) i5)
                      (= (_0__pc P_22) i6))
                  (not (_0__todo P_22 C_23))
                  (not (_0__currentcpu P_22 C_23))
                  (distinct (_0__pc C_23) b1)
                  (= (_0__userpmap C_23) (_0__writepmap P_22))))
        (a!2 (or (and (_0__actionneeded C_23)
                      (distinct (_0__pc C_23) r5)
                      (distinct (_0__pc C_23) r6))
                 (= P_22 C_23))))
    (=> a!1 a!2))) :invar-property 12))
(define-fun invariant_13 () Bool (! (forall ((P_24 processor) (C_25 processor))
  (let ((a!1 (and (or (= (_0__pc P_24) i9) (= (_0__pc P_24) i11))
                  (distinct (_0__pc C_25) b1)
                  (= (_0__userpmap C_25) (_0__writepmap P_24))))
        (a!2 (or (and (_0__actionneeded C_25)
                      (distinct (_0__pc C_25) r5)
                      (distinct (_0__pc C_25) r6))
                 (= P_24 C_25))))
    (=> a!1 a!2))) :invar-property 13))
(define-fun invariant_14 () Bool (! (forall ((P_26 processor) (M_27 pmap))
  (let ((a!1 (or (and (_0__actionneeded P_26) (distinct (_0__pc P_26) r6))
                 (and (= (_0__pc P_26) i12) (= M_27 (_0__writepmap P_26))))))
    (=> (and (distinct (_0__pc P_26) b1)
             (= M_27 (_0__userpmap P_26))
             (distinct (_0__tlb P_26) (_0__pentry M_27)))
        a!1))) :invar-property 14))
(define-fun invariant_15 () Bool (! (forall ((P_28 processor) (C_29 processor))
  (=> (and (= (_0__pc P_28) i3)
           (not (_0__todo P_28 C_29))
           (distinct (_0__pc C_29) b1)
           (= (_0__userpmap C_29) (_0__writepmap P_28)))
      (or (_0__interrupt C_29)
          (= P_28 C_29)
          (= (_0__pc C_29) r1)
          (= (_0__pc C_29) r2)
          (= (_0__pc C_29) r3)))) :invar-property 15))
(define-fun invariant_16 () Bool (! (forall ((P_30 processor) (C_31 processor))
  (let ((a!1 (and (or (= (_0__pc P_30) i4)
                      (= (_0__pc P_30) i5)
                      (= (_0__pc P_30) i6)
                      (= (_0__pc P_30) i7)
                      (= (_0__pc P_30) i8))
                  (not (_0__todo P_30 C_31))
                  (distinct (_0__pc C_31) b1)
                  (not (_0__currentcpu P_30 C_31))
                  (= (_0__userpmap C_31) (_0__writepmap P_30)))))
    (=> a!1
        (or (_0__interrupt C_31)
            (= P_30 C_31)
            (= (_0__pc C_31) r1)
            (= (_0__pc C_31) r2)
            (= (_0__pc C_31) r3))))) :invar-property 16))
(define-fun invariant_17 () Bool (! (forall ((P_32 processor) (C_33 processor))
  (let ((a!1 (and (or (= (_0__pc P_32) i9) (= (_0__pc P_32) i11))
                  (distinct (_0__pc C_33) b1)
                  (= (_0__userpmap C_33) (_0__writepmap P_32)))))
    (=> a!1
        (or (_0__interrupt C_33)
            (= P_32 C_33)
            (= (_0__pc C_33) r1)
            (= (_0__pc C_33) r2)
            (= (_0__pc C_33) r3))))) :invar-property 17))
(define-fun invariant_18 () Bool (! (forall ((M_34 pmap) (C_35 processor))
  (let ((a!1 (or (_0__interrupt C_35)
                 (= (_0__pc C_35) r1)
                 (= (_0__pc C_35) r2)
                 (= (_0__pc C_35) r3)
                 (= (_0__pc C_35) r5)
                 (and (= (_0__pc C_35) i12)
                      (= (_0__writepmap C_35) (_0__userpmap C_35))))))
    (=> (and (= M_34 (_0__userpmap C_35))
             (distinct (_0__tlb C_35) (_0__pentry M_34))
             (distinct (_0__pc C_35) b1))
        a!1))) :invar-property 18))
(define-fun invariant_19 () Bool (! (forall ((P_36 processor) (C_37 processor))
  (let ((a!1 (or (and (= (_0__pc P_36) i9) (not (_0__todo P_36 C_37)))
                 (= (_0__pc P_36) i11))))
    (=> (and a!1 (= (_0__userpmap C_37) (_0__writepmap P_36)))
        (distinct (_0__pc C_37) m2)))) :invar-property 19))
(define-fun invariant_20 () Bool (! (forall ((M_38 pmap) (P_39 processor))
  (=> (and (= M_38 (_0__userpmap P_39))
           (distinct (_0__tlb P_39) (_0__pentry M_38)))
      (distinct (_0__pc P_39) m2))) :invar-property 20))
(define-fun invariant_21 () Bool (! (not _0__error) :invar-property 21))
