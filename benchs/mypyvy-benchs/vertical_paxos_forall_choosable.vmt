(declare-sort node 0)
(declare-sort value 0)
(declare-sort quorum 0)
(declare-sort round 0)
(declare-sort config 0)
(declare-const none value)
(define-fun none.sv () value (! none :rigid true))
(declare-const _0__master_complete round)
(declare-const _1__master_complete round)
(define-fun _0__master_complete.sv () round (! _0__master_complete :next _1__master_complete))
(declare-fun le (round round) Bool)
(declare-fun member (node quorum) Bool)
(declare-fun quorumin (quorum config) Bool)
(declare-fun complete_of (config round) Bool)
(declare-fun _0__one_a (round round) Bool)
(declare-fun _1__one_a (round round) Bool)
(define-fun _0__one_a.sv ((V0 round) (V1 round)) Bool (! (_0__one_a V0 V1) :next _1__one_a))
(declare-fun _0__one_b (node round round) Bool)
(declare-fun _1__one_b (node round round) Bool)
(define-fun _0__one_b.sv ((V0 node) (V1 round) (V2 round)) Bool (! (_0__one_b V0 V1 V2) :next _1__one_b))
(declare-fun _0__left_round (node round) Bool)
(declare-fun _1__left_round (node round) Bool)
(define-fun _0__left_round.sv ((V0 node) (V1 round)) Bool (! (_0__left_round V0 V1) :next _1__left_round))
(declare-fun _0__proposal (round value) Bool)
(declare-fun _1__proposal (round value) Bool)
(define-fun _0__proposal.sv ((V0 round) (V1 value)) Bool (! (_0__proposal V0 V1) :next _1__proposal))
(declare-fun _0__vote (node round value) Bool)
(declare-fun _1__vote (node round value) Bool)
(define-fun _0__vote.sv ((V0 node) (V1 round) (V2 value)) Bool (! (_0__vote V0 V1 V2) :next _1__vote))
(declare-fun _0__decision (round value) Bool)
(declare-fun _1__decision (round value) Bool)
(define-fun _0__decision.sv ((V0 round) (V1 value)) Bool (! (_0__decision V0 V1) :next _1__decision))
(declare-fun _0__configure_round_msg (round config) Bool)
(declare-fun _1__configure_round_msg (round config) Bool)
(define-fun _0__configure_round_msg.sv ((V0 round) (V1 config)) Bool (! (_0__configure_round_msg V0 V1) :next _1__configure_round_msg))
(declare-fun _0__complete_msg (round) Bool)
(declare-fun _1__complete_msg (round) Bool)
(define-fun _0__complete_msg.sv ((V0 round)) Bool (! (_0__complete_msg V0) :next _1__complete_msg))
(declare-fun _0__choosable (round value quorum) Bool)
(declare-fun _1__choosable (round value quorum) Bool)
(define-fun _0__choosable.sv ((V0 round) (V1 value) (V2 quorum)) Bool (! (_0__choosable V0 V1 V2) :next _1__choosable))
(declare-fun _0__decision_quorum (round value) quorum)
(declare-fun _1__decision_quorum (round value) quorum)
(define-fun _0__decision_quorum.sv ((V0 round) (V1 value)) quorum (! (_0__decision_quorum V0 V1) :next _1__decision_quorum))
(declare-fun _0__round_config (round) config)
(declare-fun _1__round_config (round) config)
(define-fun _0__round_config.sv ((V0 round)) config (! (_0__round_config V0) :next _1__round_config))
(declare-fun _0__quorum_of_round (round) quorum)
(declare-fun _1__quorum_of_round (round) quorum)
(define-fun _0__quorum_of_round.sv ((V0 round)) quorum (! (_0__quorum_of_round V0) :next _1__quorum_of_round))
(define-fun axiom_0 () Bool (! (forall ((X_0 round)) (le X_0 X_0)) :axiom true))
(define-fun axiom_1 () Bool (! (forall ((X_1 round) (Y_2 round) (Z_3 round))
  (=> (and (le X_1 Y_2) (le Y_2 Z_3)) (le X_1 Z_3))) :axiom true))
(define-fun axiom_2 () Bool (! (forall ((X_4 round) (Y_5 round))
  (=> (and (le X_4 Y_5) (le Y_5 X_4)) (= X_4 Y_5))) :axiom true))
(define-fun axiom_3 () Bool (! (forall ((X_6 round) (Y_7 round)) (or (le X_6 Y_7) (le Y_7 X_6))) :axiom true))
(define-fun axiom_4 () Bool (! (forall ((C_8 config) (Q1_9 quorum) (Q2_10 quorum))
  (=> (and (quorumin Q1_9 C_8) (quorumin Q2_10 C_8))
      (exists ((N_11 node)) (and (member N_11 Q1_9) (member N_11 Q2_10))))) :axiom true))
(define-fun axiom_5 () Bool (! (forall ((C_12 config) (R1_13 round) (R2_14 round))
  (=> (and (complete_of C_12 R1_13) (complete_of C_12 R2_14)) (= R1_13 R2_14))) :axiom true))
(define-fun init () Bool (! (and (forall ((R1_0 round) (R2_1 round)) (not (_0__one_a R1_0 R2_1)))
     (forall ((N_2 node) (R1_3 round) (R2_4 round))
       (not (_0__one_b N_2 R1_3 R2_4)))
     (forall ((N_5 node) (R_6 round)) (not (_0__left_round N_5 R_6)))
     (forall ((R_7 round) (V_8 value)) (not (_0__proposal R_7 V_8)))
     (forall ((N_9 node) (R_10 round) (V_11 value))
       (not (_0__vote N_9 R_10 V_11)))
     (forall ((R_12 round) (V_13 value)) (not (_0__decision R_12 V_13)))
     (forall ((R_14 round) (C_15 config))
       (not (_0__configure_round_msg R_14 C_15)))
     (forall ((R_16 round)) (not (_0__complete_msg R_16)))
     (forall ((R_17 round)) (le _0__master_complete R_17))) :init true))
(define-fun transition_0 () Bool (! (exists ((r_0 round) (c_1 config))
  (let ((a!1 (forall ((R_3 round) (C_4 config))
               (= (_1__configure_round_msg R_3 C_4)
                  (or (_0__configure_round_msg R_3 C_4)
                      (and (= R_3 r_0) (= C_4 c_1))))))
        (a!2 (forall ((R_5 round))
               (=> (distinct R_5 r_0)
                   (= (_1__round_config R_5) (_0__round_config R_5))))))
    (and (forall ((C_2 config)) (not (_0__configure_round_msg r_0 C_2)))
         (le _0__master_complete r_0)
         (complete_of c_1 _0__master_complete)
         a!1
         a!2
         (= (_1__round_config r_0) c_1)
         (forall ((x0_6 round) (x1_7 round))
           (= (_1__one_a x0_6 x1_7) (_0__one_a x0_6 x1_7)))
         (forall ((x0_8 node) (x1_9 round) (x2_10 round))
           (= (_1__one_b x0_8 x1_9 x2_10) (_0__one_b x0_8 x1_9 x2_10)))
         (forall ((x0_11 node) (x1_12 round))
           (= (_1__left_round x0_11 x1_12) (_0__left_round x0_11 x1_12)))
         (forall ((x0_13 round) (x1_14 value))
           (= (_1__proposal x0_13 x1_14) (_0__proposal x0_13 x1_14)))
         (forall ((x0_15 node) (x1_16 round) (x2_17 value))
           (= (_1__vote x0_15 x1_16 x2_17) (_0__vote x0_15 x1_16 x2_17)))
         (forall ((x0_18 round) (x1_19 value))
           (= (_1__decision x0_18 x1_19) (_0__decision x0_18 x1_19)))
         (forall ((x0_20 round))
           (= (_1__complete_msg x0_20) (_0__complete_msg x0_20)))
         (= _1__master_complete _0__master_complete)
         (forall ((x0_21 round) (x1_22 value))
           (= (_1__decision_quorum x0_21 x1_22)
              (_0__decision_quorum x0_21 x1_22)))
         (forall ((x0_23 round))
           (= (_1__quorum_of_round x0_23) (_0__quorum_of_round x0_23)))))) :action true))
(define-fun transition_1 () Bool (! (exists ((r_24 round))
  (and (_0__complete_msg r_24)
       (not (le r_24 _0__master_complete))
       (= _1__master_complete r_24)
       (forall ((x0_25 round) (x1_26 round))
         (= (_1__one_a x0_25 x1_26) (_0__one_a x0_25 x1_26)))
       (forall ((x0_27 node) (x1_28 round) (x2_29 round))
         (= (_1__one_b x0_27 x1_28 x2_29) (_0__one_b x0_27 x1_28 x2_29)))
       (forall ((x0_30 node) (x1_31 round))
         (= (_1__left_round x0_30 x1_31) (_0__left_round x0_30 x1_31)))
       (forall ((x0_32 round) (x1_33 value))
         (= (_1__proposal x0_32 x1_33) (_0__proposal x0_32 x1_33)))
       (forall ((x0_34 node) (x1_35 round) (x2_36 value))
         (= (_1__vote x0_34 x1_35 x2_36) (_0__vote x0_34 x1_35 x2_36)))
       (forall ((x0_37 round) (x1_38 value))
         (= (_1__decision x0_37 x1_38) (_0__decision x0_37 x1_38)))
       (forall ((x0_39 round) (x1_40 config))
         (= (_1__configure_round_msg x0_39 x1_40)
            (_0__configure_round_msg x0_39 x1_40)))
       (forall ((x0_41 round))
         (= (_1__complete_msg x0_41) (_0__complete_msg x0_41)))
       (forall ((x0_42 round) (x1_43 value))
         (= (_1__decision_quorum x0_42 x1_43) (_0__decision_quorum x0_42 x1_43)))
       (forall ((x0_44 round))
         (= (_1__round_config x0_44) (_0__round_config x0_44)))
       (forall ((x0_45 round))
         (= (_1__quorum_of_round x0_45) (_0__quorum_of_round x0_45))))) :action true))
(define-fun transition_2 () Bool (! (exists ((r_46 round) (c_47 config) (cr_48 round))
  (and (_0__configure_round_msg r_46 c_47)
       (complete_of c_47 cr_48)
       (forall ((R1_49 round) (R2_50 round))
         (let ((a!1 (or (_0__one_a R1_49 R2_50)
                        (and (= R1_49 r_46)
                             (le cr_48 R2_50)
                             (not (le r_46 R2_50))))))
           (= (_1__one_a R1_49 R2_50) a!1)))
       (forall ((x0_51 node) (x1_52 round) (x2_53 round))
         (= (_1__one_b x0_51 x1_52 x2_53) (_0__one_b x0_51 x1_52 x2_53)))
       (forall ((x0_54 node) (x1_55 round))
         (= (_1__left_round x0_54 x1_55) (_0__left_round x0_54 x1_55)))
       (forall ((x0_56 round) (x1_57 value))
         (= (_1__proposal x0_56 x1_57) (_0__proposal x0_56 x1_57)))
       (forall ((x0_58 node) (x1_59 round) (x2_60 value))
         (= (_1__vote x0_58 x1_59 x2_60) (_0__vote x0_58 x1_59 x2_60)))
       (forall ((x0_61 round) (x1_62 value))
         (= (_1__decision x0_61 x1_62) (_0__decision x0_61 x1_62)))
       (forall ((x0_63 round) (x1_64 config))
         (= (_1__configure_round_msg x0_63 x1_64)
            (_0__configure_round_msg x0_63 x1_64)))
       (forall ((x0_65 round))
         (= (_1__complete_msg x0_65) (_0__complete_msg x0_65)))
       (= _1__master_complete _0__master_complete)
       (forall ((x0_66 round) (x1_67 value))
         (= (_1__decision_quorum x0_66 x1_67) (_0__decision_quorum x0_66 x1_67)))
       (forall ((x0_68 round))
         (= (_1__round_config x0_68) (_0__round_config x0_68)))
       (forall ((x0_69 round))
         (= (_1__quorum_of_round x0_69) (_0__quorum_of_round x0_69))))) :action true))
(define-fun transition_3 () Bool (! (exists ((n_70 node) (r_71 round) (rp_72 round))
  (let ((a!1 (forall ((N_73 node) (R1_74 round) (R2_75 round))
               (= (_1__one_b N_73 R1_74 R2_75)
                  (or (_0__one_b N_73 R1_74 R2_75)
                      (and (= N_73 n_70) (= R1_74 r_71) (= R2_75 rp_72)))))))
    (and (_0__one_a r_71 rp_72)
         (not (_0__left_round n_70 r_71))
         a!1
         (forall ((N_76 node) (R_77 round))
           (let ((a!1 (or (_0__left_round N_76 R_77)
                          (and (= N_76 n_70) (not (le r_71 R_77))))))
             (= (_1__left_round N_76 R_77) a!1)))
         (forall ((x0_78 round) (x1_79 round))
           (= (_1__one_a x0_78 x1_79) (_0__one_a x0_78 x1_79)))
         (forall ((x0_80 round) (x1_81 value))
           (= (_1__proposal x0_80 x1_81) (_0__proposal x0_80 x1_81)))
         (forall ((x0_82 node) (x1_83 round) (x2_84 value))
           (= (_1__vote x0_82 x1_83 x2_84) (_0__vote x0_82 x1_83 x2_84)))
         (forall ((x0_85 round) (x1_86 value))
           (= (_1__decision x0_85 x1_86) (_0__decision x0_85 x1_86)))
         (forall ((x0_87 round) (x1_88 config))
           (= (_1__configure_round_msg x0_87 x1_88)
              (_0__configure_round_msg x0_87 x1_88)))
         (forall ((x0_89 round))
           (= (_1__complete_msg x0_89) (_0__complete_msg x0_89)))
         (= _1__master_complete _0__master_complete)
         (forall ((x0_90 round) (x1_91 value))
           (= (_1__decision_quorum x0_90 x1_91)
              (_0__decision_quorum x0_90 x1_91)))
         (forall ((x0_92 round))
           (= (_1__round_config x0_92) (_0__round_config x0_92)))
         (forall ((x0_93 round))
           (= (_1__quorum_of_round x0_93) (_0__quorum_of_round x0_93)))))) :action true))
(define-fun transition_4 () Bool (! (exists ((r_94 round) (c_95 config) (cr_96 round) (v_97 value))
  (let ((a!1 (forall ((R_100 round))
               (=> (and (le cr_96 R_100) (not (le r_94 R_100)))
                   (exists ((C_101 config))
                     (_0__configure_round_msg R_100 C_101)))))
        (a!2 (forall ((R_102 round) (C_103 config))
               (=> (and (le cr_96 R_102)
                        (not (le r_94 R_102))
                        (_0__configure_round_msg R_102 C_103))
                   (quorumin (_0__quorum_of_round R_102) C_103))))
        (a!3 (forall ((R_104 round) (N_105 node))
               (=> (and (le cr_96 R_104)
                        (not (le r_94 R_104))
                        (member N_105 (_0__quorum_of_round R_104)))
                   (_0__one_b N_105 r_94 R_104))))
        (a!4 (forall ((N_106 node) (MAXR_107 round) (V_108 value))
               (not (and (le cr_96 MAXR_107)
                         (not (le r_94 MAXR_107))
                         (member N_106 (_0__quorum_of_round MAXR_107))
                         (_0__vote N_106 MAXR_107 V_108)))))
        (a!5 (forall ((R_109 round))
               (= (_1__complete_msg R_109)
                  (or (_0__complete_msg R_109) (= R_109 r_94)))))
        (a!6 (forall ((R_110 round) (V_111 value))
               (= (_1__proposal R_110 V_111)
                  (or (_0__proposal R_110 V_111)
                      (and (= R_110 r_94) (= V_111 v_97)))))))
    (and (forall ((R_98 round))
           (= (_1__quorum_of_round R_98) (_1__quorum_of_round R_98)))
         (_0__configure_round_msg r_94 c_95)
         (complete_of c_95 cr_96)
         (forall ((V_99 value)) (not (_0__proposal r_94 V_99)))
         a!1
         a!2
         a!3
         a!4
         a!5
         (distinct v_97 none)
         a!6
         (forall ((x0_112 round) (x1_113 round))
           (= (_1__one_a x0_112 x1_113) (_0__one_a x0_112 x1_113)))
         (forall ((x0_114 node) (x1_115 round) (x2_116 round))
           (= (_1__one_b x0_114 x1_115 x2_116) (_0__one_b x0_114 x1_115 x2_116)))
         (forall ((x0_117 node) (x1_118 round))
           (= (_1__left_round x0_117 x1_118) (_0__left_round x0_117 x1_118)))
         (forall ((x0_119 node) (x1_120 round) (x2_121 value))
           (= (_1__vote x0_119 x1_120 x2_121) (_0__vote x0_119 x1_120 x2_121)))
         (forall ((x0_122 round) (x1_123 value))
           (= (_1__decision x0_122 x1_123) (_0__decision x0_122 x1_123)))
         (forall ((x0_124 round) (x1_125 config))
           (= (_1__configure_round_msg x0_124 x1_125)
              (_0__configure_round_msg x0_124 x1_125)))
         (= _1__master_complete _0__master_complete)
         (forall ((x0_126 round) (x1_127 value))
           (= (_1__decision_quorum x0_126 x1_127)
              (_0__decision_quorum x0_126 x1_127)))
         (forall ((x0_128 round))
           (= (_1__round_config x0_128) (_0__round_config x0_128)))))) :action true))
(define-fun transition_5 () Bool (! (exists ((r_129 round)
         (c_130 config)
         (cr_131 round)
         (maxr_132 round)
         (v_133 value))
  (let ((a!1 (forall ((R_136 round))
               (=> (and (le cr_131 R_136) (not (le r_129 R_136)))
                   (exists ((C_137 config))
                     (_0__configure_round_msg R_136 C_137)))))
        (a!2 (forall ((R_138 round) (C_139 config))
               (=> (and (le cr_131 R_138)
                        (not (le r_129 R_138))
                        (_0__configure_round_msg R_138 C_139))
                   (quorumin (_0__quorum_of_round R_138) C_139))))
        (a!3 (forall ((R_140 round) (N_141 node))
               (=> (and (le cr_131 R_140)
                        (not (le r_129 R_140))
                        (member N_141 (_0__quorum_of_round R_140)))
                   (_0__one_b N_141 r_129 R_140))))
        (a!4 (exists ((N_142 node))
               (and (le cr_131 maxr_132)
                    (not (le r_129 maxr_132))
                    (member N_142 (_0__quorum_of_round maxr_132))
                    (_0__vote N_142 maxr_132 v_133))))
        (a!5 (forall ((N_143 node) (MAXR_144 round) (V_145 value))
               (=> (and (le cr_131 MAXR_144)
                        (not (le r_129 MAXR_144))
                        (member N_143 (_0__quorum_of_round MAXR_144))
                        (_0__vote N_143 MAXR_144 V_145))
                   (le MAXR_144 maxr_132))))
        (a!6 (forall ((R_146 round) (V_147 value))
               (= (_1__proposal R_146 V_147)
                  (or (_0__proposal R_146 V_147)
                      (and (= R_146 r_129) (= V_147 v_133)))))))
    (and (forall ((R_134 round))
           (= (_1__quorum_of_round R_134) (_1__quorum_of_round R_134)))
         (_0__configure_round_msg r_129 c_130)
         (complete_of c_130 cr_131)
         (forall ((V_135 value)) (not (_0__proposal r_129 V_135)))
         a!1
         a!2
         a!3
         (distinct v_133 none)
         a!4
         a!5
         a!6
         (forall ((x0_148 round) (x1_149 round))
           (= (_1__one_a x0_148 x1_149) (_0__one_a x0_148 x1_149)))
         (forall ((x0_150 node) (x1_151 round) (x2_152 round))
           (= (_1__one_b x0_150 x1_151 x2_152) (_0__one_b x0_150 x1_151 x2_152)))
         (forall ((x0_153 node) (x1_154 round))
           (= (_1__left_round x0_153 x1_154) (_0__left_round x0_153 x1_154)))
         (forall ((x0_155 node) (x1_156 round) (x2_157 value))
           (= (_1__vote x0_155 x1_156 x2_157) (_0__vote x0_155 x1_156 x2_157)))
         (forall ((x0_158 round) (x1_159 value))
           (= (_1__decision x0_158 x1_159) (_0__decision x0_158 x1_159)))
         (forall ((x0_160 round) (x1_161 config))
           (= (_1__configure_round_msg x0_160 x1_161)
              (_0__configure_round_msg x0_160 x1_161)))
         (forall ((x0_162 round))
           (= (_1__complete_msg x0_162) (_0__complete_msg x0_162)))
         (= _1__master_complete _0__master_complete)
         (forall ((x0_163 round) (x1_164 value))
           (= (_1__decision_quorum x0_163 x1_164)
              (_0__decision_quorum x0_163 x1_164)))
         (forall ((x0_165 round))
           (= (_1__round_config x0_165) (_0__round_config x0_165)))))) :action true))
(define-fun transition_6 () Bool (! (exists ((n_166 node) (v_167 value) (r_168 round))
  (let ((a!1 (forall ((N_169 node) (R_170 round) (V_171 value))
               (= (_1__vote N_169 R_170 V_171)
                  (or (_0__vote N_169 R_170 V_171)
                      (and (= N_169 n_166) (= R_170 r_168) (= V_171 v_167)))))))
    (and (distinct v_167 none)
         (not (_0__left_round n_166 r_168))
         (_0__proposal r_168 v_167)
         a!1
         (forall ((x0_172 round) (x1_173 round))
           (= (_1__one_a x0_172 x1_173) (_0__one_a x0_172 x1_173)))
         (forall ((x0_174 node) (x1_175 round) (x2_176 round))
           (= (_1__one_b x0_174 x1_175 x2_176) (_0__one_b x0_174 x1_175 x2_176)))
         (forall ((x0_177 node) (x1_178 round))
           (= (_1__left_round x0_177 x1_178) (_0__left_round x0_177 x1_178)))
         (forall ((x0_179 round) (x1_180 value))
           (= (_1__proposal x0_179 x1_180) (_0__proposal x0_179 x1_180)))
         (forall ((x0_181 round) (x1_182 value))
           (= (_1__decision x0_181 x1_182) (_0__decision x0_181 x1_182)))
         (forall ((x0_183 round) (x1_184 config))
           (= (_1__configure_round_msg x0_183 x1_184)
              (_0__configure_round_msg x0_183 x1_184)))
         (forall ((x0_185 round))
           (= (_1__complete_msg x0_185) (_0__complete_msg x0_185)))
         (= _1__master_complete _0__master_complete)
         (forall ((x0_186 round) (x1_187 value))
           (= (_1__decision_quorum x0_186 x1_187)
              (_0__decision_quorum x0_186 x1_187)))
         (forall ((x0_188 round))
           (= (_1__round_config x0_188) (_0__round_config x0_188)))
         (forall ((x0_189 round))
           (= (_1__quorum_of_round x0_189) (_0__quorum_of_round x0_189)))))) :action true))
(define-fun transition_7 () Bool (! (exists ((r_190 round) (c_191 config) (v_192 value) (q_193 quorum))
  (let ((a!1 (forall ((R_195 round) (V_196 value))
               (= (_1__decision R_195 V_196)
                  (or (_0__decision R_195 V_196)
                      (and (= R_195 r_190) (= V_196 v_192))))))
        (a!2 (forall ((R_197 round))
               (= (_1__complete_msg R_197)
                  (or (_0__complete_msg R_197) (= R_197 r_190)))))
        (a!3 (forall ((R_198 round) (V_199 value))
               (=> (not (and (= R_198 r_190) (= V_199 v_192)))
                   (= (_1__decision_quorum R_198 V_199)
                      (_0__decision_quorum R_198 V_199))))))
    (and (distinct v_192 none)
         (_0__configure_round_msg r_190 c_191)
         (quorumin q_193 c_191)
         (forall ((N_194 node))
           (=> (member N_194 q_193) (_0__vote N_194 r_190 v_192)))
         a!1
         a!2
         a!3
         (= (_1__decision_quorum r_190 v_192) q_193)
         (forall ((x0_200 round) (x1_201 round))
           (= (_1__one_a x0_200 x1_201) (_0__one_a x0_200 x1_201)))
         (forall ((x0_202 node) (x1_203 round) (x2_204 round))
           (= (_1__one_b x0_202 x1_203 x2_204) (_0__one_b x0_202 x1_203 x2_204)))
         (forall ((x0_205 node) (x1_206 round))
           (= (_1__left_round x0_205 x1_206) (_0__left_round x0_205 x1_206)))
         (forall ((x0_207 round) (x1_208 value))
           (= (_1__proposal x0_207 x1_208) (_0__proposal x0_207 x1_208)))
         (forall ((x0_209 node) (x1_210 round) (x2_211 value))
           (= (_1__vote x0_209 x1_210 x2_211) (_0__vote x0_209 x1_210 x2_211)))
         (forall ((x0_212 round) (x1_213 config))
           (= (_1__configure_round_msg x0_212 x1_213)
              (_0__configure_round_msg x0_212 x1_213)))
         (= _1__master_complete _0__master_complete)
         (forall ((x0_214 round))
           (= (_1__round_config x0_214) (_0__round_config x0_214)))
         (forall ((x0_215 round))
           (= (_1__quorum_of_round x0_215) (_0__quorum_of_round x0_215)))))) :action true))
(define-fun safety-prop () Bool (!(let ((a!1 (forall ((R1_0 round) (V1_1 value) (R2_2 round) (V2_3 value))
             (=> (and (_0__decision R1_0 V1_1) (_0__decision R2_2 V2_3))
                 (= V1_1 V2_3)))))
  (and a!1)) :invar-property 0))
(define-fun invariant_0 () Bool (! (forall ((R1_0 round) (V1_1 value) (R2_2 round) (V2_3 value))
  (=> (and (_0__decision R1_0 V1_1) (_0__decision R2_2 V2_3)) (= V1_1 V2_3))) :invar-property 0))
(define-fun invariant_1 () Bool (! (forall ((R_4 round) (V1_5 value) (V2_6 value))
  (=> (and (_0__proposal R_4 V1_5) (_0__proposal R_4 V2_6)) (= V1_5 V2_6))) :invar-property 1))
(define-fun invariant_2 () Bool (! (forall ((N_7 node) (R_8 round) (V_9 value))
  (=> (_0__vote N_7 R_8 V_9) (_0__proposal R_8 V_9))) :invar-property 2))
(define-fun invariant_3 () Bool (! (forall ((R_10 round) (C_11 config))
  (=> (_0__configure_round_msg R_10 C_11) (= C_11 (_0__round_config R_10)))) :invar-property 3))
(define-fun invariant_4 () Bool (! (forall ((R1_12 round) (R2_13 round) (V_14 value) (C_15 config))
  (=> (and (_0__proposal R2_13 V_14)
           (le R1_12 R2_13)
           (= C_15 (_0__round_config R1_12)))
      (_0__configure_round_msg R1_12 C_15))) :invar-property 4))
(define-fun invariant_5 () Bool (! (forall ((R2_16 round) (R3_17 round) (C_18 config) (R1_19 round))
  (let ((a!1 (and (or (= R2_16 _0__master_complete)
                      (and (_0__configure_round_msg R3_17 C_18)
                           (complete_of C_18 R2_16)))
                  (not (le R2_16 R1_19)))))
    (=> a!1 (_0__complete_msg R2_16)))) :invar-property 5))
(define-fun invariant_6 () Bool (! (forall ((R1_20 round) (R2_21 round) (C_22 config))
  (=> (and (_0__complete_msg R2_21)
           (le R1_20 R2_21)
           (= C_22 (_0__round_config R1_20)))
      (_0__configure_round_msg R1_20 C_22))) :invar-property 6))
(define-fun invariant_7 () Bool (! (forall ((R_23 round) (V_24 value) (C_25 config))
  (=> (and (_0__decision R_23 V_24) (= C_25 (_0__round_config R_23)))
      (_0__configure_round_msg R_23 C_25))) :invar-property 7))
(define-fun invariant_8 () Bool (! (forall ((R_26 round) (V_27 value) (C_28 config) (Q_29 quorum))
  (=> (and (_0__decision R_26 V_27)
           (= C_28 (_0__round_config R_26))
           (= Q_29 (_0__decision_quorum R_26 V_27)))
      (quorumin Q_29 C_28))) :invar-property 8))
(define-fun invariant_9 () Bool (! (forall ((R_30 round) (V_31 value) (C_32 config) (Q_33 quorum) (N_34 node))
  (=> (and (_0__decision R_30 V_31)
           (= C_32 (_0__round_config R_30))
           (= Q_33 (_0__decision_quorum R_30 V_31))
           (member N_34 Q_33))
      (_0__vote N_34 R_30 V_31))) :invar-property 9))
(define-fun invariant_10 () Bool (! (forall ((R1_35 round)
         (R2_36 round)
         (V1_37 value)
         (V2_38 value)
         (Q_39 quorum)
         (C_40 config))
  (=> (and (not (le R2_36 R1_35))
           (_0__proposal R2_36 V2_38)
           (distinct V1_37 V2_38)
           (_0__configure_round_msg R1_35 C_40)
           (quorumin Q_39 C_40))
      (not (_0__choosable R1_35 V1_37 Q_39)))) :invar-property 10))
(define-fun invariant_11 () Bool (! (forall ((R_41 round) (C_42 config) (MINREL_43 round))
  (=> (and (_0__configure_round_msg R_41 C_42) (complete_of C_42 MINREL_43))
      (and (le MINREL_43 R_41) (le MINREL_43 _0__master_complete)))) :invar-property 11))
(define-fun invariant_12 () Bool (! (forall ((RR_44 round) (R_45 round) (C_46 config) (Q_47 quorum) (V_48 value))
  (=> (and (_0__complete_msg RR_44)
           (not (le RR_44 R_45))
           (_0__configure_round_msg R_45 C_46)
           (quorumin Q_47 C_46)
           (not (_0__decision RR_44 V_48)))
      (not (_0__choosable R_45 V_48 Q_47)))) :invar-property 12))
(define-fun invariant_13 () Bool (! (forall ((N_49 node) (R1_50 round) (R2_51 round) (R3_52 round))
  (=> (and (_0__one_b N_49 R1_50 R2_51) (not (le R1_50 R3_52)))
      (_0__left_round N_49 R3_52))) :invar-property 13))
