(declare-sort quorum 0)
(declare-sort node 0)
(declare-sort value 0)
(declare-const _0__voting_quorum quorum)
(declare-const _1__voting_quorum quorum)
(define-fun _0__voting_quorum.sv () quorum (! _0__voting_quorum :next _1__voting_quorum))
(declare-fun member (node quorum) Bool)
(declare-fun _0__voted (node) Bool)
(declare-fun _1__voted (node) Bool)
(define-fun _0__voted.sv ((V0 node)) Bool (! (_0__voted V0) :next _1__voted))
(declare-fun _0__vote (node value) Bool)
(declare-fun _1__vote (node value) Bool)
(define-fun _0__vote.sv ((V0 node) (V1 value)) Bool (! (_0__vote V0 V1) :next _1__vote))
(declare-fun _0__decided (value) Bool)
(declare-fun _1__decided (value) Bool)
(define-fun _0__decided.sv ((V0 value)) Bool (! (_0__decided V0) :next _1__decided))
(define-fun axiom_0 () Bool (! (forall ((Q1_0 quorum) (Q2_1 quorum))
  (exists ((N_2 node)) (and (member N_2 Q1_0) (member N_2 Q2_1)))) :axiom true))
(define-fun init () Bool (! (and (forall ((N_0 node)) (not (_0__voted N_0)))
     (forall ((N_1 node) (V_2 value)) (not (_0__vote N_1 V_2)))
     (forall ((V_3 value)) (not (_0__decided V_3)))) :init true))
(define-fun transition_0 () Bool (! (exists ((n_0 node) (v_1 value))
  (let ((a!1 (forall ((N_2 node) (V_3 value))
               (let ((a!1 (= (_1__vote N_2 V_3)
                             (or (_0__vote N_2 V_3)
                                 (and (= N_2 n_0) (= V_3 v_1))))))
                 (and (not (_0__voted n_0))
                      a!1
                      (= (_1__voted N_2) (or (_0__voted N_2) (= N_2 n_0))))))))
    (and a!1
         (forall ((x0_4 value)) (= (_1__decided x0_4) (_0__decided x0_4)))
         (= _1__voting_quorum _0__voting_quorum)))) :action true))
(define-fun transition_1 () Bool (! (exists ((v_5 value) (q_6 quorum))
  (let ((a!1 (forall ((N_7 node) (V_8 value))
               (and (=> (member N_7 q_6) (_0__vote N_7 v_5))
                    (= (_1__decided V_8) (or (_0__decided V_8) (= V_8 v_5)))
                    (= _1__voting_quorum q_6)))))
    (and a!1
         (forall ((x0_9 node)) (= (_1__voted x0_9) (_0__voted x0_9)))
         (forall ((x0_10 node) (x1_11 value))
           (= (_1__vote x0_10 x1_11) (_0__vote x0_10 x1_11)))))) :action true))
(define-fun safety-prop () Bool (!(let ((a!1 (forall ((V1_0 value) (V2_1 value))
             (=> (and (_0__decided V1_0) (_0__decided V2_1)) (= V1_0 V2_1)))))
  (and a!1)) :invar-property 0))
(define-fun invariant_0 () Bool (! (forall ((V1_0 value) (V2_1 value))
  (=> (and (_0__decided V1_0) (_0__decided V2_1)) (= V1_0 V2_1))) :invar-property 0))
(define-fun invariant_1 () Bool (! (forall ((N_2 node) (V_3 value)) (=> (_0__vote N_2 V_3) (_0__voted N_2))) :invar-property 1))
(define-fun invariant_2 () Bool (! (forall ((N_4 node) (V1_5 value) (V2_6 value))
  (=> (and (_0__vote N_4 V1_5) (_0__vote N_4 V2_6)) (= V1_5 V2_6))) :invar-property 2))
(define-fun invariant_3 () Bool (! (forall ((V_7 value) (N_8 node))
  (=> (and (_0__decided V_7) (member N_8 _0__voting_quorum)) (_0__vote N_8 V_7))) :invar-property 3))
