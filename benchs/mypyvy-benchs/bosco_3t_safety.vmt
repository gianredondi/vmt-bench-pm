(declare-sort quorum_a 0)
(declare-sort value 0)
(declare-sort quorum_b 0)
(declare-sort quorum_c 0)
(declare-sort node 0)
(declare-fun member_f (node) Bool)
(declare-fun member_a (node quorum_a) Bool)
(declare-fun member_b (node quorum_b) Bool)
(declare-fun member_c (node quorum_c) Bool)
(declare-fun input (node value) Bool)
(declare-fun _0__dec (node value) Bool)
(declare-fun _1__dec (node value) Bool)
(define-fun _0__dec.sv ((V0 node) (V1 value)) Bool (! (_0__dec V0 V1) :next _1__dec))
(declare-fun _0__und_cons (node value) Bool)
(declare-fun _1__und_cons (node value) Bool)
(define-fun _0__und_cons.sv ((V0 node) (V1 value)) Bool (! (_0__und_cons V0 V1) :next _1__und_cons))
(declare-fun _0__done (node) Bool)
(declare-fun _1__done (node) Bool)
(define-fun _0__done.sv ((V0 node)) Bool (! (_0__done V0) :next _1__done))
(declare-fun _0__und_cons_dec (value) Bool)
(declare-fun _1__und_cons_dec (value) Bool)
(define-fun _0__und_cons_dec.sv ((V0 value)) Bool (! (_0__und_cons_dec V0) :next _1__und_cons_dec))
(declare-fun _0__sent_msg (node node value) Bool)
(declare-fun _1__sent_msg (node node value) Bool)
(define-fun _0__sent_msg.sv ((V0 node) (V1 node) (V2 value)) Bool (! (_0__sent_msg V0 V1 V2) :next _1__sent_msg))
(declare-fun _0__rcv_msg (node node value) Bool)
(declare-fun _1__rcv_msg (node node value) Bool)
(define-fun _0__rcv_msg.sv ((V0 node) (V1 node) (V2 value)) Bool (! (_0__rcv_msg V0 V1 V2) :next _1__rcv_msg))
(declare-fun _0__sent_msg_proj (node node) Bool)
(declare-fun _1__sent_msg_proj (node node) Bool)
(define-fun _0__sent_msg_proj.sv ((V0 node) (V1 node)) Bool (! (_0__sent_msg_proj V0 V1) :next _1__sent_msg_proj))
(declare-fun _0__rcv_msg_proj (node node) Bool)
(declare-fun _1__rcv_msg_proj (node node) Bool)
(define-fun _0__rcv_msg_proj.sv ((V0 node) (V1 node)) Bool (! (_0__rcv_msg_proj V0 V1) :next _1__rcv_msg_proj))
(define-fun axiom_0 () Bool (! (forall ((A_0 quorum_a) (B_1 quorum_b))
  (exists ((C_2 quorum_c))
    (forall ((N_3 node))
      (=> (member_c N_3 C_2)
          (and (member_a N_3 A_0) (member_b N_3 B_1) (not (member_f N_3))))))) :axiom true))
(define-fun axiom_1 () Bool (! (forall ((B_4 quorum_b) (C_5 quorum_c))
  (exists ((N_6 node))
    (and (member_b N_6 B_4) (member_c N_6 C_5) (not (member_f N_6))))) :axiom true))
(define-fun axiom_2 () Bool (! (forall ((N_7 node) (V1_8 value) (V2_9 value))
  (=> (and (not (member_f N_7)) (input N_7 V1_8) (input N_7 V2_9))
      (= V1_8 V2_9))) :axiom true))
(define-fun init () Bool (! (let ((a!1 (forall ((N_0 node) (V_1 value))
             (=> (not (member_f N_0)) (not (_0__dec N_0 V_1)))))
      (a!2 (forall ((N_2 node) (V_3 value))
             (=> (not (member_f N_2)) (not (_0__und_cons N_2 V_3)))))
      (a!3 (forall ((N1_5 node) (N2_6 node) (V_7 value))
             (=> (not (member_f N1_5))
                 (= (_0__sent_msg N1_5 N2_6 V_7) (input N1_5 V_7)))))
      (a!4 (forall ((N1_8 node) (N2_9 node))
             (=> (not (member_f N1_8)) (_0__sent_msg_proj N1_8 N2_9))))
      (a!5 (forall ((N2_16 node) (N1_17 node) (V_18 value))
             (=> (not (member_f N2_16)) (not (_0__rcv_msg N1_17 N2_16 V_18)))))
      (a!6 (forall ((N2_19 node) (N1_20 node))
             (=> (not (member_f N2_19)) (not (_0__rcv_msg_proj N1_20 N2_19))))))
  (and a!1
       a!2
       (forall ((V_4 value)) (not (_0__und_cons_dec V_4)))
       a!3
       a!4
       (forall ((N1_10 node) (N2_11 node) (V_12 value))
         (=> (_0__sent_msg N1_10 N2_11 V_12) (_0__sent_msg_proj N1_10 N2_11)))
       (forall ((N1_13 node) (N2_14 node) (V_15 value))
         (=> (_0__rcv_msg N1_13 N2_14 V_15) (_0__rcv_msg_proj N1_13 N2_14)))
       a!5
       a!6
       (forall ((N_21 node)) (not (_0__done N_21))))) :init true))
(define-fun transition_0 () Bool (! (exists ((n_0 node) (s_1 node) (v_2 value))
  (let ((a!1 (forall ((S_3 node) (D_4 node) (V_5 value))
               (= (_1__rcv_msg S_3 D_4 V_5)
                  (or (_0__rcv_msg S_3 D_4 V_5)
                      (and (= S_3 s_1) (= D_4 n_0) (= V_5 v_2))))))
        (a!2 (forall ((S_6 node) (D_7 node))
               (= (_1__rcv_msg_proj S_6 D_7)
                  (or (_0__rcv_msg_proj S_6 D_7) (and (= S_6 s_1) (= D_7 n_0))))))
        (a!3 (exists ((A_8 quorum_a))
               (forall ((N_9 node))
                 (=> (member_a N_9 A_8) (_1__rcv_msg_proj N_9 n_0))))))
    (and (not (_0__done n_0))
         (_0__sent_msg s_1 n_0 v_2)
         a!1
         a!2
         (not a!3)
         (forall ((x0_10 node) (x1_11 value))
           (= (_1__dec x0_10 x1_11) (_0__dec x0_10 x1_11)))
         (forall ((x0_12 node) (x1_13 value))
           (= (_1__und_cons x0_12 x1_13) (_0__und_cons x0_12 x1_13)))
         (forall ((x0_14 node)) (= (_1__done x0_14) (_0__done x0_14)))
         (forall ((x0_15 value))
           (= (_1__und_cons_dec x0_15) (_0__und_cons_dec x0_15)))
         (forall ((x0_16 node) (x1_17 node) (x2_18 value))
           (= (_1__sent_msg x0_16 x1_17 x2_18) (_0__sent_msg x0_16 x1_17 x2_18)))
         (forall ((x0_19 node) (x1_20 node))
           (= (_1__sent_msg_proj x0_19 x1_20) (_0__sent_msg_proj x0_19 x1_20)))))) :action true))
(define-fun transition_1 () Bool (! (exists ((n_21 node) (s_22 node) (v_23 value) (u_24 value) (w_25 value))
  (let ((a!1 (forall ((S_26 node) (D_27 node) (V_28 value))
               (= (_1__rcv_msg S_26 D_27 V_28)
                  (or (_0__rcv_msg S_26 D_27 V_28)
                      (and (= S_26 s_22) (= D_27 n_21) (= V_28 v_23))))))
        (a!2 (forall ((S_29 node) (D_30 node))
               (= (_1__rcv_msg_proj S_29 D_30)
                  (or (_0__rcv_msg_proj S_29 D_30)
                      (and (= S_29 s_22) (= D_30 n_21))))))
        (a!3 (exists ((A_31 quorum_a))
               (forall ((N_32 node))
                 (=> (member_a N_32 A_31) (_1__rcv_msg_proj N_32 n_21)))))
        (a!4 (exists ((U_33 value))
               (exists ((B_34 quorum_b))
                 (forall ((N_35 node))
                   (=> (member_b N_35 B_34) (_1__rcv_msg N_35 n_21 U_33))))))
        (a!5 (exists ((B_36 quorum_b))
               (forall ((N_37 node))
                 (=> (member_b N_37 B_36) (_1__rcv_msg N_37 n_21 u_24)))))
        (a!6 (forall ((N_38 node) (V_39 value))
               (= (_1__dec N_38 V_39)
                  (or (_0__dec N_38 V_39) (and (= N_38 n_21) (= V_39 u_24))))))
        (a!8 (exists ((C_42 quorum_c))
               (forall ((N_43 node))
                 (=> (member_c N_43 C_42) (_1__rcv_msg N_43 n_21 w_25)))))
        (a!9 (forall ((N_44 node) (V_45 value))
               (= (_1__und_cons N_44 V_45)
                  (or (_0__und_cons N_44 V_45)
                      (and (= N_44 n_21) (= V_45 w_25))))))
        (a!10 (forall ((N_46 node))
                (= (_1__done N_46) (or (_0__done N_46) (= N_46 n_21))))))
  (let ((a!7 (ite a!4
                  (and a!5 a!6)
                  (forall ((N_40 node) (V_41 value))
                    (= (_1__dec N_40 V_41) (_0__dec N_40 V_41))))))
    (and (not (_0__done n_21))
         (_0__sent_msg s_22 n_21 v_23)
         a!1
         a!2
         a!3
         a!7
         a!8
         a!9
         a!10
         (forall ((x0_47 value))
           (= (_1__und_cons_dec x0_47) (_0__und_cons_dec x0_47)))
         (forall ((x0_48 node) (x1_49 node) (x2_50 value))
           (= (_1__sent_msg x0_48 x1_49 x2_50) (_0__sent_msg x0_48 x1_49 x2_50)))
         (forall ((x0_51 node) (x1_52 node))
           (= (_1__sent_msg_proj x0_51 x1_52) (_0__sent_msg_proj x0_51 x1_52))))))) :action true))
(define-fun transition_2 () Bool (! (exists ((n_53 node) (s_54 node) (v_55 value) (u_56 value) (w_57 value))
  (let ((a!1 (forall ((S_58 node) (D_59 node) (V_60 value))
               (= (_1__rcv_msg S_58 D_59 V_60)
                  (or (_0__rcv_msg S_58 D_59 V_60)
                      (and (= S_58 s_54) (= D_59 n_53) (= V_60 v_55))))))
        (a!2 (forall ((S_61 node) (D_62 node))
               (= (_1__rcv_msg_proj S_61 D_62)
                  (or (_0__rcv_msg_proj S_61 D_62)
                      (and (= S_61 s_54) (= D_62 n_53))))))
        (a!3 (exists ((A_63 quorum_a))
               (forall ((N_64 node))
                 (=> (member_a N_64 A_63) (_1__rcv_msg_proj N_64 n_53)))))
        (a!4 (exists ((U_65 value))
               (exists ((B_66 quorum_b))
                 (forall ((N_67 node))
                   (=> (member_b N_67 B_66) (_1__rcv_msg N_67 n_53 U_65))))))
        (a!5 (exists ((B_68 quorum_b))
               (forall ((N_69 node))
                 (=> (member_b N_69 B_68) (_1__rcv_msg N_69 n_53 u_56)))))
        (a!6 (forall ((N_70 node) (V_71 value))
               (= (_1__dec N_70 V_71)
                  (or (_0__dec N_70 V_71) (and (= N_70 n_53) (= V_71 u_56))))))
        (a!8 (exists ((W_74 value) (C_75 quorum_c))
               (forall ((N_76 node))
                 (=> (member_c N_76 C_75) (_1__rcv_msg N_76 n_53 W_74)))))
        (a!9 (forall ((N_77 node) (V_78 value))
               (= (_1__und_cons N_77 V_78)
                  (or (_0__und_cons N_77 V_78)
                      (and (= N_77 n_53) (= V_78 w_57))))))
        (a!10 (forall ((N_79 node))
                (= (_1__done N_79) (or (_0__done N_79) (= N_79 n_53))))))
  (let ((a!7 (ite a!4
                  (and a!5 a!6)
                  (forall ((N_72 node) (V_73 value))
                    (= (_1__dec N_72 V_73) (_0__dec N_72 V_73))))))
    (and (not (_0__done n_53))
         (_0__sent_msg s_54 n_53 v_55)
         a!1
         a!2
         a!3
         a!7
         (not a!8)
         (input n_53 w_57)
         a!9
         a!10
         (forall ((x0_80 value))
           (= (_1__und_cons_dec x0_80) (_0__und_cons_dec x0_80)))
         (forall ((x0_81 node) (x1_82 node) (x2_83 value))
           (= (_1__sent_msg x0_81 x1_82 x2_83) (_0__sent_msg x0_81 x1_82 x2_83)))
         (forall ((x0_84 node) (x1_85 node))
           (= (_1__sent_msg_proj x0_84 x1_85) (_0__sent_msg_proj x0_84 x1_85))))))) :action true))
(define-fun transition_3 () Bool (! (exists ((n_86 node) (s_87 node) (v_88 value) (u_89 value) (w_90 value))
  (let ((a!1 (forall ((S_91 node) (D_92 node) (V_93 value))
               (= (_1__rcv_msg S_91 D_92 V_93)
                  (or (_0__rcv_msg S_91 D_92 V_93)
                      (and (= S_91 s_87) (= D_92 n_86) (= V_93 v_88))))))
        (a!2 (forall ((S_94 node) (D_95 node))
               (= (_1__rcv_msg_proj S_94 D_95)
                  (or (_0__rcv_msg_proj S_94 D_95)
                      (and (= S_94 s_87) (= D_95 n_86))))))
        (a!3 (exists ((A_96 quorum_a))
               (forall ((N_97 node))
                 (=> (member_a N_97 A_96) (_1__rcv_msg_proj N_97 n_86)))))
        (a!4 (exists ((U_98 value))
               (exists ((B_99 quorum_b))
                 (forall ((N_100 node))
                   (=> (member_b N_100 B_99) (_1__rcv_msg N_100 n_86 U_98))))))
        (a!5 (exists ((B_101 quorum_b))
               (forall ((N_102 node))
                 (=> (member_b N_102 B_101) (_1__rcv_msg N_102 n_86 u_89)))))
        (a!6 (forall ((N_103 node) (V_104 value))
               (= (_1__dec N_103 V_104)
                  (or (_0__dec N_103 V_104) (and (= N_103 n_86) (= V_104 u_89))))))
        (a!8 (exists ((U1_107 value)
                      (U2_108 value)
                      (C1_109 quorum_c)
                      (C2_110 quorum_c))
               (and (distinct U1_107 U2_108)
                    (forall ((N_111 node))
                      (=> (member_c N_111 C1_109)
                          (_1__rcv_msg N_111 n_86 U1_107)))
                    (forall ((N_112 node))
                      (=> (member_c N_112 C2_110)
                          (_1__rcv_msg N_112 n_86 U2_108))))))
        (a!9 (forall ((N_113 node) (V_114 value))
               (= (_1__und_cons N_113 V_114)
                  (or (_0__und_cons N_113 V_114)
                      (and (= N_113 n_86) (= V_114 w_90))))))
        (a!10 (forall ((N_115 node))
                (= (_1__done N_115) (or (_0__done N_115) (= N_115 n_86))))))
  (let ((a!7 (ite a!4
                  (and a!5 a!6)
                  (forall ((N_105 node) (V_106 value))
                    (= (_1__dec N_105 V_106) (_0__dec N_105 V_106))))))
    (and (not (_0__done n_86))
         (_0__sent_msg s_87 n_86 v_88)
         a!1
         a!2
         a!3
         a!7
         a!8
         (input n_86 w_90)
         a!9
         a!10
         (forall ((x0_116 value))
           (= (_1__und_cons_dec x0_116) (_0__und_cons_dec x0_116)))
         (forall ((x0_117 node) (x1_118 node) (x2_119 value))
           (= (_1__sent_msg x0_117 x1_118 x2_119)
              (_0__sent_msg x0_117 x1_118 x2_119)))
         (forall ((x0_120 node) (x1_121 node))
           (= (_1__sent_msg_proj x0_120 x1_121)
              (_0__sent_msg_proj x0_120 x1_121))))))) :action true))
(define-fun transition_4 () Bool (! (exists ((v_122 value))
  (let ((a!1 (exists ((N_124 node))
               (and (not (member_f N_124)) (_0__und_cons N_124 v_122))))
        (a!2 (exists ((N1_125 node) (N2_126 node) (V1_127 value) (V2_128 value))
               (and (not (member_f N1_125))
                    (not (member_f N2_126))
                    (_0__und_cons N1_125 V1_127)
                    (_0__und_cons N2_126 V2_128)
                    (distinct V1_127 V2_128))))
        (a!3 (forall ((V_129 value))
               (= (_1__und_cons_dec V_129)
                  (or (_0__und_cons_dec V_129) (= V_129 v_122))))))
    (and (forall ((V_123 value)) (not (_0__und_cons_dec V_123)))
         (or a!1 a!2)
         a!3
         (forall ((x0_130 node) (x1_131 value))
           (= (_1__dec x0_130 x1_131) (_0__dec x0_130 x1_131)))
         (forall ((x0_132 node) (x1_133 value))
           (= (_1__und_cons x0_132 x1_133) (_0__und_cons x0_132 x1_133)))
         (forall ((x0_134 node)) (= (_1__done x0_134) (_0__done x0_134)))
         (forall ((x0_135 node) (x1_136 node) (x2_137 value))
           (= (_1__sent_msg x0_135 x1_136 x2_137)
              (_0__sent_msg x0_135 x1_136 x2_137)))
         (forall ((x0_138 node) (x1_139 node) (x2_140 value))
           (= (_1__rcv_msg x0_138 x1_139 x2_140)
              (_0__rcv_msg x0_138 x1_139 x2_140)))
         (forall ((x0_141 node) (x1_142 node))
           (= (_1__sent_msg_proj x0_141 x1_142)
              (_0__sent_msg_proj x0_141 x1_142)))
         (forall ((x0_143 node) (x1_144 node))
           (= (_1__rcv_msg_proj x0_143 x1_144) (_0__rcv_msg_proj x0_143 x1_144)))))) :action true))
(define-fun safety-prop () Bool (!(let ((a!1 (forall ((N1_0 node) (N2_1 node) (V1_2 value) (V2_3 value))
             (=> (and (not (member_f N1_0))
                      (not (member_f N2_1))
                      (_0__dec N1_0 V1_2)
                      (_0__dec N2_1 V2_3))
                 (= V1_2 V2_3))))
      (a!2 (forall ((N_4 node) (V1_5 value) (V2_6 value))
             (=> (and (not (member_f N_4))
                      (_0__dec N_4 V1_5)
                      (_0__und_cons_dec V2_6))
                 (= V1_5 V2_6))))
      (a!3 (forall ((V1_7 value) (V2_8 value))
             (let ((a!1 (forall ((N_9 node))
                          (=> (not (member_f N_9)) (input N_9 V1_7))))
                   (a!2 (forall ((M_10 node))
                          (=> (not (member_f M_10)) (not (_0__dec M_10 V2_8))))))
               (=> (and a!1 (distinct V1_7 V2_8)) a!2))))
      (a!4 (forall ((V1_11 value) (V2_12 value))
             (let ((a!1 (forall ((N_13 node))
                          (=> (not (member_f N_13)) (input N_13 V1_11)))))
               (=> (and a!1 (distinct V1_11 V2_12))
                   (not (_0__und_cons_dec V2_12)))))))
  (and a!1 a!2 a!3 a!4)) :invar-property 0))
(define-fun invariant_0 () Bool (! (forall ((N1_0 node) (N2_1 node) (V1_2 value) (V2_3 value))
  (=> (and (not (member_f N1_0))
           (not (member_f N2_1))
           (_0__dec N1_0 V1_2)
           (_0__dec N2_1 V2_3))
      (= V1_2 V2_3))) :invar-property 0))
(define-fun invariant_1 () Bool (! (forall ((N_4 node) (V1_5 value) (V2_6 value))
  (=> (and (not (member_f N_4)) (_0__dec N_4 V1_5) (_0__und_cons_dec V2_6))
      (= V1_5 V2_6))) :invar-property 1))
(define-fun invariant_2 () Bool (! (forall ((V1_7 value) (V2_8 value))
  (let ((a!1 (forall ((N_9 node)) (=> (not (member_f N_9)) (input N_9 V1_7))))
        (a!2 (forall ((M_10 node))
               (=> (not (member_f M_10)) (not (_0__dec M_10 V2_8))))))
    (=> (and a!1 (distinct V1_7 V2_8)) a!2))) :invar-property 2))
(define-fun invariant_3 () Bool (! (forall ((V1_11 value) (V2_12 value))
  (let ((a!1 (forall ((N_13 node))
               (=> (not (member_f N_13)) (input N_13 V1_11)))))
    (=> (and a!1 (distinct V1_11 V2_12)) (not (_0__und_cons_dec V2_12))))) :invar-property 3))
(define-fun invariant_4 () Bool (! (forall ((N1_14 node) (N2_15 node) (V_16 value))
  (=> (_0__sent_msg N1_14 N2_15 V_16) (_0__sent_msg_proj N1_14 N2_15))) :invar-property 4))
(define-fun invariant_5 () Bool (! (forall ((N1_17 node) (N2_18 node) (V_19 value))
  (=> (_0__rcv_msg N1_17 N2_18 V_19) (_0__rcv_msg_proj N1_17 N2_18))) :invar-property 5))
(define-fun invariant_6 () Bool (! (forall ((N1_20 node) (N2_21 node) (V_22 value))
  (=> (and (not (member_f N1_20))
           (not (member_f N2_21))
           (_0__sent_msg N1_20 N2_21 V_22)
           (_0__rcv_msg_proj N1_20 N2_21))
      (_0__rcv_msg N1_20 N2_21 V_22))) :invar-property 6))
(define-fun invariant_7 () Bool (! (forall ((N1_23 node) (N2_24 node) (V_25 value))
  (=> (not (member_f N1_23))
      (= (_0__sent_msg N1_23 N2_24 V_25) (input N1_23 V_25)))) :invar-property 7))
(define-fun invariant_8 () Bool (! (forall ((N_26 node) (V1_27 value) (V2_28 value))
  (=> (and (not (member_f N_26))
           (_0__und_cons N_26 V1_27)
           (_0__und_cons N_26 V2_28))
      (= V1_27 V2_28))) :invar-property 8))
(define-fun invariant_9 () Bool (! (forall ((N_29 node) (V_30 value))
  (=> (and (not (member_f N_29)) (_0__und_cons N_29 V_30)) (_0__done N_29))) :invar-property 9))
(define-fun invariant_10 () Bool (! (forall ((N2_31 node) (N1_32 node) (V_33 value))
  (=> (and (not (member_f N2_31)) (_0__rcv_msg N1_32 N2_31 V_33))
      (_0__sent_msg N1_32 N2_31 V_33))) :invar-property 10))
(define-fun invariant_11 () Bool (! (forall ((V_34 value))
  (let ((a!1 (forall ((N_35 node))
               (or (member_f N_35) (not (_0__dec N_35 V_34)))))
        (a!2 (exists ((B_36 quorum_b))
               (forall ((M_37 node))
                 (or (not (member_b M_37 B_36))
                     (member_f M_37)
                     (_0__sent_msg M_37 M_37 V_34))))))
    (or a!1 a!2))) :invar-property 11))
(define-fun invariant_12 () Bool (! (forall ((V_38 value))
  (let ((a!1 (exists ((N_39 node))
               (and (not (member_f N_39))
                    (_0__done N_39)
                    (not (_0__und_cons N_39 V_38)))))
        (a!2 (exists ((B_40 quorum_b))
               (forall ((M_41 node))
                 (=> (and (member_b M_41 B_40) (not (member_f M_41)))
                     (_0__sent_msg M_41 M_41 V_38))))))
    (=> a!1 (not a!2)))) :invar-property 12))
(define-fun invariant_13 () Bool (! (let ((a!1 (exists ((N1_44 node) (N2_45 node) (V1_46 value) (V2_47 value))
             (and (not (member_f N1_44))
                  (not (member_f N2_45))
                  (_0__und_cons N1_44 V1_46)
                  (_0__und_cons N2_45 V2_47)
                  (distinct V1_46 V2_47)))))
  (or (forall ((V_42 value))
        (let ((a!1 (exists ((N_43 node))
                     (and (not (member_f N_43)) (_0__und_cons N_43 V_42)))))
          (=> (_0__und_cons_dec V_42) a!1)))
      a!1)) :invar-property 13))
