(declare-sort node 0)
(declare-sort set 0)
(declare-const destination node)
(define-fun destination.sv () node (! destination :rigid true))
(declare-const _0__current node)
(declare-const _1__current node)
(define-fun _0__current.sv () node (! _0__current :next _1__current))
(declare-fun edge (node node) Bool)
(declare-fun member (node set) Bool)
(define-fun init () Bool (! (let ((a!1 (exists ((s_0 set))
             (let ((a!1 (forall ((X_1 node) (Y_2 node))
                          (=> (edge X_1 Y_2)
                              (= (member X_1 s_0) (member Y_2 s_0))))))
               (and (member _0__current s_0) (not (member destination s_0)) a!1)))))
  (and a!1)) :init true))
(define-fun transition_0 () Bool (! (exists ((x_0 node)) (and (edge _0__current x_0) (= _1__current x_0))) :action true))
(define-fun safety-prop () Bool (!(and (distinct _0__current destination)) :invar-property 0))
(define-fun invariant_0 () Bool (! (distinct _0__current destination) :invar-property 0))
(define-fun invariant_1 () Bool (! (exists ((s_0 set))
  (let ((a!1 (forall ((X_1 node) (Y_2 node))
               (=> (edge X_1 Y_2) (= (member X_1 s_0) (member Y_2 s_0))))))
    (and (member _0__current s_0) (not (member destination s_0)) a!1))) :invar-property 1))
