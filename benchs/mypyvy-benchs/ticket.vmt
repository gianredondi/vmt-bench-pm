(declare-sort thread 0)
(declare-sort ticket 0)
(declare-const zero ticket)
(define-fun zero.sv () ticket (! zero :rigid true))
(declare-const _0__service ticket)
(declare-const _1__service ticket)
(define-fun _0__service.sv () ticket (! _0__service :next _1__service))
(declare-const _0__next_ticket ticket)
(declare-const _1__next_ticket ticket)
(define-fun _0__next_ticket.sv () ticket (! _0__next_ticket :next _1__next_ticket))
(declare-fun le (ticket ticket) Bool)
(declare-fun _0__pc1 (thread) Bool)
(declare-fun _1__pc1 (thread) Bool)
(define-fun _0__pc1.sv ((V0 thread)) Bool (! (_0__pc1 V0) :next _1__pc1))
(declare-fun _0__pc2 (thread) Bool)
(declare-fun _1__pc2 (thread) Bool)
(define-fun _0__pc2.sv ((V0 thread)) Bool (! (_0__pc2 V0) :next _1__pc2))
(declare-fun _0__pc3 (thread) Bool)
(declare-fun _1__pc3 (thread) Bool)
(define-fun _0__pc3.sv ((V0 thread)) Bool (! (_0__pc3 V0) :next _1__pc3))
(declare-fun _0__m (thread ticket) Bool)
(declare-fun _1__m (thread ticket) Bool)
(define-fun _0__m.sv ((V0 thread) (V1 ticket)) Bool (! (_0__m V0 V1) :next _1__m))
(define-fun axiom_0 () Bool (! (forall ((X_0 ticket)) (le X_0 X_0)) :axiom true))
(define-fun axiom_1 () Bool (! (forall ((X_1 ticket) (Y_2 ticket) (Z_3 ticket))
  (=> (and (le X_1 Y_2) (le Y_2 Z_3)) (le X_1 Z_3))) :axiom true))
(define-fun axiom_2 () Bool (! (forall ((X_4 ticket) (Y_5 ticket))
  (=> (and (le X_4 Y_5) (le Y_5 X_4)) (= X_4 Y_5))) :axiom true))
(define-fun axiom_3 () Bool (! (forall ((X_6 ticket) (Y_7 ticket)) (or (le X_6 Y_7) (le Y_7 X_6))) :axiom true))
(define-fun axiom_4 () Bool (! (forall ((X_8 ticket)) (le zero X_8)) :axiom true))
(define-fun init () Bool (! (and (forall ((T_0 thread)) (_0__pc1 T_0))
     (forall ((T_1 thread)) (not (_0__pc2 T_1)))
     (forall ((T_2 thread)) (not (_0__pc3 T_2)))
     (= _0__service zero)
     (= _0__next_ticket zero)
     (forall ((T_3 thread) (K_4 ticket)) (= (_0__m T_3 K_4) (= K_4 zero)))) :init true))
(define-fun transition_0 () Bool (! (exists ((t_0 thread))
  (let ((a!1 (forall ((T_1 thread) (K_2 ticket))
               (= (_1__m T_1 K_2)
                  (ite (= T_1 t_0) (= K_2 _0__next_ticket) (_0__m T_1 K_2)))))
        (a!2 (forall ((Z_3 ticket))
               (=> (not (le Z_3 _0__next_ticket)) (le _1__next_ticket Z_3))))
        (a!3 (forall ((T_4 thread))
               (= (_1__pc1 T_4) (and (_0__pc1 T_4) (distinct T_4 t_0)))))
        (a!4 (forall ((T_5 thread))
               (= (_1__pc2 T_5) (or (_0__pc2 T_5) (= T_5 t_0))))))
    (and (_0__pc1 t_0)
         a!1
         (not (le _1__next_ticket _0__next_ticket))
         a!2
         a!3
         a!4
         (forall ((x0_6 thread)) (= (_1__pc3 x0_6) (_0__pc3 x0_6)))
         (= _1__service _0__service)))) :action true))
(define-fun transition_1 () Bool (! (exists ((t_7 thread) (k_8 ticket))
  (let ((a!1 (forall ((T_9 thread))
               (= (_1__pc2 T_9) (and (_0__pc2 T_9) (distinct T_9 t_7)))))
        (a!2 (forall ((T_10 thread))
               (= (_1__pc3 T_10) (or (_0__pc3 T_10) (= T_10 t_7))))))
    (and (_0__pc2 t_7)
         (_0__m t_7 k_8)
         (le k_8 _0__service)
         a!1
         a!2
         (forall ((x0_11 thread)) (= (_1__pc1 x0_11) (_0__pc1 x0_11)))
         (forall ((x0_12 thread) (x1_13 ticket))
           (= (_1__m x0_12 x1_13) (_0__m x0_12 x1_13)))
         (= _1__service _0__service)
         (= _1__next_ticket _0__next_ticket)))) :action true))
(define-fun transition_2 () Bool (! (exists ((t_14 thread))
  (let ((a!1 (forall ((Z_15 ticket))
               (=> (not (le Z_15 _0__service)) (le _1__service Z_15))))
        (a!2 (forall ((T_16 thread))
               (= (_1__pc3 T_16) (and (_0__pc3 T_16) (distinct T_16 t_14)))))
        (a!3 (forall ((T_17 thread))
               (= (_1__pc1 T_17) (or (_0__pc1 T_17) (= T_17 t_14))))))
    (and (_0__pc3 t_14)
         (not (le _1__service _0__service))
         a!1
         a!2
         a!3
         (forall ((x0_18 thread)) (= (_1__pc2 x0_18) (_0__pc2 x0_18)))
         (forall ((x0_19 thread) (x1_20 ticket))
           (= (_1__m x0_19 x1_20) (_0__m x0_19 x1_20)))
         (= _1__next_ticket _0__next_ticket)))) :action true))
(define-fun safety-prop () Bool (!(let ((a!1 (forall ((T1_0 thread) (T2_1 thread))
             (=> (and (_0__pc3 T1_0) (_0__pc3 T2_1)) (= T1_0 T2_1)))))
  (and a!1)) :invar-property 0))
(define-fun invariant_0 () Bool (! (forall ((T1_0 thread) (T2_1 thread))
  (=> (and (_0__pc3 T1_0) (_0__pc3 T2_1)) (= T1_0 T2_1))) :invar-property 0))
(define-fun invariant_1 () Bool (! (forall ((T_2 thread)) (or (_0__pc1 T_2) (_0__pc2 T_2) (_0__pc3 T_2))) :invar-property 1))
(define-fun invariant_2 () Bool (! (forall ((T_3 thread)) (or (not (_0__pc1 T_3)) (not (_0__pc2 T_3)))) :invar-property 2))
(define-fun invariant_3 () Bool (! (forall ((T_4 thread)) (or (not (_0__pc1 T_4)) (not (_0__pc3 T_4)))) :invar-property 3))
(define-fun invariant_4 () Bool (! (forall ((T_5 thread)) (or (not (_0__pc2 T_5)) (not (_0__pc3 T_5)))) :invar-property 4))
(define-fun invariant_5 () Bool (! (forall ((T_6 thread) (K1_7 ticket) (K2_8 ticket))
  (=> (and (_0__m T_6 K1_7) (_0__m T_6 K2_8)) (= K1_7 K2_8))) :invar-property 5))
(define-fun invariant_6 () Bool (! (forall ((T_9 thread)) (=> (= _0__next_ticket zero) (_0__m T_9 zero))) :invar-property 6))
(define-fun invariant_7 () Bool (! (forall ((T_10 thread) (M_11 ticket))
  (=> (and (distinct _0__next_ticket zero) (_0__m T_10 M_11))
      (not (le _0__next_ticket M_11)))) :invar-property 7))
(define-fun invariant_8 () Bool (! (forall ((T_12 thread))
  (=> (or (_0__pc2 T_12) (_0__pc3 T_12)) (distinct _0__next_ticket zero))) :invar-property 8))
(define-fun invariant_9 () Bool (! (forall ((T1_13 thread) (M_14 ticket) (T2_15 thread))
  (=> (and (_0__m T1_13 M_14) (_0__m T2_15 M_14) (distinct M_14 zero))
      (= T1_13 T2_15))) :invar-property 9))
(define-fun invariant_10 () Bool (! (forall ((T_16 thread) (M_17 ticket))
  (=> (and (_0__pc2 T_16) (_0__m T_16 M_17)) (le _0__service M_17))) :invar-property 10))
(define-fun invariant_11 () Bool (! (forall ((T_18 thread)) (=> (_0__pc3 T_18) (_0__m T_18 _0__service))) :invar-property 11))
(define-fun invariant_12 () Bool (! (le _0__service _0__next_ticket) :invar-property 12))
(define-fun invariant_13 () Bool (! (forall ((T1_19 thread) (T2_20 thread))
  (not (and (not (_0__pc1 T1_19))
            (not (_0__pc1 T2_20))
            (_0__m T1_19 zero)
            (_0__m T2_20 zero)
            (distinct T1_19 T2_20)))) :invar-property 13))
