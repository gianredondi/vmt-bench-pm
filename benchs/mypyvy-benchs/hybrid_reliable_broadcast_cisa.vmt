(declare-sort node 0)
(declare-sort quorum_a 0)
(declare-sort quorum_b 0)
(declare-fun member_a (node quorum_a) Bool)
(declare-fun member_b (node quorum_b) Bool)
(declare-fun member_fc (node) Bool)
(declare-fun member_fi (node) Bool)
(declare-fun member_fs (node) Bool)
(declare-fun member_fa (node) Bool)
(declare-fun rcv_init (node) Bool)
(declare-fun _0__accept (node) Bool)
(declare-fun _1__accept (node) Bool)
(define-fun _0__accept.sv ((V0 node)) Bool (! (_0__accept V0) :next _1__accept))
(declare-fun _0__sent_msg (node node) Bool)
(declare-fun _1__sent_msg (node node) Bool)
(define-fun _0__sent_msg.sv ((V0 node) (V1 node)) Bool (! (_0__sent_msg V0 V1) :next _1__sent_msg))
(declare-fun _0__rcv_msg (node node) Bool)
(declare-fun _1__rcv_msg (node node) Bool)
(define-fun _0__rcv_msg.sv ((V0 node) (V1 node)) Bool (! (_0__rcv_msg V0 V1) :next _1__rcv_msg))
(declare-fun _0__sent_msg_proj (node) Bool)
(declare-fun _1__sent_msg_proj (node) Bool)
(define-fun _0__sent_msg_proj.sv ((V0 node)) Bool (! (_0__sent_msg_proj V0) :next _1__sent_msg_proj))
(define-fun axiom_0 () Bool (! (exists ((B_0 quorum_b))
  (forall ((N_1 node))
    (=> (member_b N_1 B_0)
        (and (not (member_fa N_1))
             (not (member_fc N_1))
             (not (member_fs N_1))
             (not (member_fi N_1)))))) :axiom true))
(define-fun axiom_1 () Bool (! (forall ((A_BP_2 quorum_a))
  (exists ((N_3 node))
    (and (member_a N_3 A_BP_2) (not (member_fa N_3)) (not (member_fs N_3))))) :axiom true))
(define-fun axiom_2 () Bool (! (forall ((B_CF_4 quorum_b))
  (exists ((A_5 quorum_a))
    (forall ((N_6 node))
      (=> (member_a N_6 A_5)
          (and (member_b N_6 B_CF_4)
               (not (member_fa N_6))
               (not (member_fi N_6))))))) :axiom true))
(define-fun axiom_3 () Bool (! (forall ((N_7 node)) (not (and (member_fc N_7) (member_fi N_7)))) :axiom true))
(define-fun axiom_4 () Bool (! (forall ((N_8 node)) (not (and (member_fc N_8) (member_fs N_8)))) :axiom true))
(define-fun axiom_5 () Bool (! (forall ((N_9 node)) (not (and (member_fc N_9) (member_fa N_9)))) :axiom true))
(define-fun axiom_6 () Bool (! (forall ((N_10 node)) (not (and (member_fi N_10) (member_fs N_10)))) :axiom true))
(define-fun axiom_7 () Bool (! (forall ((N_11 node)) (not (and (member_fi N_11) (member_fa N_11)))) :axiom true))
(define-fun axiom_8 () Bool (! (forall ((N_12 node)) (not (and (member_fs N_12) (member_fa N_12)))) :axiom true))
(define-fun init () Bool (! (and (forall ((N_0 node)) (not (_0__accept N_0)))
     (forall ((N1_1 node) (N2_2 node)) (not (_0__sent_msg N1_1 N2_2)))
     (forall ((N_3 node)) (not (_0__sent_msg_proj N_3)))
     (forall ((N1_4 node) (N2_5 node)) (not (_0__rcv_msg N1_4 N2_5)))) :init true))
(define-fun transition_0 () Bool (! (exists ((n_0 node))
  (let ((a!1 (forall ((S_1 node) (D_2 node))
               (= (_1__sent_msg S_1 D_2)
                  (or (_0__sent_msg S_1 D_2) (= S_1 n_0)))))
        (a!2 (forall ((S_3 node))
               (= (_1__sent_msg_proj S_3)
                  (or (_0__sent_msg_proj S_3) (= S_3 n_0))))))
    (and (rcv_init n_0)
         a!1
         a!2
         (forall ((x0_4 node)) (= (_1__accept x0_4) (_0__accept x0_4)))
         (forall ((x0_5 node) (x1_6 node))
           (= (_1__rcv_msg x0_5 x1_6) (_0__rcv_msg x0_5 x1_6)))))) :action true))
(define-fun transition_1 () Bool (! (exists ((n_7 node) (s_8 node))
  (let ((a!1 (forall ((S_9 node) (D_10 node))
               (= (_1__rcv_msg S_9 D_10)
                  (or (_0__rcv_msg S_9 D_10) (and (= S_9 s_8) (= D_10 n_7))))))
        (a!2 (exists ((B_11 quorum_b))
               (forall ((N_12 node))
                 (=> (member_b N_12 B_11) (_1__rcv_msg N_12 n_7)))))
        (a!3 (forall ((N_13 node))
               (= (_1__accept N_13) (or (_0__accept N_13) (= N_13 n_7)))))
        (a!5 (exists ((A_15 quorum_a))
               (forall ((N_16 node))
                 (=> (member_a N_16 A_15) (_1__rcv_msg N_16 n_7)))))
        (a!6 (forall ((S_17 node) (D_18 node))
               (= (_1__sent_msg S_17 D_18)
                  (or (_0__sent_msg S_17 D_18) (= S_17 n_7)))))
        (a!7 (forall ((S_19 node))
               (= (_1__sent_msg_proj S_19)
                  (or (_0__sent_msg_proj S_19) (= S_19 n_7)))))
        (a!8 (and (forall ((S_20 node) (D_21 node))
                    (= (_1__sent_msg S_20 D_21) (_0__sent_msg S_20 D_21)))
                  (forall ((S_22 node))
                    (= (_1__sent_msg_proj S_22) (_0__sent_msg_proj S_22))))))
  (let ((a!4 (ite a!2
                  a!3
                  (forall ((N_14 node)) (= (_1__accept N_14) (_0__accept N_14))))))
    (and (_0__sent_msg s_8 n_7) a!1 a!4 (ite a!5 (and a!6 a!7) a!8))))) :action true))
(define-fun transition_2 () Bool (! (exists ((n_23 node) (s_24 node))
  (let ((a!1 (forall ((S_25 node) (D_26 node))
               (= (_1__rcv_msg S_25 D_26)
                  (or (_0__rcv_msg S_25 D_26) (and (= S_25 s_24) (= D_26 n_23))))))
        (a!2 (exists ((B_27 quorum_b))
               (forall ((N_28 node))
                 (=> (member_b N_28 B_27) (_1__rcv_msg N_28 n_23)))))
        (a!3 (forall ((N_29 node))
               (= (_1__accept N_29) (or (_0__accept N_29) (= N_29 n_23)))))
        (a!5 (exists ((A_31 quorum_a))
               (forall ((N_32 node))
                 (=> (member_a N_32 A_31) (_1__rcv_msg N_32 n_23)))))
        (a!6 (forall ((S_33 node) (D_34 node))
               (= (_1__sent_msg S_33 D_34)
                  (or (_0__sent_msg S_33 D_34) (= S_33 n_23)))))
        (a!7 (forall ((S_35 node))
               (= (_1__sent_msg_proj S_35)
                  (or (_0__sent_msg_proj S_35) (= S_35 n_23)))))
        (a!8 (and (forall ((S_36 node) (D_37 node))
                    (= (_1__sent_msg S_36 D_37) (_0__sent_msg S_36 D_37)))
                  (forall ((S_38 node))
                    (= (_1__sent_msg_proj S_38) (_0__sent_msg_proj S_38))))))
  (let ((a!4 (ite a!2
                  a!3
                  (forall ((N_30 node)) (= (_1__accept N_30) (_0__accept N_30))))))
    (and (member_fc n_23)
         (_0__sent_msg s_24 n_23)
         a!1
         a!4
         (or (and a!5 a!6 a!7) a!8))))) :action true))
(define-fun transition_3 () Bool (! (exists ((n_39 node))
  (let ((a!1 (forall ((S_40 node) (D_41 node))
               (=> (distinct S_40 n_39)
                   (= (_1__sent_msg S_40 D_41) (_0__sent_msg S_40 D_41)))))
        (a!2 (forall ((S_43 node))
               (=> (distinct S_43 n_39)
                   (= (_1__sent_msg_proj S_43) (_0__sent_msg_proj S_43))))))
    (and (member_fi n_39)
         (rcv_init n_39)
         a!1
         (forall ((D_42 node))
           (=> (_0__sent_msg n_39 D_42) (_1__sent_msg n_39 D_42)))
         a!2
         (= (exists ((D_44 node)) (_1__sent_msg n_39 D_44))
            (_1__sent_msg_proj n_39))
         (=> (_0__sent_msg_proj n_39) (_1__sent_msg_proj n_39))
         (forall ((x0_45 node)) (= (_1__accept x0_45) (_0__accept x0_45)))
         (forall ((x0_46 node) (x1_47 node))
           (= (_1__rcv_msg x0_46 x1_47) (_0__rcv_msg x0_46 x1_47)))))) :action true))
(define-fun transition_4 () Bool (! (exists ((n_48 node) (s_49 node))
  (let ((a!1 (forall ((S_50 node) (D_51 node))
               (= (_1__rcv_msg S_50 D_51)
                  (or (_0__rcv_msg S_50 D_51) (and (= S_50 s_49) (= D_51 n_48))))))
        (a!2 (exists ((B_52 quorum_b))
               (forall ((N_53 node))
                 (=> (member_b N_53 B_52) (_1__rcv_msg N_53 n_48)))))
        (a!3 (forall ((N_54 node))
               (= (_1__accept N_54) (or (_0__accept N_54) (= N_54 n_48)))))
        (a!5 (exists ((A_56 quorum_a))
               (forall ((N_57 node))
                 (=> (member_a N_57 A_56) (_1__rcv_msg N_57 n_48)))))
        (a!6 (forall ((S_58 node) (D_59 node))
               (=> (distinct S_58 n_48)
                   (= (_1__sent_msg S_58 D_59) (_0__sent_msg S_58 D_59)))))
        (a!7 (forall ((S_61 node))
               (=> (distinct S_61 n_48)
                   (= (_1__sent_msg_proj S_61) (_0__sent_msg_proj S_61)))))
        (a!9 (and (forall ((S_63 node) (D_64 node))
                    (= (_1__sent_msg S_63 D_64) (_0__sent_msg S_63 D_64)))
                  (forall ((S_65 node))
                    (= (_1__sent_msg_proj S_65) (_0__sent_msg_proj S_65))))))
  (let ((a!4 (ite a!2
                  a!3
                  (forall ((N_55 node)) (= (_1__accept N_55) (_0__accept N_55)))))
        (a!8 (and a!6
                  (forall ((D_60 node))
                    (=> (_0__sent_msg n_48 D_60) (_1__sent_msg n_48 D_60)))
                  a!7
                  (= (exists ((D_62 node)) (_1__sent_msg n_48 D_62))
                     (_1__sent_msg_proj n_48))
                  (=> (_0__sent_msg_proj n_48) (_1__sent_msg_proj n_48)))))
    (and (member_fi n_48) (_0__sent_msg s_49 n_48) a!1 a!4 (ite a!5 a!8 a!9))))) :action true))
(define-fun transition_5 () Bool (! (exists ((n_66 node))
  (let ((a!1 (forall ((S_67 node) (D_68 node))
               (= (_1__sent_msg S_67 D_68)
                  (or (_0__sent_msg S_67 D_68) (= S_67 n_66)))))
        (a!2 (forall ((S_69 node))
               (= (_1__sent_msg_proj S_69)
                  (or (_0__sent_msg_proj S_69) (= S_69 n_66))))))
    (and (member_fs n_66)
         a!1
         a!2
         (forall ((x0_70 node)) (= (_1__accept x0_70) (_0__accept x0_70)))
         (forall ((x0_71 node) (x1_72 node))
           (= (_1__rcv_msg x0_71 x1_72) (_0__rcv_msg x0_71 x1_72)))))) :action true))
(define-fun transition_6 () Bool (! (exists ((n_73 node))
  (let ((a!1 (forall ((S_74 node) (D_75 node))
               (=> (distinct D_75 n_73)
                   (= (_1__rcv_msg S_74 D_75) (_0__rcv_msg S_74 D_75)))))
        (a!2 (forall ((N_76 node))
               (=> (distinct N_76 n_73) (= (_1__accept N_76) (_0__accept N_76))))))
    (and (or (member_fs n_73) (member_fa n_73))
         a!1
         a!2
         (forall ((x0_77 node) (x1_78 node))
           (= (_1__sent_msg x0_77 x1_78) (_0__sent_msg x0_77 x1_78)))
         (forall ((x0_79 node))
           (= (_1__sent_msg_proj x0_79) (_0__sent_msg_proj x0_79)))))) :action true))
(define-fun transition_7 () Bool (! (exists ((n_80 node))
  (let ((a!1 (forall ((S_81 node) (D_82 node))
               (=> (distinct S_81 n_80)
                   (= (_1__sent_msg S_81 D_82) (_0__sent_msg S_81 D_82)))))
        (a!2 (forall ((S_84 node))
               (=> (distinct S_84 n_80)
                   (= (_1__sent_msg_proj S_84) (_0__sent_msg_proj S_84))))))
    (and (member_fa n_80)
         a!1
         (forall ((D_83 node))
           (=> (_0__sent_msg n_80 D_83) (_1__sent_msg n_80 D_83)))
         a!2
         (= (exists ((D_85 node)) (_1__sent_msg n_80 D_85))
            (_1__sent_msg_proj n_80))
         (=> (_0__sent_msg_proj n_80) (_1__sent_msg_proj n_80))
         (forall ((x0_86 node)) (= (_1__accept x0_86) (_0__accept x0_86)))
         (forall ((x0_87 node) (x1_88 node))
           (= (_1__rcv_msg x0_87 x1_88) (_0__rcv_msg x0_87 x1_88)))))) :action true))
(define-fun safety-prop () Bool (!(let ((a!1 (exists ((N_0 node))
             (and (not (member_fs N_0)) (not (member_fa N_0)) (_0__accept N_0))))
      (a!2 (exists ((M_1 node))
             (and (not (member_fs M_1)) (not (member_fa M_1)) (rcv_init M_1)))))
  (and (=> a!1 a!2))) :invar-property 0))
(define-fun invariant_0 () Bool (! (let ((a!1 (exists ((N_0 node))
             (and (not (member_fs N_0)) (not (member_fa N_0)) (_0__accept N_0))))
      (a!2 (exists ((M_1 node))
             (and (not (member_fs M_1)) (not (member_fa M_1)) (rcv_init M_1)))))
  (=> a!1 a!2)) :invar-property 0))
(define-fun invariant_1 () Bool (! (forall ((N1_2 node))
  (=> (_0__sent_msg_proj N1_2) (exists ((N2_3 node)) (_0__sent_msg N1_2 N2_3)))) :invar-property 1))
(define-fun invariant_2 () Bool (! (forall ((N1_4 node) (N2_5 node))
  (=> (_0__sent_msg N1_4 N2_5) (_0__sent_msg_proj N1_4))) :invar-property 2))
(define-fun invariant_3 () Bool (! (forall ((N2_6 node) (N1_7 node))
  (=> (and (not (member_fs N2_6))
           (not (member_fa N2_6))
           (_0__rcv_msg N1_7 N2_6))
      (_0__sent_msg N1_7 N2_6))) :invar-property 3))
(define-fun invariant_4 () Bool (! (forall ((N1_8 node) (N2_9 node))
  (=> (and (not (member_fi N1_8))
           (not (member_fa N1_8))
           (_0__sent_msg_proj N1_8))
      (_0__sent_msg N1_8 N2_9))) :invar-property 4))
(define-fun invariant_5 () Bool (! (forall ((N1_10 node) (N2_11 node))
  (let ((a!1 (exists ((A_12 quorum_a))
               (forall ((M_13 node))
                 (=> (member_a M_13 A_12) (_0__sent_msg_proj M_13))))))
    (=> (and (not (member_fs N1_10))
             (not (member_fa N1_10))
             (_0__sent_msg N1_10 N2_11)
             (not (rcv_init N1_10)))
        a!1))) :invar-property 5))
(define-fun invariant_6 () Bool (! (forall ((N1_14 node))
  (let ((a!1 (exists ((B_15 quorum_b))
               (forall ((M_16 node))
                 (=> (member_b M_16 B_15) (_0__sent_msg_proj M_16))))))
    (=> (and (not (member_fs N1_14)) (not (member_fa N1_14)) (_0__accept N1_14))
        a!1))) :invar-property 6))
(define-fun invariant_7 () Bool (! (let ((a!1 (exists ((A_17 quorum_a))
             (forall ((M_18 node))
               (=> (and (member_a M_18 A_17)
                        (not (member_fs M_18))
                        (not (member_fa M_18)))
                   (_0__sent_msg_proj M_18)))))
      (a!2 (exists ((N_19 node))
             (and (not (member_fs N_19)) (not (member_fa N_19)) (rcv_init N_19)))))
  (=> a!1 a!2)) :invar-property 7))
