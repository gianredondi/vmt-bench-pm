(declare-sort node 0)
(declare-sort value 0)
(declare-sort quorum 0)
(declare-sort round 0)
(declare-const none round)
(define-fun none.sv () round (! none :rigid true))
(declare-const r1 round)
(define-fun r1.sv () round (! r1 :rigid true))
(declare-const r2 round)
(define-fun r2.sv () round (! r2 :rigid true))
(declare-fun le (round round) Bool)
(declare-fun member (node quorum) Bool)
(declare-fun _0__one_a (round) Bool)
(declare-fun _1__one_a (round) Bool)
(define-fun _0__one_a.sv ((V0 round)) Bool (! (_0__one_a V0) :next _1__one_a))
(declare-fun _0__one_b (node round) Bool)
(declare-fun _1__one_b (node round) Bool)
(define-fun _0__one_b.sv ((V0 node) (V1 round)) Bool (! (_0__one_b V0 V1) :next _1__one_b))
(declare-fun _0__left_round (node round) Bool)
(declare-fun _1__left_round (node round) Bool)
(define-fun _0__left_round.sv ((V0 node) (V1 round)) Bool (! (_0__left_round V0 V1) :next _1__left_round))
(declare-fun _0__proposal (round value) Bool)
(declare-fun _1__proposal (round value) Bool)
(define-fun _0__proposal.sv ((V0 round) (V1 value)) Bool (! (_0__proposal V0 V1) :next _1__proposal))
(declare-fun _0__vote (node round value) Bool)
(declare-fun _1__vote (node round value) Bool)
(define-fun _0__vote.sv ((V0 node) (V1 round) (V2 value)) Bool (! (_0__vote V0 V1 V2) :next _1__vote))
(declare-fun _0__decision (round value) Bool)
(declare-fun _1__decision (round value) Bool)
(define-fun _0__decision.sv ((V0 round) (V1 value)) Bool (! (_0__decision V0 V1) :next _1__decision))
(declare-fun _0__node_active (node) Bool)
(declare-fun _1__node_active (node) Bool)
(define-fun _0__node_active.sv ((V0 node)) Bool (! (_0__node_active V0) :next _1__node_active))
(declare-fun _0__value_active (value) Bool)
(declare-fun _1__value_active (value) Bool)
(define-fun _0__value_active.sv ((V0 value)) Bool (! (_0__value_active V0) :next _1__value_active))
(declare-fun _0__quorum_active (quorum) Bool)
(declare-fun _1__quorum_active (quorum) Bool)
(define-fun _0__quorum_active.sv ((V0 quorum)) Bool (! (_0__quorum_active V0) :next _1__quorum_active))
(declare-fun _0__round_active (round) Bool)
(declare-fun _1__round_active (round) Bool)
(define-fun _0__round_active.sv ((V0 round)) Bool (! (_0__round_active V0) :next _1__round_active))
(declare-fun _0__dr (quorum round) Bool)
(declare-fun _1__dr (quorum round) Bool)
(define-fun _0__dr.sv ((V0 quorum) (V1 round)) Bool (! (_0__dr V0 V1) :next _1__dr))
(declare-fun _0__decision_quorum (round value) quorum)
(declare-fun _1__decision_quorum (round value) quorum)
(define-fun _0__decision_quorum.sv ((V0 round) (V1 value)) quorum (! (_0__decision_quorum V0 V1) :next _1__decision_quorum))
(define-fun axiom_0 () Bool (! (forall ((X_0 round)) (le X_0 X_0)) :axiom true))
(define-fun axiom_1 () Bool (! (forall ((X_1 round) (Y_2 round) (Z_3 round))
  (=> (and (le X_1 Y_2) (le Y_2 Z_3)) (le X_1 Z_3))) :axiom true))
(define-fun axiom_2 () Bool (! (forall ((X_4 round) (Y_5 round))
  (=> (and (le X_4 Y_5) (le Y_5 X_4)) (= X_4 Y_5))) :axiom true))
(define-fun axiom_3 () Bool (! (forall ((X_6 round) (Y_7 round)) (or (le X_6 Y_7) (le Y_7 X_6))) :axiom true))
(define-fun axiom_4 () Bool (! (forall ((Q1_8 quorum) (Q2_9 quorum))
  (exists ((N_10 node)) (and (member N_10 Q1_8) (member N_10 Q2_9)))) :axiom true))
(define-fun axiom_5 () Bool (! (distinct r1 r2) :axiom true))
(define-fun init () Bool (! (and (forall ((N_0 node)) (_0__node_active N_0))
     (forall ((V_1 value)) (_0__value_active V_1))
     (forall ((Q_2 quorum)) (_0__quorum_active Q_2))
     (forall ((R_3 round)) (_0__round_active R_3))
     (forall ((R_4 round)) (not (_0__one_a R_4)))
     (forall ((N_5 node) (R_6 round)) (not (_0__one_b N_5 R_6)))
     (forall ((N_7 node) (R_8 round)) (not (_0__left_round N_7 R_8)))
     (forall ((R_9 round) (V_10 value)) (not (_0__proposal R_9 V_10)))
     (forall ((N_11 node) (R_12 round) (V_13 value))
       (not (_0__vote N_11 R_12 V_13)))
     (forall ((R_14 round) (V_15 value)) (not (_0__decision R_14 V_15)))) :init true))
(define-fun transition_0 () Bool (! (exists ((r_0 round))
  (let ((a!1 (forall ((R_1 round))
               (= (_1__one_a R_1) (or (_0__one_a R_1) (= R_1 r_0))))))
    (and (_0__round_active r_0)
         (distinct r_0 none)
         a!1
         (forall ((x0_2 node) (x1_3 round))
           (= (_1__one_b x0_2 x1_3) (_0__one_b x0_2 x1_3)))
         (forall ((x0_4 node) (x1_5 round))
           (= (_1__left_round x0_4 x1_5) (_0__left_round x0_4 x1_5)))
         (forall ((x0_6 round) (x1_7 value))
           (= (_1__proposal x0_6 x1_7) (_0__proposal x0_6 x1_7)))
         (forall ((x0_8 node) (x1_9 round) (x2_10 value))
           (= (_1__vote x0_8 x1_9 x2_10) (_0__vote x0_8 x1_9 x2_10)))
         (forall ((x0_11 round) (x1_12 value))
           (= (_1__decision x0_11 x1_12) (_0__decision x0_11 x1_12)))
         (forall ((x0_13 node))
           (= (_1__node_active x0_13) (_0__node_active x0_13)))
         (forall ((x0_14 value))
           (= (_1__value_active x0_14) (_0__value_active x0_14)))
         (forall ((x0_15 quorum))
           (= (_1__quorum_active x0_15) (_0__quorum_active x0_15)))
         (forall ((x0_16 round))
           (= (_1__round_active x0_16) (_0__round_active x0_16)))
         (forall ((x0_17 round) (x1_18 value))
           (= (_1__decision_quorum x0_17 x1_18)
              (_0__decision_quorum x0_17 x1_18)))))) :action true))
(define-fun transition_1 () Bool (! (exists ((n_19 node) (r_20 round))
  (let ((a!1 (forall ((N_21 node) (R_22 round))
               (= (_1__one_b N_21 R_22)
                  (or (_0__one_b N_21 R_22) (and (= N_21 n_19) (= R_22 r_20)))))))
    (and (_0__node_active n_19)
         (_0__round_active r_20)
         (distinct r_20 none)
         (_0__one_a r_20)
         (not (_0__left_round n_19 r_20))
         a!1
         (forall ((N_23 node) (R_24 round))
           (let ((a!1 (or (_0__left_round N_23 R_24)
                          (and (= N_23 n_19) (not (le r_20 R_24))))))
             (= (_1__left_round N_23 R_24) a!1)))
         (forall ((x0_25 round)) (= (_1__one_a x0_25) (_0__one_a x0_25)))
         (forall ((x0_26 round) (x1_27 value))
           (= (_1__proposal x0_26 x1_27) (_0__proposal x0_26 x1_27)))
         (forall ((x0_28 node) (x1_29 round) (x2_30 value))
           (= (_1__vote x0_28 x1_29 x2_30) (_0__vote x0_28 x1_29 x2_30)))
         (forall ((x0_31 round) (x1_32 value))
           (= (_1__decision x0_31 x1_32) (_0__decision x0_31 x1_32)))
         (forall ((x0_33 node))
           (= (_1__node_active x0_33) (_0__node_active x0_33)))
         (forall ((x0_34 value))
           (= (_1__value_active x0_34) (_0__value_active x0_34)))
         (forall ((x0_35 quorum))
           (= (_1__quorum_active x0_35) (_0__quorum_active x0_35)))
         (forall ((x0_36 round))
           (= (_1__round_active x0_36) (_0__round_active x0_36)))
         (forall ((x0_37 round) (x1_38 value))
           (= (_1__decision_quorum x0_37 x1_38)
              (_0__decision_quorum x0_37 x1_38)))))) :action true))
(define-fun transition_2 () Bool (! (exists ((r_39 round) (q_40 quorum) (maxr_41 round) (v_42 value))
  (let ((a!1 (forall ((V_43 value))
               (=> (_0__value_active V_43) (not (_0__proposal r_39 V_43)))))
        (a!2 (forall ((N_44 node))
               (=> (and (_0__node_active N_44) (member N_44 q_40))
                   (_0__one_b N_44 r_39))))
        (a!3 (forall ((N_45 node) (MAXR_46 round) (V_47 value))
               (let ((a!1 (and (member N_45 q_40)
                               (not (le r_39 MAXR_46))
                               (_0__vote N_45 MAXR_46 V_47))))
                 (=> (and (_0__node_active N_45)
                          (_0__round_active MAXR_46)
                          (_0__value_active V_47))
                     (not a!1)))))
        (a!4 (exists ((N_48 node))
               (and (_0__node_active N_48)
                    (member N_48 q_40)
                    (not (le r_39 maxr_41))
                    (_0__vote N_48 maxr_41 v_42))))
        (a!5 (forall ((N_49 node) (MAXR_50 round) (V_51 value))
               (let ((a!1 (and (member N_49 q_40)
                               (not (le r_39 MAXR_50))
                               (_0__vote N_49 MAXR_50 V_51))))
                 (=> (and (_0__node_active N_49)
                          (_0__round_active MAXR_50)
                          (_0__value_active V_51)
                          a!1)
                     (le MAXR_50 maxr_41)))))
        (a!6 (forall ((R_52 round) (V_53 value))
               (= (_1__proposal R_52 V_53)
                  (or (_0__proposal R_52 V_53)
                      (and (= R_52 r_39) (= V_53 v_42)))))))
    (and (_0__round_active r_39)
         (_0__quorum_active q_40)
         (_0__round_active maxr_41)
         (_0__value_active v_42)
         (distinct r_39 none)
         a!1
         a!2
         (or (and (= maxr_41 none) a!3) (and (distinct maxr_41 none) a!4 a!5))
         a!6
         (forall ((x0_54 round)) (= (_1__one_a x0_54) (_0__one_a x0_54)))
         (forall ((x0_55 node) (x1_56 round))
           (= (_1__one_b x0_55 x1_56) (_0__one_b x0_55 x1_56)))
         (forall ((x0_57 node) (x1_58 round))
           (= (_1__left_round x0_57 x1_58) (_0__left_round x0_57 x1_58)))
         (forall ((x0_59 node) (x1_60 round) (x2_61 value))
           (= (_1__vote x0_59 x1_60 x2_61) (_0__vote x0_59 x1_60 x2_61)))
         (forall ((x0_62 round) (x1_63 value))
           (= (_1__decision x0_62 x1_63) (_0__decision x0_62 x1_63)))
         (forall ((x0_64 node))
           (= (_1__node_active x0_64) (_0__node_active x0_64)))
         (forall ((x0_65 value))
           (= (_1__value_active x0_65) (_0__value_active x0_65)))
         (forall ((x0_66 quorum))
           (= (_1__quorum_active x0_66) (_0__quorum_active x0_66)))
         (forall ((x0_67 round))
           (= (_1__round_active x0_67) (_0__round_active x0_67)))
         (forall ((x0_68 round) (x1_69 value))
           (= (_1__decision_quorum x0_68 x1_69)
              (_0__decision_quorum x0_68 x1_69)))))) :action true))
(define-fun transition_3 () Bool (! (exists ((n_70 node) (v_71 value) (r_72 round))
  (let ((a!1 (forall ((N_73 node) (R_74 round) (V_75 value))
               (= (_1__vote N_73 R_74 V_75)
                  (or (_0__vote N_73 R_74 V_75)
                      (and (= N_73 n_70) (= R_74 r_72) (= V_75 v_71)))))))
    (and (_0__node_active n_70)
         (_0__value_active v_71)
         (_0__round_active r_72)
         (distinct r_72 none)
         (not (_0__left_round n_70 r_72))
         (_0__proposal r_72 v_71)
         a!1
         (forall ((x0_76 round)) (= (_1__one_a x0_76) (_0__one_a x0_76)))
         (forall ((x0_77 node) (x1_78 round))
           (= (_1__one_b x0_77 x1_78) (_0__one_b x0_77 x1_78)))
         (forall ((x0_79 node) (x1_80 round))
           (= (_1__left_round x0_79 x1_80) (_0__left_round x0_79 x1_80)))
         (forall ((x0_81 round) (x1_82 value))
           (= (_1__proposal x0_81 x1_82) (_0__proposal x0_81 x1_82)))
         (forall ((x0_83 round) (x1_84 value))
           (= (_1__decision x0_83 x1_84) (_0__decision x0_83 x1_84)))
         (forall ((x0_85 node))
           (= (_1__node_active x0_85) (_0__node_active x0_85)))
         (forall ((x0_86 value))
           (= (_1__value_active x0_86) (_0__value_active x0_86)))
         (forall ((x0_87 quorum))
           (= (_1__quorum_active x0_87) (_0__quorum_active x0_87)))
         (forall ((x0_88 round))
           (= (_1__round_active x0_88) (_0__round_active x0_88)))
         (forall ((x0_89 round) (x1_90 value))
           (= (_1__decision_quorum x0_89 x1_90)
              (_0__decision_quorum x0_89 x1_90)))))) :action true))
(define-fun transition_4 () Bool (! (exists ((r_91 round) (v_92 value) (q_93 quorum))
  (let ((a!1 (forall ((N_94 node))
               (=> (and (_0__node_active N_94) (member N_94 q_93))
                   (_0__vote N_94 r_91 v_92))))
        (a!2 (forall ((R_95 round) (V_96 value))
               (= (_1__decision R_95 V_96)
                  (or (_0__decision R_95 V_96)
                      (and (= R_95 r_91) (= V_96 v_92))))))
        (a!3 (forall ((R_97 round) (V_98 value))
               (=> (not (and (= R_97 r_91) (= V_98 v_92)))
                   (= (_1__decision_quorum R_97 V_98)
                      (_0__decision_quorum R_97 V_98))))))
    (and (_0__round_active r_91)
         (_0__value_active v_92)
         (_0__quorum_active q_93)
         (distinct r_91 none)
         a!1
         a!2
         a!3
         (= (_1__decision_quorum r_91 v_92) q_93)
         (forall ((x0_99 round)) (= (_1__one_a x0_99) (_0__one_a x0_99)))
         (forall ((x0_100 node) (x1_101 round))
           (= (_1__one_b x0_100 x1_101) (_0__one_b x0_100 x1_101)))
         (forall ((x0_102 node) (x1_103 round))
           (= (_1__left_round x0_102 x1_103) (_0__left_round x0_102 x1_103)))
         (forall ((x0_104 round) (x1_105 value))
           (= (_1__proposal x0_104 x1_105) (_0__proposal x0_104 x1_105)))
         (forall ((x0_106 node) (x1_107 round) (x2_108 value))
           (= (_1__vote x0_106 x1_107 x2_108) (_0__vote x0_106 x1_107 x2_108)))
         (forall ((x0_109 node))
           (= (_1__node_active x0_109) (_0__node_active x0_109)))
         (forall ((x0_110 value))
           (= (_1__value_active x0_110) (_0__value_active x0_110)))
         (forall ((x0_111 quorum))
           (= (_1__quorum_active x0_111) (_0__quorum_active x0_111)))
         (forall ((x0_112 round))
           (= (_1__round_active x0_112) (_0__round_active x0_112)))))) :action true))
(define-fun transition_5 () Bool (! (let ((a!1 (forall ((R_117 round) (V_118 value))
             (=> (and (_1__round_active R_117) (_1__value_active V_118))
                 (_1__quorum_active (_0__decision_quorum R_117 V_118)))))
      (a!2 (forall ((R_119 round) (V_120 value) (N_121 node))
             (let ((a!1 (=> (and (_0__decision R_119 V_120)
                                 (member N_121
                                         (_0__decision_quorum R_119 V_120)))
                            (_0__vote N_121 R_119 V_120))))
               (=> (and (_1__round_active R_119)
                        (_1__value_active V_120)
                        (_1__node_active N_121))
                   a!1))))
      (a!3 (forall ((Q_122 quorum) (R_123 round))
             (=> (and (_1__quorum_active Q_122) (_1__round_active R_123))
                 (=> (_0__dr Q_122 R_123) (_1__dr Q_122 R_123))))))
  (and (forall ((N_113 node))
         (=> (_1__node_active N_113) (_0__node_active N_113)))
       (forall ((V_114 value))
         (=> (_1__value_active V_114) (_0__value_active V_114)))
       (forall ((Q_115 quorum))
         (=> (_1__quorum_active Q_115) (_0__quorum_active Q_115)))
       (forall ((R_116 round))
         (=> (_1__round_active R_116) (_0__round_active R_116)))
       a!1
       a!2
       a!3
       (forall ((x0_124 round)) (= (_1__one_a x0_124) (_0__one_a x0_124)))
       (forall ((x0_125 node) (x1_126 round))
         (= (_1__one_b x0_125 x1_126) (_0__one_b x0_125 x1_126)))
       (forall ((x0_127 node) (x1_128 round))
         (= (_1__left_round x0_127 x1_128) (_0__left_round x0_127 x1_128)))
       (forall ((x0_129 round) (x1_130 value))
         (= (_1__proposal x0_129 x1_130) (_0__proposal x0_129 x1_130)))
       (forall ((x0_131 node) (x1_132 round) (x2_133 value))
         (= (_1__vote x0_131 x1_132 x2_133) (_0__vote x0_131 x1_132 x2_133)))
       (forall ((x0_134 round) (x1_135 value))
         (= (_1__decision x0_134 x1_135) (_0__decision x0_134 x1_135)))
       (forall ((x0_136 round) (x1_137 value))
         (= (_1__decision_quorum x0_136 x1_137)
            (_0__decision_quorum x0_136 x1_137))))) :action true))
(define-fun safety-prop () Bool (!and :invar-property 0))
