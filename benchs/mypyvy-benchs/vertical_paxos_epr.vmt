(declare-sort node 0)
(declare-sort value 0)
(declare-sort quorum 0)
(declare-sort round 0)
(declare-sort config 0)
(declare-const none value)
(define-fun none.sv () value (! none :rigid true))
(declare-const _0__master_complete round)
(declare-const _1__master_complete round)
(define-fun _0__master_complete.sv () round (! _0__master_complete :next _1__master_complete))
(declare-fun le (round round) Bool)
(declare-fun member (node quorum) Bool)
(declare-fun quorumin (quorum config) Bool)
(declare-fun complete_of (config round) Bool)
(declare-fun _0__one_a (round round) Bool)
(declare-fun _1__one_a (round round) Bool)
(define-fun _0__one_a.sv ((V0 round) (V1 round)) Bool (! (_0__one_a V0 V1) :next _1__one_a))
(declare-fun _0__one_b (node round round) Bool)
(declare-fun _1__one_b (node round round) Bool)
(define-fun _0__one_b.sv ((V0 node) (V1 round) (V2 round)) Bool (! (_0__one_b V0 V1 V2) :next _1__one_b))
(declare-fun _0__left_round (node round) Bool)
(declare-fun _1__left_round (node round) Bool)
(define-fun _0__left_round.sv ((V0 node) (V1 round)) Bool (! (_0__left_round V0 V1) :next _1__left_round))
(declare-fun _0__proposal (round value) Bool)
(declare-fun _1__proposal (round value) Bool)
(define-fun _0__proposal.sv ((V0 round) (V1 value)) Bool (! (_0__proposal V0 V1) :next _1__proposal))
(declare-fun _0__vote (node round value) Bool)
(declare-fun _1__vote (node round value) Bool)
(define-fun _0__vote.sv ((V0 node) (V1 round) (V2 value)) Bool (! (_0__vote V0 V1 V2) :next _1__vote))
(declare-fun _0__decision (round value) Bool)
(declare-fun _1__decision (round value) Bool)
(define-fun _0__decision.sv ((V0 round) (V1 value)) Bool (! (_0__decision V0 V1) :next _1__decision))
(declare-fun _0__configure_round_msg (round config) Bool)
(declare-fun _1__configure_round_msg (round config) Bool)
(define-fun _0__configure_round_msg.sv ((V0 round) (V1 config)) Bool (! (_0__configure_round_msg V0 V1) :next _1__configure_round_msg))
(declare-fun _0__complete_msg (round) Bool)
(declare-fun _1__complete_msg (round) Bool)
(define-fun _0__complete_msg.sv ((V0 round)) Bool (! (_0__complete_msg V0) :next _1__complete_msg))
(declare-fun _0__quorum_of_round (round) quorum)
(declare-fun _1__quorum_of_round (round) quorum)
(define-fun _0__quorum_of_round.sv ((V0 round)) quorum (! (_0__quorum_of_round V0) :next _1__quorum_of_round))
(define-fun axiom_0 () Bool (! (forall ((X_0 round)) (le X_0 X_0)) :axiom true))
(define-fun axiom_1 () Bool (! (forall ((X_1 round) (Y_2 round) (Z_3 round))
  (=> (and (le X_1 Y_2) (le Y_2 Z_3)) (le X_1 Z_3))) :axiom true))
(define-fun axiom_2 () Bool (! (forall ((X_4 round) (Y_5 round))
  (=> (and (le X_4 Y_5) (le Y_5 X_4)) (= X_4 Y_5))) :axiom true))
(define-fun axiom_3 () Bool (! (forall ((X_6 round) (Y_7 round)) (or (le X_6 Y_7) (le Y_7 X_6))) :axiom true))
(define-fun axiom_4 () Bool (! (forall ((C_8 config) (Q1_9 quorum) (Q2_10 quorum))
  (=> (and (quorumin Q1_9 C_8) (quorumin Q2_10 C_8))
      (exists ((N_11 node)) (and (member N_11 Q1_9) (member N_11 Q2_10))))) :axiom true))
(define-fun axiom_5 () Bool (! (forall ((C_12 config) (R1_13 round) (R2_14 round))
  (=> (and (complete_of C_12 R1_13) (complete_of C_12 R2_14)) (= R1_13 R2_14))) :axiom true))
(define-fun init () Bool (! (and (forall ((R1_0 round) (R2_1 round)) (not (_0__one_a R1_0 R2_1)))
     (forall ((N_2 node) (R1_3 round) (R2_4 round))
       (not (_0__one_b N_2 R1_3 R2_4)))
     (forall ((N_5 node) (R_6 round)) (not (_0__left_round N_5 R_6)))
     (forall ((R_7 round) (V_8 value)) (not (_0__proposal R_7 V_8)))
     (forall ((N_9 node) (R_10 round) (V_11 value))
       (not (_0__vote N_9 R_10 V_11)))
     (forall ((R_12 round) (V_13 value)) (not (_0__decision R_12 V_13)))
     (forall ((R_14 round) (C_15 config))
       (not (_0__configure_round_msg R_14 C_15)))
     (forall ((R_16 round)) (not (_0__complete_msg R_16)))
     (forall ((R_17 round)) (le _0__master_complete R_17))) :init true))
(define-fun transition_0 () Bool (! (exists ((r_0 round) (c_1 config))
  (let ((a!1 (forall ((R_3 round) (C_4 config))
               (= (_1__configure_round_msg R_3 C_4)
                  (or (_0__configure_round_msg R_3 C_4)
                      (and (= R_3 r_0) (= C_4 c_1)))))))
    (and (forall ((C_2 config)) (not (_0__configure_round_msg r_0 C_2)))
         (le _0__master_complete r_0)
         (complete_of c_1 _0__master_complete)
         a!1
         (forall ((x0_5 round) (x1_6 round))
           (= (_1__one_a x0_5 x1_6) (_0__one_a x0_5 x1_6)))
         (forall ((x0_7 node) (x1_8 round) (x2_9 round))
           (= (_1__one_b x0_7 x1_8 x2_9) (_0__one_b x0_7 x1_8 x2_9)))
         (forall ((x0_10 node) (x1_11 round))
           (= (_1__left_round x0_10 x1_11) (_0__left_round x0_10 x1_11)))
         (forall ((x0_12 round) (x1_13 value))
           (= (_1__proposal x0_12 x1_13) (_0__proposal x0_12 x1_13)))
         (forall ((x0_14 node) (x1_15 round) (x2_16 value))
           (= (_1__vote x0_14 x1_15 x2_16) (_0__vote x0_14 x1_15 x2_16)))
         (forall ((x0_17 round) (x1_18 value))
           (= (_1__decision x0_17 x1_18) (_0__decision x0_17 x1_18)))
         (forall ((x0_19 round))
           (= (_1__complete_msg x0_19) (_0__complete_msg x0_19)))
         (= _1__master_complete _0__master_complete)
         (forall ((x0_20 round))
           (= (_1__quorum_of_round x0_20) (_0__quorum_of_round x0_20)))))) :action true))
(define-fun transition_1 () Bool (! (exists ((r_21 round))
  (and (_0__complete_msg r_21)
       (not (le r_21 _0__master_complete))
       (= _1__master_complete r_21)
       (forall ((x0_22 round) (x1_23 round))
         (= (_1__one_a x0_22 x1_23) (_0__one_a x0_22 x1_23)))
       (forall ((x0_24 node) (x1_25 round) (x2_26 round))
         (= (_1__one_b x0_24 x1_25 x2_26) (_0__one_b x0_24 x1_25 x2_26)))
       (forall ((x0_27 node) (x1_28 round))
         (= (_1__left_round x0_27 x1_28) (_0__left_round x0_27 x1_28)))
       (forall ((x0_29 round) (x1_30 value))
         (= (_1__proposal x0_29 x1_30) (_0__proposal x0_29 x1_30)))
       (forall ((x0_31 node) (x1_32 round) (x2_33 value))
         (= (_1__vote x0_31 x1_32 x2_33) (_0__vote x0_31 x1_32 x2_33)))
       (forall ((x0_34 round) (x1_35 value))
         (= (_1__decision x0_34 x1_35) (_0__decision x0_34 x1_35)))
       (forall ((x0_36 round) (x1_37 config))
         (= (_1__configure_round_msg x0_36 x1_37)
            (_0__configure_round_msg x0_36 x1_37)))
       (forall ((x0_38 round))
         (= (_1__complete_msg x0_38) (_0__complete_msg x0_38)))
       (forall ((x0_39 round))
         (= (_1__quorum_of_round x0_39) (_0__quorum_of_round x0_39))))) :action true))
(define-fun transition_2 () Bool (! (exists ((r_40 round) (c_41 config) (cr_42 round))
  (and (_0__configure_round_msg r_40 c_41)
       (complete_of c_41 cr_42)
       (forall ((R1_43 round) (R2_44 round))
         (let ((a!1 (or (_0__one_a R1_43 R2_44)
                        (and (= R1_43 r_40)
                             (le cr_42 R2_44)
                             (not (le r_40 R2_44))))))
           (= (_1__one_a R1_43 R2_44) a!1)))
       (forall ((x0_45 node) (x1_46 round) (x2_47 round))
         (= (_1__one_b x0_45 x1_46 x2_47) (_0__one_b x0_45 x1_46 x2_47)))
       (forall ((x0_48 node) (x1_49 round))
         (= (_1__left_round x0_48 x1_49) (_0__left_round x0_48 x1_49)))
       (forall ((x0_50 round) (x1_51 value))
         (= (_1__proposal x0_50 x1_51) (_0__proposal x0_50 x1_51)))
       (forall ((x0_52 node) (x1_53 round) (x2_54 value))
         (= (_1__vote x0_52 x1_53 x2_54) (_0__vote x0_52 x1_53 x2_54)))
       (forall ((x0_55 round) (x1_56 value))
         (= (_1__decision x0_55 x1_56) (_0__decision x0_55 x1_56)))
       (forall ((x0_57 round) (x1_58 config))
         (= (_1__configure_round_msg x0_57 x1_58)
            (_0__configure_round_msg x0_57 x1_58)))
       (forall ((x0_59 round))
         (= (_1__complete_msg x0_59) (_0__complete_msg x0_59)))
       (= _1__master_complete _0__master_complete)
       (forall ((x0_60 round))
         (= (_1__quorum_of_round x0_60) (_0__quorum_of_round x0_60))))) :action true))
(define-fun transition_3 () Bool (! (exists ((n_61 node) (r_62 round) (rp_63 round))
  (let ((a!1 (forall ((N_64 node) (R1_65 round) (R2_66 round))
               (= (_1__one_b N_64 R1_65 R2_66)
                  (or (_0__one_b N_64 R1_65 R2_66)
                      (and (= N_64 n_61) (= R1_65 r_62) (= R2_66 rp_63)))))))
    (and (_0__one_a r_62 rp_63)
         (not (_0__left_round n_61 r_62))
         a!1
         (forall ((N_67 node) (R_68 round))
           (let ((a!1 (or (_0__left_round N_67 R_68)
                          (and (= N_67 n_61) (not (le r_62 R_68))))))
             (= (_1__left_round N_67 R_68) a!1)))
         (forall ((x0_69 round) (x1_70 round))
           (= (_1__one_a x0_69 x1_70) (_0__one_a x0_69 x1_70)))
         (forall ((x0_71 round) (x1_72 value))
           (= (_1__proposal x0_71 x1_72) (_0__proposal x0_71 x1_72)))
         (forall ((x0_73 node) (x1_74 round) (x2_75 value))
           (= (_1__vote x0_73 x1_74 x2_75) (_0__vote x0_73 x1_74 x2_75)))
         (forall ((x0_76 round) (x1_77 value))
           (= (_1__decision x0_76 x1_77) (_0__decision x0_76 x1_77)))
         (forall ((x0_78 round) (x1_79 config))
           (= (_1__configure_round_msg x0_78 x1_79)
              (_0__configure_round_msg x0_78 x1_79)))
         (forall ((x0_80 round))
           (= (_1__complete_msg x0_80) (_0__complete_msg x0_80)))
         (= _1__master_complete _0__master_complete)
         (forall ((x0_81 round))
           (= (_1__quorum_of_round x0_81) (_0__quorum_of_round x0_81)))))) :action true))
(define-fun transition_4 () Bool (! (exists ((r_82 round) (c_83 config) (cr_84 round) (v_85 value))
  (let ((a!1 (forall ((R_88 round))
               (=> (and (le cr_84 R_88) (not (le r_82 R_88)))
                   (exists ((C_89 config)) (_0__configure_round_msg R_88 C_89)))))
        (a!2 (forall ((R_90 round) (C_91 config))
               (=> (and (le cr_84 R_90)
                        (not (le r_82 R_90))
                        (_0__configure_round_msg R_90 C_91))
                   (quorumin (_0__quorum_of_round R_90) C_91))))
        (a!3 (forall ((R_92 round) (N_93 node))
               (=> (and (le cr_84 R_92)
                        (not (le r_82 R_92))
                        (member N_93 (_0__quorum_of_round R_92)))
                   (_0__one_b N_93 r_82 R_92))))
        (a!4 (forall ((N_94 node) (MAXR_95 round) (V_96 value))
               (not (and (le cr_84 MAXR_95)
                         (not (le r_82 MAXR_95))
                         (member N_94 (_0__quorum_of_round MAXR_95))
                         (_0__vote N_94 MAXR_95 V_96)))))
        (a!5 (forall ((R_97 round))
               (= (_1__complete_msg R_97)
                  (or (_0__complete_msg R_97) (= R_97 r_82)))))
        (a!6 (forall ((R_98 round) (V_99 value))
               (= (_1__proposal R_98 V_99)
                  (or (_0__proposal R_98 V_99)
                      (and (= R_98 r_82) (= V_99 v_85)))))))
    (and (forall ((R_86 round))
           (= (_1__quorum_of_round R_86) (_1__quorum_of_round R_86)))
         (_0__configure_round_msg r_82 c_83)
         (complete_of c_83 cr_84)
         (forall ((V_87 value)) (not (_0__proposal r_82 V_87)))
         a!1
         a!2
         a!3
         a!4
         a!5
         (distinct v_85 none)
         a!6
         (forall ((x0_100 round) (x1_101 round))
           (= (_1__one_a x0_100 x1_101) (_0__one_a x0_100 x1_101)))
         (forall ((x0_102 node) (x1_103 round) (x2_104 round))
           (= (_1__one_b x0_102 x1_103 x2_104) (_0__one_b x0_102 x1_103 x2_104)))
         (forall ((x0_105 node) (x1_106 round))
           (= (_1__left_round x0_105 x1_106) (_0__left_round x0_105 x1_106)))
         (forall ((x0_107 node) (x1_108 round) (x2_109 value))
           (= (_1__vote x0_107 x1_108 x2_109) (_0__vote x0_107 x1_108 x2_109)))
         (forall ((x0_110 round) (x1_111 value))
           (= (_1__decision x0_110 x1_111) (_0__decision x0_110 x1_111)))
         (forall ((x0_112 round) (x1_113 config))
           (= (_1__configure_round_msg x0_112 x1_113)
              (_0__configure_round_msg x0_112 x1_113)))
         (= _1__master_complete _0__master_complete)))) :action true))
(define-fun transition_5 () Bool (! (exists ((r_114 round)
         (c_115 config)
         (cr_116 round)
         (maxr_117 round)
         (v_118 value))
  (let ((a!1 (forall ((R_121 round))
               (=> (and (le cr_116 R_121) (not (le r_114 R_121)))
                   (exists ((C_122 config))
                     (_0__configure_round_msg R_121 C_122)))))
        (a!2 (forall ((R_123 round) (C_124 config))
               (=> (and (le cr_116 R_123)
                        (not (le r_114 R_123))
                        (_0__configure_round_msg R_123 C_124))
                   (quorumin (_0__quorum_of_round R_123) C_124))))
        (a!3 (forall ((R_125 round) (N_126 node))
               (=> (and (le cr_116 R_125)
                        (not (le r_114 R_125))
                        (member N_126 (_0__quorum_of_round R_125)))
                   (_0__one_b N_126 r_114 R_125))))
        (a!4 (exists ((N_127 node))
               (and (le cr_116 maxr_117)
                    (not (le r_114 maxr_117))
                    (member N_127 (_0__quorum_of_round maxr_117))
                    (_0__vote N_127 maxr_117 v_118))))
        (a!5 (forall ((N_128 node) (MAXR_129 round) (V_130 value))
               (=> (and (le cr_116 MAXR_129)
                        (not (le r_114 MAXR_129))
                        (member N_128 (_0__quorum_of_round MAXR_129))
                        (_0__vote N_128 MAXR_129 V_130))
                   (le MAXR_129 maxr_117))))
        (a!6 (forall ((R_131 round) (V_132 value))
               (= (_1__proposal R_131 V_132)
                  (or (_0__proposal R_131 V_132)
                      (and (= R_131 r_114) (= V_132 v_118)))))))
    (and (forall ((R_119 round))
           (= (_1__quorum_of_round R_119) (_1__quorum_of_round R_119)))
         (_0__configure_round_msg r_114 c_115)
         (complete_of c_115 cr_116)
         (forall ((V_120 value)) (not (_0__proposal r_114 V_120)))
         a!1
         a!2
         a!3
         (distinct v_118 none)
         a!4
         a!5
         a!6
         (forall ((x0_133 round) (x1_134 round))
           (= (_1__one_a x0_133 x1_134) (_0__one_a x0_133 x1_134)))
         (forall ((x0_135 node) (x1_136 round) (x2_137 round))
           (= (_1__one_b x0_135 x1_136 x2_137) (_0__one_b x0_135 x1_136 x2_137)))
         (forall ((x0_138 node) (x1_139 round))
           (= (_1__left_round x0_138 x1_139) (_0__left_round x0_138 x1_139)))
         (forall ((x0_140 node) (x1_141 round) (x2_142 value))
           (= (_1__vote x0_140 x1_141 x2_142) (_0__vote x0_140 x1_141 x2_142)))
         (forall ((x0_143 round) (x1_144 value))
           (= (_1__decision x0_143 x1_144) (_0__decision x0_143 x1_144)))
         (forall ((x0_145 round) (x1_146 config))
           (= (_1__configure_round_msg x0_145 x1_146)
              (_0__configure_round_msg x0_145 x1_146)))
         (forall ((x0_147 round))
           (= (_1__complete_msg x0_147) (_0__complete_msg x0_147)))
         (= _1__master_complete _0__master_complete)))) :action true))
(define-fun transition_6 () Bool (! (exists ((n_148 node) (v_149 value) (r_150 round))
  (let ((a!1 (forall ((N_151 node) (R_152 round) (V_153 value))
               (= (_1__vote N_151 R_152 V_153)
                  (or (_0__vote N_151 R_152 V_153)
                      (and (= N_151 n_148) (= R_152 r_150) (= V_153 v_149)))))))
    (and (distinct v_149 none)
         (not (_0__left_round n_148 r_150))
         (_0__proposal r_150 v_149)
         a!1
         (forall ((x0_154 round) (x1_155 round))
           (= (_1__one_a x0_154 x1_155) (_0__one_a x0_154 x1_155)))
         (forall ((x0_156 node) (x1_157 round) (x2_158 round))
           (= (_1__one_b x0_156 x1_157 x2_158) (_0__one_b x0_156 x1_157 x2_158)))
         (forall ((x0_159 node) (x1_160 round))
           (= (_1__left_round x0_159 x1_160) (_0__left_round x0_159 x1_160)))
         (forall ((x0_161 round) (x1_162 value))
           (= (_1__proposal x0_161 x1_162) (_0__proposal x0_161 x1_162)))
         (forall ((x0_163 round) (x1_164 value))
           (= (_1__decision x0_163 x1_164) (_0__decision x0_163 x1_164)))
         (forall ((x0_165 round) (x1_166 config))
           (= (_1__configure_round_msg x0_165 x1_166)
              (_0__configure_round_msg x0_165 x1_166)))
         (forall ((x0_167 round))
           (= (_1__complete_msg x0_167) (_0__complete_msg x0_167)))
         (= _1__master_complete _0__master_complete)
         (forall ((x0_168 round))
           (= (_1__quorum_of_round x0_168) (_0__quorum_of_round x0_168)))))) :action true))
(define-fun transition_7 () Bool (! (exists ((r_169 round) (c_170 config) (v_171 value) (q_172 quorum))
  (let ((a!1 (forall ((R_174 round) (V_175 value))
               (= (_1__decision R_174 V_175)
                  (or (_0__decision R_174 V_175)
                      (and (= R_174 r_169) (= V_175 v_171))))))
        (a!2 (forall ((R_176 round))
               (= (_1__complete_msg R_176)
                  (or (_0__complete_msg R_176) (= R_176 r_169))))))
    (and (distinct v_171 none)
         (_0__configure_round_msg r_169 c_170)
         (quorumin q_172 c_170)
         (forall ((N_173 node))
           (=> (member N_173 q_172) (_0__vote N_173 r_169 v_171)))
         a!1
         a!2
         (forall ((x0_177 round) (x1_178 round))
           (= (_1__one_a x0_177 x1_178) (_0__one_a x0_177 x1_178)))
         (forall ((x0_179 node) (x1_180 round) (x2_181 round))
           (= (_1__one_b x0_179 x1_180 x2_181) (_0__one_b x0_179 x1_180 x2_181)))
         (forall ((x0_182 node) (x1_183 round))
           (= (_1__left_round x0_182 x1_183) (_0__left_round x0_182 x1_183)))
         (forall ((x0_184 round) (x1_185 value))
           (= (_1__proposal x0_184 x1_185) (_0__proposal x0_184 x1_185)))
         (forall ((x0_186 node) (x1_187 round) (x2_188 value))
           (= (_1__vote x0_186 x1_187 x2_188) (_0__vote x0_186 x1_187 x2_188)))
         (forall ((x0_189 round) (x1_190 config))
           (= (_1__configure_round_msg x0_189 x1_190)
              (_0__configure_round_msg x0_189 x1_190)))
         (= _1__master_complete _0__master_complete)
         (forall ((x0_191 round))
           (= (_1__quorum_of_round x0_191) (_0__quorum_of_round x0_191)))))) :action true))
(define-fun safety-prop () Bool (!(let ((a!1 (forall ((R1_0 round) (V1_1 value) (R2_2 round) (V2_3 value))
             (=> (and (_0__decision R1_0 V1_1) (_0__decision R2_2 V2_3))
                 (= V1_1 V2_3)))))
  (and a!1)) :invar-property 0))
(define-fun invariant_0 () Bool (! (forall ((R1_0 round) (V1_1 value) (R2_2 round) (V2_3 value))
  (=> (and (_0__decision R1_0 V1_1) (_0__decision R2_2 V2_3)) (= V1_1 V2_3))) :invar-property 0))
(define-fun invariant_1 () Bool (! (forall ((R_4 round) (V1_5 value) (V2_6 value))
  (=> (and (_0__proposal R_4 V1_5) (_0__proposal R_4 V2_6)) (= V1_5 V2_6))) :invar-property 1))
(define-fun invariant_2 () Bool (! (forall ((N_7 node) (R_8 round) (V_9 value))
  (=> (_0__vote N_7 R_8 V_9) (_0__proposal R_8 V_9))) :invar-property 2))
(define-fun invariant_3 () Bool (! (forall ((R1_10 round) (R2_11 round) (V_12 value))
  (=> (and (_0__proposal R2_11 V_12) (le R1_10 R2_11))
      (exists ((C_13 config)) (_0__configure_round_msg R1_10 C_13)))) :invar-property 3))
(define-fun invariant_4 () Bool (! (forall ((R2_14 round) (R3_15 round) (C_16 config) (R1_17 round))
  (let ((a!1 (and (or (= R2_14 _0__master_complete)
                      (and (_0__configure_round_msg R3_15 C_16)
                           (complete_of C_16 R2_14)))
                  (not (le R2_14 R1_17)))))
    (=> a!1 (_0__complete_msg R2_14)))) :invar-property 4))
(define-fun invariant_5 () Bool (! (forall ((R1_18 round) (R2_19 round))
  (=> (and (_0__complete_msg R2_19) (le R1_18 R2_19))
      (exists ((C_20 config)) (_0__configure_round_msg R1_18 C_20)))) :invar-property 5))
(define-fun invariant_6 () Bool (! (forall ((R_21 round) (V_22 value))
  (let ((a!1 (exists ((C_23 config) (Q_24 quorum))
               (and (_0__configure_round_msg R_21 C_23)
                    (quorumin Q_24 C_23)
                    (forall ((N_25 node))
                      (=> (member N_25 Q_24) (_0__vote N_25 R_21 V_22)))))))
    (=> (_0__decision R_21 V_22) a!1))) :invar-property 6))
(define-fun invariant_7 () Bool (! (forall ((R1_26 round)
         (R2_27 round)
         (V1_28 value)
         (V2_29 value)
         (Q_30 quorum)
         (C_31 config))
  (let ((a!1 (exists ((N_32 node))
               (and (member N_32 Q_30)
                    (_0__left_round N_32 R1_26)
                    (not (_0__vote N_32 R1_26 V1_28))))))
    (=> (and (not (le R2_27 R1_26))
             (_0__proposal R2_27 V2_29)
             (distinct V1_28 V2_29)
             (_0__configure_round_msg R1_26 C_31)
             (quorumin Q_30 C_31))
        a!1))) :invar-property 7))
(define-fun invariant_8 () Bool (! (forall ((R_33 round) (C_34 config) (MINREL_35 round))
  (=> (and (_0__configure_round_msg R_33 C_34) (complete_of C_34 MINREL_35))
      (and (le MINREL_35 R_33) (le MINREL_35 _0__master_complete)))) :invar-property 8))
(define-fun invariant_9 () Bool (! (forall ((RR_36 round) (R_37 round) (C_38 config) (Q_39 quorum) (V_40 value))
  (let ((a!1 (exists ((N_41 node))
               (and (member N_41 Q_39)
                    (_0__left_round N_41 R_37)
                    (not (_0__vote N_41 R_37 V_40))))))
    (=> (and (_0__complete_msg RR_36)
             (not (le RR_36 R_37))
             (_0__configure_round_msg R_37 C_38)
             (quorumin Q_39 C_38)
             (not (_0__decision RR_36 V_40)))
        a!1))) :invar-property 9))
(define-fun invariant_10 () Bool (! (forall ((N_42 node) (R1_43 round) (R2_44 round) (R3_45 round))
  (=> (and (_0__one_b N_42 R1_43 R2_44) (not (le R1_43 R3_45)))
      (_0__left_round N_42 R3_45))) :invar-property 10))
