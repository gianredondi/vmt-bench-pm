(declare-sort node 0)
(declare-const _0__h node)
(declare-const _1__h node)
(define-fun _0__h.sv () node (! _0__h :next _1__h))
(declare-const _0__i node)
(declare-const _1__i node)
(define-fun _0__i.sv () node (! _0__i :next _1__i))
(declare-const _0__j node)
(declare-const _1__j node)
(define-fun _0__j.sv () node (! _0__j :next _1__j))
(declare-const _0__null node)
(declare-const _1__null node)
(define-fun _0__null.sv () node (! _0__null :next _1__null))
(declare-const u node)
(define-fun u.sv () node (! u :rigid true))
(declare-const v node)
(define-fun v.sv () node (! v :rigid true))
(declare-fun _0__nrtc (node node) Bool)
(declare-fun _1__nrtc (node node) Bool)
(define-fun _0__nrtc.sv ((V0 node) (V1 node)) Bool (! (_0__nrtc V0 V1) :next _1__nrtc))
(define-fun axiom_0 () Bool (! (distinct u v) :axiom true))
(define-fun init () Bool (! (let ((a!1 (forall ((X_1 node) (Y_2 node) (Z_3 node))
             (=> (and (_0__nrtc X_1 Y_2) (_0__nrtc Y_2 Z_3)) (_0__nrtc X_1 Z_3))))
      (a!2 (forall ((X_4 node) (Y_5 node))
             (=> (and (_0__nrtc X_4 Y_5) (_0__nrtc Y_5 X_4)) (= X_4 Y_5))))
      (a!3 (forall ((X_6 node) (Y_7 node) (Z_8 node))
             (=> (and (_0__nrtc X_6 Y_7) (_0__nrtc X_6 Z_8))
                 (or (_0__nrtc Y_7 Z_8) (_0__nrtc Z_8 Y_7)))))
      (a!4 (forall ((X_9 node))
             (=> (distinct X_9 _0__null)
                 (and (not (_0__nrtc X_9 _0__null))
                      (not (_0__nrtc _0__null X_9))))))
      (a!5 (forall ((Z_10 node))
             (=> (and (_0__nrtc u Z_10) (distinct u Z_10)) (_0__nrtc v Z_10)))))
  (and (forall ((X_0 node)) (_0__nrtc X_0 X_0))
       a!1
       a!2
       a!3
       a!4
       (distinct u _0__null)
       (distinct v _0__null)
       (_0__nrtc _0__h u)
       (distinct _0__h u)
       (_0__nrtc u v)
       a!5
       (= _0__i _0__h)
       (= _0__j _0__null))) :init true))
(define-fun transition_0 () Bool (! (let ((a!1 (forall ((U_0 node) (V_1 node))
             (let ((a!1 (and (_0__nrtc U_0 V_1)
                             (not (and (_0__nrtc U_0 _0__i)
                                       (_0__nrtc _0__i V_1)
                                       (distinct _0__i V_1))))))
             (let ((a!2 (= (_1__nrtc U_0 V_1)
                           (or a!1
                               (and (_0__nrtc U_0 _0__i) (_0__nrtc _0__j V_1))))))
               (and (distinct _0__i _0__null)
                    a!2
                    (exists ((K_2 node))
                      (let ((a!1 (forall ((Z_3 node))
                                   (=> (and (_0__nrtc _0__i Z_3)
                                            (distinct _0__i Z_3))
                                       (_0__nrtc K_2 Z_3)))))
                        (and (= K_2 _1__i)
                             (_0__nrtc _0__i K_2)
                             (distinct _0__i K_2)
                             a!1)))
                    (= _1__j _0__i)))))))
  (and a!1 (= _1__h _0__h) (= _1__null _0__null))) :action true))
(define-fun safety-prop () Bool (!(let ((a!1 (forall ((X_1 node) (Y_2 node) (Z_3 node))
             (=> (and (_0__nrtc X_1 Y_2) (_0__nrtc Y_2 Z_3)) (_0__nrtc X_1 Z_3))))
      (a!2 (forall ((X_4 node) (Y_5 node))
             (=> (and (_0__nrtc X_4 Y_5) (_0__nrtc Y_5 X_4)) (= X_4 Y_5))))
      (a!3 (forall ((X_6 node) (Y_7 node) (Z_8 node))
             (=> (and (_0__nrtc X_6 Y_7) (_0__nrtc X_6 Z_8))
                 (or (_0__nrtc Y_7 Z_8) (_0__nrtc Z_8 Y_7))))))
  (and (forall ((X_0 node)) (_0__nrtc X_0 X_0))
       a!1
       a!2
       a!3
       (=> (and (_0__nrtc v _0__i) (distinct v _0__i)) (_0__nrtc v u)))) :invar-property 0))
(define-fun invariant_0 () Bool (! (forall ((X_0 node)) (_0__nrtc X_0 X_0)) :invar-property 0))
(define-fun invariant_1 () Bool (! (forall ((X_1 node) (Y_2 node) (Z_3 node))
  (=> (and (_0__nrtc X_1 Y_2) (_0__nrtc Y_2 Z_3)) (_0__nrtc X_1 Z_3))) :invar-property 1))
(define-fun invariant_2 () Bool (! (forall ((X_4 node) (Y_5 node))
  (=> (and (_0__nrtc X_4 Y_5) (_0__nrtc Y_5 X_4)) (= X_4 Y_5))) :invar-property 2))
(define-fun invariant_3 () Bool (! (forall ((X_6 node) (Y_7 node) (Z_8 node))
  (=> (and (_0__nrtc X_6 Y_7) (_0__nrtc X_6 Z_8))
      (or (_0__nrtc Y_7 Z_8) (_0__nrtc Z_8 Y_7)))) :invar-property 3))
(define-fun invariant_4 () Bool (! (=> (and (_0__nrtc v _0__i) (distinct v _0__i)) (_0__nrtc v u)) :invar-property 4))
