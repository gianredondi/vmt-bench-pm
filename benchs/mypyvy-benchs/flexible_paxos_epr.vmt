(declare-sort node 0)
(declare-sort value 0)
(declare-sort quorum_1 0)
(declare-sort quorum_2 0)
(declare-sort round 0)
(declare-const none round)
(define-fun none.sv () round (! none :rigid true))
(declare-fun le (round round) Bool)
(declare-fun member_1 (node quorum_1) Bool)
(declare-fun member_2 (node quorum_2) Bool)
(declare-fun _0__one_a (round) Bool)
(declare-fun _1__one_a (round) Bool)
(define-fun _0__one_a.sv ((V0 round)) Bool (! (_0__one_a V0) :next _1__one_a))
(declare-fun _0__one_b (node round) Bool)
(declare-fun _1__one_b (node round) Bool)
(define-fun _0__one_b.sv ((V0 node) (V1 round)) Bool (! (_0__one_b V0 V1) :next _1__one_b))
(declare-fun _0__left_round (node round) Bool)
(declare-fun _1__left_round (node round) Bool)
(define-fun _0__left_round.sv ((V0 node) (V1 round)) Bool (! (_0__left_round V0 V1) :next _1__left_round))
(declare-fun _0__proposal (round value) Bool)
(declare-fun _1__proposal (round value) Bool)
(define-fun _0__proposal.sv ((V0 round) (V1 value)) Bool (! (_0__proposal V0 V1) :next _1__proposal))
(declare-fun _0__vote (node round value) Bool)
(declare-fun _1__vote (node round value) Bool)
(define-fun _0__vote.sv ((V0 node) (V1 round) (V2 value)) Bool (! (_0__vote V0 V1 V2) :next _1__vote))
(declare-fun _0__decision (round value) Bool)
(declare-fun _1__decision (round value) Bool)
(define-fun _0__decision.sv ((V0 round) (V1 value)) Bool (! (_0__decision V0 V1) :next _1__decision))
(define-fun axiom_0 () Bool (! (forall ((X_0 round)) (le X_0 X_0)) :axiom true))
(define-fun axiom_1 () Bool (! (forall ((X_1 round) (Y_2 round) (Z_3 round))
  (=> (and (le X_1 Y_2) (le Y_2 Z_3)) (le X_1 Z_3))) :axiom true))
(define-fun axiom_2 () Bool (! (forall ((X_4 round) (Y_5 round))
  (=> (and (le X_4 Y_5) (le Y_5 X_4)) (= X_4 Y_5))) :axiom true))
(define-fun axiom_3 () Bool (! (forall ((X_6 round) (Y_7 round)) (or (le X_6 Y_7) (le Y_7 X_6))) :axiom true))
(define-fun axiom_4 () Bool (! (forall ((Q1_8 quorum_1) (Q2_9 quorum_2))
  (exists ((N_10 node)) (and (member_1 N_10 Q1_8) (member_2 N_10 Q2_9)))) :axiom true))
(define-fun init () Bool (! (and (forall ((R_0 round)) (not (_0__one_a R_0)))
     (forall ((N_1 node) (R_2 round)) (not (_0__one_b N_1 R_2)))
     (forall ((N_3 node) (R_4 round)) (not (_0__left_round N_3 R_4)))
     (forall ((R_5 round) (V_6 value)) (not (_0__proposal R_5 V_6)))
     (forall ((N_7 node) (R_8 round) (V_9 value)) (not (_0__vote N_7 R_8 V_9)))
     (forall ((R_10 round) (V_11 value)) (not (_0__decision R_10 V_11)))) :init true))
(define-fun transition_0 () Bool (! (exists ((r_0 round))
  (let ((a!1 (forall ((R_1 round))
               (= (_1__one_a R_1) (or (_0__one_a R_1) (= R_1 r_0))))))
    (and (distinct r_0 none)
         a!1
         (forall ((x0_2 node) (x1_3 round))
           (= (_1__one_b x0_2 x1_3) (_0__one_b x0_2 x1_3)))
         (forall ((x0_4 node) (x1_5 round))
           (= (_1__left_round x0_4 x1_5) (_0__left_round x0_4 x1_5)))
         (forall ((x0_6 round) (x1_7 value))
           (= (_1__proposal x0_6 x1_7) (_0__proposal x0_6 x1_7)))
         (forall ((x0_8 node) (x1_9 round) (x2_10 value))
           (= (_1__vote x0_8 x1_9 x2_10) (_0__vote x0_8 x1_9 x2_10)))
         (forall ((x0_11 round) (x1_12 value))
           (= (_1__decision x0_11 x1_12) (_0__decision x0_11 x1_12)))))) :action true))
(define-fun transition_1 () Bool (! (exists ((n_13 node) (r_14 round))
  (let ((a!1 (forall ((N_15 node) (R_16 round))
               (= (_1__one_b N_15 R_16)
                  (or (_0__one_b N_15 R_16) (and (= N_15 n_13) (= R_16 r_14)))))))
    (and (distinct r_14 none)
         (_0__one_a r_14)
         (not (_0__left_round n_13 r_14))
         a!1
         (forall ((N_17 node) (R_18 round))
           (let ((a!1 (or (_0__left_round N_17 R_18)
                          (and (= N_17 n_13) (not (le r_14 R_18))))))
             (= (_1__left_round N_17 R_18) a!1)))
         (forall ((x0_19 round)) (= (_1__one_a x0_19) (_0__one_a x0_19)))
         (forall ((x0_20 round) (x1_21 value))
           (= (_1__proposal x0_20 x1_21) (_0__proposal x0_20 x1_21)))
         (forall ((x0_22 node) (x1_23 round) (x2_24 value))
           (= (_1__vote x0_22 x1_23 x2_24) (_0__vote x0_22 x1_23 x2_24)))
         (forall ((x0_25 round) (x1_26 value))
           (= (_1__decision x0_25 x1_26) (_0__decision x0_25 x1_26)))))) :action true))
(define-fun transition_2 () Bool (! (exists ((r_27 round) (q_28 quorum_1) (maxr_29 round) (v_30 value))
  (let ((a!1 (exists ((N_36 node))
               (and (member_1 N_36 q_28)
                    (not (le r_27 maxr_29))
                    (_0__vote N_36 maxr_29 v_30))))
        (a!4 (forall ((R_40 round) (V_41 value))
               (= (_1__proposal R_40 V_41)
                  (or (_0__proposal R_40 V_41)
                      (and (= R_40 r_27) (= V_41 v_30)))))))
  (let ((a!2 (and (distinct maxr_29 none)
                  a!1
                  (forall ((N_37 node) (MAXR_38 round) (V_39 value))
                    (let ((a!1 (and (member_1 N_37 q_28)
                                    (not (le r_27 MAXR_38))
                                    (_0__vote N_37 MAXR_38 V_39))))
                      (=> a!1 (le MAXR_38 maxr_29)))))))
  (let ((a!3 (or (and (= maxr_29 none)
                      (forall ((N_33 node) (MAXR_34 round) (V_35 value))
                        (let ((a!1 (and (member_1 N_33 q_28)
                                        (not (le r_27 MAXR_34))
                                        (_0__vote N_33 MAXR_34 V_35))))
                          (not a!1))))
                 a!2)))
    (and (distinct r_27 none)
         (forall ((V_31 value)) (not (_0__proposal r_27 V_31)))
         (forall ((N_32 node)) (=> (member_1 N_32 q_28) (_0__one_b N_32 r_27)))
         a!3
         a!4
         (forall ((x0_42 round)) (= (_1__one_a x0_42) (_0__one_a x0_42)))
         (forall ((x0_43 node) (x1_44 round))
           (= (_1__one_b x0_43 x1_44) (_0__one_b x0_43 x1_44)))
         (forall ((x0_45 node) (x1_46 round))
           (= (_1__left_round x0_45 x1_46) (_0__left_round x0_45 x1_46)))
         (forall ((x0_47 node) (x1_48 round) (x2_49 value))
           (= (_1__vote x0_47 x1_48 x2_49) (_0__vote x0_47 x1_48 x2_49)))
         (forall ((x0_50 round) (x1_51 value))
           (= (_1__decision x0_50 x1_51) (_0__decision x0_50 x1_51)))))))) :action true))
(define-fun transition_3 () Bool (! (exists ((n_52 node) (v_53 value) (r_54 round))
  (let ((a!1 (forall ((N_55 node) (R_56 round) (V_57 value))
               (= (_1__vote N_55 R_56 V_57)
                  (or (_0__vote N_55 R_56 V_57)
                      (and (= N_55 n_52) (= R_56 r_54) (= V_57 v_53)))))))
    (and (distinct r_54 none)
         (not (_0__left_round n_52 r_54))
         (_0__proposal r_54 v_53)
         a!1
         (forall ((x0_58 round)) (= (_1__one_a x0_58) (_0__one_a x0_58)))
         (forall ((x0_59 node) (x1_60 round))
           (= (_1__one_b x0_59 x1_60) (_0__one_b x0_59 x1_60)))
         (forall ((x0_61 node) (x1_62 round))
           (= (_1__left_round x0_61 x1_62) (_0__left_round x0_61 x1_62)))
         (forall ((x0_63 round) (x1_64 value))
           (= (_1__proposal x0_63 x1_64) (_0__proposal x0_63 x1_64)))
         (forall ((x0_65 round) (x1_66 value))
           (= (_1__decision x0_65 x1_66) (_0__decision x0_65 x1_66)))))) :action true))
(define-fun transition_4 () Bool (! (exists ((r_67 round) (v_68 value) (q_69 quorum_2))
  (let ((a!1 (forall ((R_71 round) (V_72 value))
               (= (_1__decision R_71 V_72)
                  (or (_0__decision R_71 V_72)
                      (and (= R_71 r_67) (= V_72 v_68)))))))
    (and (distinct r_67 none)
         (forall ((N_70 node))
           (=> (member_2 N_70 q_69) (_0__vote N_70 r_67 v_68)))
         a!1
         (forall ((x0_73 round)) (= (_1__one_a x0_73) (_0__one_a x0_73)))
         (forall ((x0_74 node) (x1_75 round))
           (= (_1__one_b x0_74 x1_75) (_0__one_b x0_74 x1_75)))
         (forall ((x0_76 node) (x1_77 round))
           (= (_1__left_round x0_76 x1_77) (_0__left_round x0_76 x1_77)))
         (forall ((x0_78 round) (x1_79 value))
           (= (_1__proposal x0_78 x1_79) (_0__proposal x0_78 x1_79)))
         (forall ((x0_80 node) (x1_81 round) (x2_82 value))
           (= (_1__vote x0_80 x1_81 x2_82) (_0__vote x0_80 x1_81 x2_82)))))) :action true))
(define-fun safety-prop () Bool (!(let ((a!1 (forall ((R1_0 round) (V1_1 value) (R2_2 round) (V2_3 value))
             (=> (and (_0__decision R1_0 V1_1) (_0__decision R2_2 V2_3))
                 (= V1_1 V2_3)))))
  (and a!1)) :invar-property 0))
(define-fun invariant_0 () Bool (! (forall ((R1_0 round) (V1_1 value) (R2_2 round) (V2_3 value))
  (=> (and (_0__decision R1_0 V1_1) (_0__decision R2_2 V2_3)) (= V1_1 V2_3))) :invar-property 0))
(define-fun invariant_1 () Bool (! (forall ((R_4 round) (V1_5 value) (V2_6 value))
  (=> (and (_0__proposal R_4 V1_5) (_0__proposal R_4 V2_6)) (= V1_5 V2_6))) :invar-property 1))
(define-fun invariant_2 () Bool (! (forall ((N_7 node) (R_8 round) (V_9 value))
  (=> (_0__vote N_7 R_8 V_9) (_0__proposal R_8 V_9))) :invar-property 2))
(define-fun invariant_3 () Bool (! (forall ((R_10 round) (V_11 value))
  (let ((a!1 (exists ((Q_12 quorum_2))
               (forall ((N_13 node))
                 (=> (member_2 N_13 Q_12) (_0__vote N_13 R_10 V_11))))))
    (=> (_0__decision R_10 V_11) a!1))) :invar-property 3))
(define-fun invariant_4 () Bool (! (forall ((N_14 node) (R2_15 round) (R1_16 round))
  (=> (and (_0__one_b N_14 R2_15) (not (le R2_15 R1_16)))
      (_0__left_round N_14 R1_16))) :invar-property 4))
(define-fun invariant_5 () Bool (! (forall ((R1_17 round)
         (R2_18 round)
         (V1_19 value)
         (V2_20 value)
         (Q_21 quorum_2))
  (let ((a!1 (exists ((N_22 node))
               (and (member_2 N_22 Q_21)
                    (_0__left_round N_22 R1_17)
                    (not (_0__vote N_22 R1_17 V1_19))))))
    (=> (and (not (le R2_18 R1_17))
             (_0__proposal R2_18 V2_20)
             (distinct V1_19 V2_20))
        a!1))) :invar-property 5))
