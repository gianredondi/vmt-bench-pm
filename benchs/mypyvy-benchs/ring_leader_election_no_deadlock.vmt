(declare-sort node 0)
(declare-sort id 0)
(declare-fun le (id id) Bool)
(declare-fun btw (node node node) Bool)
(declare-fun _0__leader (node) Bool)
(declare-fun _1__leader (node) Bool)
(define-fun _0__leader.sv ((V0 node)) Bool (! (_0__leader V0) :next _1__leader))
(declare-fun _0__pending (id node) Bool)
(declare-fun _1__pending (id node) Bool)
(define-fun _0__pending.sv ((V0 id) (V1 node)) Bool (! (_0__pending V0 V1) :next _1__pending))
(declare-fun _0__sent (node) Bool)
(declare-fun _1__sent (node) Bool)
(define-fun _0__sent.sv ((V0 node)) Bool (! (_0__sent V0) :next _1__sent))
(define-fun axiom_0 () Bool (! (forall ((X_0 id)) (le X_0 X_0)) :axiom true))
(define-fun axiom_1 () Bool (! (forall ((X_1 id) (Y_2 id) (Z_3 id))
  (=> (and (le X_1 Y_2) (le Y_2 Z_3)) (le X_1 Z_3))) :axiom true))
(define-fun axiom_2 () Bool (! (forall ((X_4 id) (Y_5 id)) (=> (and (le X_4 Y_5) (le Y_5 X_4)) (= X_4 Y_5))) :axiom true))
(define-fun axiom_3 () Bool (! (forall ((X_6 id) (Y_7 id)) (or (le X_6 Y_7) (le Y_7 X_6))) :axiom true))
(define-fun axiom_4 () Bool (! (forall ((W_8 node) (X_9 node) (Y_10 node) (Z_11 node))
  (=> (and (btw W_8 X_9 Y_10) (btw W_8 Y_10 Z_11)) (btw W_8 X_9 Z_11))) :axiom true))
(define-fun axiom_5 () Bool (! (forall ((W_12 node) (X_13 node) (Y_14 node))
  (=> (btw W_12 X_13 Y_14) (not (btw W_12 Y_14 X_13)))) :axiom true))
(define-fun axiom_6 () Bool (! (forall ((W_15 node) (X_16 node) (Y_17 node))
  (or (btw W_15 X_16 Y_17)
      (btw W_15 Y_17 X_16)
      (= W_15 X_16)
      (= W_15 Y_17)
      (= X_16 Y_17))) :axiom true))
(define-fun axiom_7 () Bool (! (forall ((X_18 node) (Y_19 node) (Z_20 node))
  (=> (btw X_18 Y_19 Z_20) (btw Y_19 Z_20 X_18))) :axiom true))
(define-fun axiom_8 () Bool (! (forall ((X_21 node) (Y_22 node)) (=> (= (idn X_21) (idn Y_22)) (= X_21 Y_22))) :axiom true))
(define-fun axiom_9 () Bool (! (exists ((N_23 node)) (forall ((M_24 node)) (le (idn M_24) (idn N_23)))) :axiom true))
(define-fun init () Bool (! (and (forall ((N_0 node)) (not (_0__leader N_0)))
     (forall ((V_1 id) (N_2 node)) (not (_0__pending V_1 N_2)))
     (forall ((N_3 node)) (not (_0__sent N_3)))) :init true))
(define-fun transition_0 () Bool (! (exists ((n_0 node) (next_1 node))
  (let ((a!1 (forall ((Z_2 node))
               (=> (and (distinct Z_2 n_0) (distinct Z_2 next_1))
                   (btw n_0 next_1 Z_2))))
        (a!2 (forall ((N_5 node))
               (= (_1__sent N_5) (or (_0__sent N_5) (= N_5 n_0))))))
    (and a!1
         (forall ((V_3 id) (N_4 node))
           (let ((a!1 (or (_0__pending V_3 N_4)
                          (and (= V_3 (idn n_0)) (= N_4 next_1)))))
             (= (_1__pending V_3 N_4) a!1)))
         a!2
         (forall ((x0_6 node)) (= (_1__leader x0_6) (_0__leader x0_6)))))) :action true))
(define-fun transition_1 () Bool (! (exists ((v_7 id) (n_8 node) (next_9 node))
  (let ((a!1 (forall ((Z_10 node))
               (=> (and (distinct Z_10 n_8) (distinct Z_10 next_9))
                   (btw n_8 next_9 Z_10))))
        (a!2 (forall ((N_11 node))
               (= (_1__leader N_11) (or (_0__leader N_11) (= N_11 n_8)))))
        (a!3 (forall ((V_12 id) (N_13 node))
               (=> (not (and (= V_12 v_7) (= N_13 n_8)))
                   (= (_1__pending V_12 N_13) (_0__pending V_12 N_13)))))
        (a!4 (forall ((V_15 id) (N_16 node))
               (let ((a!1 (= (_1__pending V_15 N_16)
                             (or (_0__pending V_15 N_16)
                                 (and (= V_15 v_7) (= N_16 next_9))))))
                 (=> (not (and (= V_15 v_7) (= N_16 n_8))) a!1))))
        (a!5 (forall ((V_17 id) (N_18 node))
               (=> (not (and (= V_17 v_7) (= N_18 n_8)))
                   (= (_1__pending V_17 N_18) (_0__pending V_17 N_18))))))
  (let ((a!6 (and (forall ((N_14 node)) (= (_1__leader N_14) (_0__leader N_14)))
                  (ite (le (idn n_8) v_7) a!4 a!5))))
    (and a!1
         (_0__pending v_7 n_8)
         (ite (= v_7 (idn n_8)) (and a!2 a!3) a!6)
         (forall ((x0_19 node)) (= (_1__sent x0_19) (_0__sent x0_19))))))) :action true))
(define-fun safety-prop () Bool (!(let ((a!1 (forall ((X_0 node) (Y_1 node))
             (=> (and (_0__leader X_0) (_0__leader Y_1)) (= X_0 Y_1))))
      (a!2 (or (exists ((L_2 node)) (_0__leader L_2))
               (exists ((M_3 id) (N_4 node)) (_0__pending M_3 N_4))
               (exists ((N_5 node)) (not (_0__sent N_5))))))
  (and a!1 a!2)) :invar-property 0))
(define-fun invariant_0 () Bool (! (forall ((X_0 node) (Y_1 node))
  (=> (and (_0__leader X_0) (_0__leader Y_1)) (= X_0 Y_1))) :invar-property 0))
(define-fun invariant_1 () Bool (! (or (exists ((L_2 node)) (_0__leader L_2))
    (exists ((M_3 id) (N_4 node)) (_0__pending M_3 N_4))
    (exists ((N_5 node)) (not (_0__sent N_5)))) :invar-property 1))
(define-fun invariant_2 () Bool (! (forall ((L_6 node) (N_7 node)) (=> (_0__leader L_6) (le (idn N_7) (idn L_6)))) :invar-property 2))
(define-fun invariant_3 () Bool (! (forall ((L_8 node) (N_9 node))
  (=> (_0__pending (idn L_8) L_8) (le (idn N_9) (idn L_8)))) :invar-property 3))
(define-fun invariant_4 () Bool (! (forall ((S_10 node) (D_11 node) (N_12 node))
  (=> (and (_0__pending (idn S_10) D_11) (btw S_10 N_12 D_11))
      (le (idn N_12) (idn S_10)))) :invar-property 4))
(define-fun invariant_5 () Bool (! (exists ((N_13 node))
  (let ((a!1 (or (not (_0__sent N_13))
                 (_0__leader N_13)
                 (exists ((M_15 node)) (_0__pending (idn N_13) M_15)))))
    (and (forall ((X_14 node)) (le (idn X_14) (idn N_13))) a!1))) :invar-property 5))
