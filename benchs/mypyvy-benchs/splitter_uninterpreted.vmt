(declare-sort node 0)
(declare-const n node)
(define-fun n.sv () node (! n :rigid true))
(declare-const m node)
(define-fun m.sv () node (! m :rigid true))
(declare-const _0__x node)
(declare-const _1__x node)
(define-fun _0__x.sv () node (! _0__x :next _1__x))
(declare-const _0__y node)
(declare-const _1__y node)
(define-fun _0__y.sv () node (! _0__y :next _1__y))
(declare-fun le (node node) Bool)
(define-fun axiom_0 () Bool (! (forall ((X_0 node)) (le X_0 X_0)) :axiom true))
(define-fun axiom_1 () Bool (! (forall ((X_1 node) (Y_2 node))
  (=> (and (le X_1 Y_2) (le Y_2 X_1)) (= X_1 Y_2))) :axiom true))
(define-fun axiom_2 () Bool (! (forall ((X_3 node) (Y_4 node) (Z_5 node))
  (=> (and (le X_3 Y_4) (le Y_4 Z_5)) (le X_3 Z_5))) :axiom true))
(define-fun axiom_3 () Bool (! (forall ((X_6 node) (Y_7 node) (Z_8 node))
  (=> (and (le X_6 Y_7) (le X_6 Y_7)) (or (le Y_7 Z_8) (le Z_8 Y_7)))) :axiom true))
(define-fun axiom_4 () Bool (! (and (le m n) (distinct m n)) :axiom true))
(define-fun init () Bool (! (and (forall ((Z_0 node)) (le _0__x Z_0)) (= _0__y m)) :init true))
(define-fun transition_0 () Bool (! (let ((a!1 (forall ((Z_0 node))
             (=> (and (le _0__x Z_0) (le Z_0 _1__x))
                 (or (= Z_0 _0__x) (= Z_0 _1__x)))))
      (a!2 (forall ((Z_1 node))
             (=> (and (le _0__y Z_1) (le Z_1 _1__y))
                 (or (= Z_1 _0__y) (= Z_1 _1__y))))))
  (and (le _0__x n)
       (distinct _0__x n)
       (le _0__x _1__x)
       (distinct _0__x _1__x)
       a!1
       (ite (and (le m _1__x) (distinct m _1__x))
            (and (le _0__y _1__y) (distinct _0__y _1__y) a!2)
            (= _1__y _0__y)))) :action true))
(define-fun safety-prop () Bool (!(and (=> (le n _0__x) (= _0__y n))) :invar-property 0))
(define-fun invariant_0 () Bool (! (=> (le n _0__x) (= _0__y n)) :invar-property 0))
(define-fun invariant_1 () Bool (! (ite (le _0__x m) (= _0__y m) (= _0__y _0__x)) :invar-property 1))
