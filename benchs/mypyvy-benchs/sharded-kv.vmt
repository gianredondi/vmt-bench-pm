(declare-sort key 0)
(declare-sort value 0)
(declare-sort node 0)
(declare-fun _0__table (node key value) Bool)
(declare-fun _1__table (node key value) Bool)
(define-fun _0__table.sv ((V0 node) (V1 key) (V2 value)) Bool (! (_0__table V0 V1 V2) :next _1__table))
(declare-fun _0__owner (node key) Bool)
(declare-fun _1__owner (node key) Bool)
(define-fun _0__owner.sv ((V0 node) (V1 key)) Bool (! (_0__owner V0 V1) :next _1__owner))
(declare-fun _0__transfer_msg (node key value) Bool)
(declare-fun _1__transfer_msg (node key value) Bool)
(define-fun _0__transfer_msg.sv ((V0 node) (V1 key) (V2 value)) Bool (! (_0__transfer_msg V0 V1 V2) :next _1__transfer_msg))
(define-fun init () Bool (! (let ((a!1 (forall ((N1_6 node) (K_7 key) (N2_8 node))
             (=> (and (_0__owner N1_6 K_7) (_0__owner N2_8 K_7)) (= N1_6 N2_8)))))
  (and (forall ((N_0 node) (K_1 key) (V_2 value)) (not (_0__table N_0 K_1 V_2)))
       (forall ((N_3 node) (K_4 key) (V_5 value))
         (not (_0__transfer_msg N_3 K_4 V_5)))
       a!1)) :init true))
(define-fun transition_0 () Bool (! (exists ((k_0 key) (v_1 value) (n_old_2 node) (n_new_3 node))
  (forall ((N_4 node) (K_5 key) (V_6 value))
    (let ((a!1 (and (_0__table N_4 K_5 V_6)
                    (not (and (= N_4 n_old_2) (= K_5 k_0) (= V_6 v_1)))))
          (a!2 (and (_0__owner N_4 K_5) (not (and (= N_4 n_old_2) (= K_5 k_0)))))
          (a!3 (= (_1__transfer_msg N_4 K_5 V_6)
                  (or (_0__transfer_msg N_4 K_5 V_6)
                      (and (= N_4 n_new_3) (= K_5 k_0) (= V_6 v_1))))))
      (and (_0__table n_old_2 k_0 v_1)
           (= (_1__table N_4 K_5 V_6) a!1)
           (= (_1__owner N_4 K_5) a!2)
           a!3)))) :action true))
(define-fun transition_1 () Bool (! (exists ((n_7 node) (k_8 key) (v_9 value))
  (forall ((N_10 node) (K_11 key) (V_12 value))
    (let ((a!1 (and (= N_10 n_7) (= K_11 k_8) (= V_12 v_9)))
          (a!2 (= (_1__owner N_10 K_11)
                  (or (_0__owner N_10 K_11) (and (= N_10 n_7) (= K_11 k_8))))))
      (and (_0__transfer_msg n_7 k_8 v_9)
           (= (_1__transfer_msg N_10 K_11 V_12)
              (and (_0__transfer_msg N_10 K_11 V_12) (not a!1)))
           (= (_1__table N_10 K_11 V_12) (or (_0__table N_10 K_11 V_12) a!1))
           a!2)))) :action true))
(define-fun transition_2 () Bool (! (exists ((n_13 node) (k_14 key) (v_15 value))
  (let ((a!1 (forall ((N_16 node) (K_17 key) (V_18 value))
               (let ((a!1 (=> (not (and (= N_16 n_13) (= K_17 k_14)))
                              (= (_1__table N_16 K_17 V_18)
                                 (_0__table N_16 K_17 V_18)))))
                 (and (_0__owner n_13 k_14)
                      a!1
                      (= (_1__table n_13 k_14 V_18) (= V_18 v_15)))))))
    (and a!1
         (forall ((x0_19 node) (x1_20 key))
           (= (_1__owner x0_19 x1_20) (_0__owner x0_19 x1_20)))
         (forall ((x0_21 node) (x1_22 key) (x2_23 value))
           (= (_1__transfer_msg x0_21 x1_22 x2_23)
              (_0__transfer_msg x0_21 x1_22 x2_23)))))) :action true))
(define-fun safety-prop () Bool (!(let ((a!1 (forall ((N1_0 node) (K_1 key) (V1_2 value) (N2_3 node) (V2_4 value))
             (=> (and (_0__table N1_0 K_1 V1_2) (_0__table N2_3 K_1 V2_4))
                 (and (= N1_0 N2_3) (= V1_2 V2_4))))))
  (and a!1)) :invar-property 0))
(define-fun invariant_0 () Bool (! (forall ((N1_0 node) (K_1 key) (V1_2 value) (N2_3 node) (V2_4 value))
  (=> (and (_0__table N1_0 K_1 V1_2) (_0__table N2_3 K_1 V2_4))
      (and (= N1_0 N2_3) (= V1_2 V2_4)))) :invar-property 0))
(define-fun invariant_1 () Bool (! (forall ((N1_5 node) (K_6 key) (N2_7 node))
  (=> (and (_0__owner N1_5 K_6) (_0__owner N2_7 K_6)) (= N1_5 N2_7))) :invar-property 1))
(define-fun invariant_2 () Bool (! (forall ((N_8 node) (K_9 key) (V_10 value))
  (=> (_0__table N_8 K_9 V_10) (_0__owner N_8 K_9))) :invar-property 2))
(define-fun invariant_3 () Bool (! (forall ((N1_11 node) (K_12 key) (V_13 value) (N2_14 node))
  (not (and (_0__transfer_msg N1_11 K_12 V_13) (_0__owner N2_14 K_12)))) :invar-property 3))
(define-fun invariant_4 () Bool (! (forall ((N1_15 node) (K_16 key) (V1_17 value) (N2_18 node) (V2_19 value))
  (=> (and (_0__transfer_msg N1_15 K_16 V1_17)
           (_0__transfer_msg N2_18 K_16 V2_19))
      (and (= N1_15 N2_18) (= V1_17 V2_19)))) :invar-property 4))
