(declare-sort node 0)
(declare-sort id 0)
(declare-fun le (id id) Bool)
(declare-fun btw (node node node) Bool)
(declare-fun _0__leader (node) Bool)
(declare-fun _1__leader (node) Bool)
(define-fun _0__leader.sv ((V0 node)) Bool (! (_0__leader V0) :next _1__leader))
(declare-fun _0__pending (id node) Bool)
(declare-fun _1__pending (id node) Bool)
(define-fun _0__pending.sv ((V0 id) (V1 node)) Bool (! (_0__pending V0 V1) :next _1__pending))
(define-fun axiom_0 () Bool (! (forall ((X_0 id)) (le X_0 X_0)) :axiom true))
(define-fun axiom_1 () Bool (! (forall ((X_1 id) (Y_2 id) (Z_3 id))
  (=> (and (le X_1 Y_2) (le Y_2 Z_3)) (le X_1 Z_3))) :axiom true))
(define-fun axiom_2 () Bool (! (forall ((X_4 id) (Y_5 id)) (=> (and (le X_4 Y_5) (le Y_5 X_4)) (= X_4 Y_5))) :axiom true))
(define-fun axiom_3 () Bool (! (forall ((X_6 id) (Y_7 id)) (or (le X_6 Y_7) (le Y_7 X_6))) :axiom true))
(define-fun axiom_4 () Bool (! (forall ((W_8 node) (X_9 node) (Y_10 node) (Z_11 node))
  (=> (and (btw W_8 X_9 Y_10) (btw W_8 Y_10 Z_11)) (btw W_8 X_9 Z_11))) :axiom true))
(define-fun axiom_5 () Bool (! (forall ((W_12 node) (X_13 node) (Y_14 node))
  (=> (btw W_12 X_13 Y_14) (not (btw W_12 Y_14 X_13)))) :axiom true))
(define-fun axiom_6 () Bool (! (forall ((W_15 node) (X_16 node) (Y_17 node))
  (or (btw W_15 X_16 Y_17)
      (btw W_15 Y_17 X_16)
      (= W_15 X_16)
      (= W_15 Y_17)
      (= X_16 Y_17))) :axiom true))
(define-fun axiom_7 () Bool (! (forall ((X_18 node) (Y_19 node) (Z_20 node))
  (=> (btw X_18 Y_19 Z_20) (btw Y_19 Z_20 X_18))) :axiom true))
(define-fun axiom_8 () Bool (! (forall ((X_21 node) (Y_22 node)) (=> (= (idn X_21) (idn Y_22)) (= X_21 Y_22))) :axiom true))
(define-fun init () Bool (! (and (forall ((N_0 node)) (not (_0__leader N_0)))
     (forall ((V_1 id) (N_2 node)) (not (_0__pending V_1 N_2)))) :init true))
(define-fun transition_0 () Bool (! (exists ((n_0 node) (next_1 node))
  (let ((a!1 (forall ((Z_2 node))
               (=> (and (distinct Z_2 n_0) (distinct Z_2 next_1))
                   (btw n_0 next_1 Z_2)))))
    (and a!1
         (forall ((V_3 id) (N_4 node))
           (let ((a!1 (or (_0__pending V_3 N_4)
                          (and (= V_3 (idn n_0)) (= N_4 next_1)))))
             (= (_1__pending V_3 N_4) a!1)))
         (forall ((x0_5 node)) (= (_1__leader x0_5) (_0__leader x0_5)))))) :action true))
(define-fun transition_1 () Bool (! (exists ((v_6 id) (n_7 node) (next_8 node))
  (let ((a!1 (forall ((Z_9 node))
               (=> (and (distinct Z_9 n_7) (distinct Z_9 next_8))
                   (btw n_7 next_8 Z_9))))
        (a!2 (forall ((N_10 node))
               (= (_1__leader N_10) (or (_0__leader N_10) (= N_10 n_7)))))
        (a!3 (forall ((V_11 id) (N_12 node))
               (=> (not (and (= V_11 v_6) (= N_12 n_7)))
                   (= (_1__pending V_11 N_12) (_0__pending V_11 N_12)))))
        (a!4 (forall ((V_14 id) (N_15 node))
               (let ((a!1 (= (_1__pending V_14 N_15)
                             (or (_0__pending V_14 N_15)
                                 (and (= V_14 v_6) (= N_15 next_8))))))
                 (=> (not (and (= V_14 v_6) (= N_15 n_7))) a!1))))
        (a!5 (forall ((V_16 id) (N_17 node))
               (=> (not (and (= V_16 v_6) (= N_17 n_7)))
                   (= (_1__pending V_16 N_17) (_0__pending V_16 N_17))))))
  (let ((a!6 (and (forall ((N_13 node)) (= (_1__leader N_13) (_0__leader N_13)))
                  (ite (le (idn n_7) v_6) a!4 a!5))))
    (and a!1 (_0__pending v_6 n_7) (ite (= v_6 (idn n_7)) (and a!2 a!3) a!6))))) :action true))
(define-fun safety-prop () Bool (!(let ((a!1 (forall ((X_0 node) (Y_1 node))
             (=> (and (_0__leader X_0) (_0__leader Y_1)) (= X_0 Y_1)))))
  (and a!1)) :invar-property 0))
(define-fun invariant_0 () Bool (! (forall ((X_0 node) (Y_1 node))
  (=> (and (_0__leader X_0) (_0__leader Y_1)) (= X_0 Y_1))) :invar-property 0))
(define-fun invariant_1 () Bool (! (forall ((L_2 node) (N_3 node)) (=> (_0__leader L_2) (le (idn N_3) (idn L_2)))) :invar-property 1))
(define-fun invariant_2 () Bool (! (forall ((L_4 node) (N_5 node))
  (=> (_0__pending (idn L_4) L_4) (le (idn N_5) (idn L_4)))) :invar-property 2))
(define-fun invariant_3 () Bool (! (forall ((S_6 node) (D_7 node) (N_8 node))
  (=> (and (_0__pending (idn S_6) D_7) (btw S_6 N_8 D_7))
      (le (idn N_8) (idn S_6)))) :invar-property 3))
