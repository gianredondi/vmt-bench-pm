(declare-sort node 0)
(declare-const tail node)
(define-fun tail.sv () node (! tail :rigid true))
(declare-const _0__head node)
(declare-const _1__head node)
(define-fun _0__head.sv () node (! _0__head :next _1__head))
(declare-fun _0__n (node node) Bool)
(declare-fun _1__n (node node) Bool)
(define-fun _0__n.sv ((V0 node) (V1 node)) Bool (! (_0__n V0 V1) :next _1__n))
(declare-fun _0__even (node) Bool)
(declare-fun _1__even (node) Bool)
(define-fun _0__even.sv ((V0 node)) Bool (! (_0__even V0) :next _1__even))
(define-fun init () Bool (! (and (= _0__head tail)
     (forall ((X_0 node) (Y_1 node)) (not (_0__n X_0 Y_1)))
     (forall ((X_2 node)) (= (_0__even X_2) (= X_2 tail)))) :init true))
(define-fun transition_0 () Bool (! (exists ((a_0 node) (b_1 node))
  (let ((a!1 (forall ((X_2 node))
               (and (not (_0__n a_0 X_2))
                    (not (_0__n X_2 a_0))
                    (distinct a_0 tail)
                    (distinct a_0 _0__head))))
        (a!2 (forall ((X_3 node))
               (and (not (_0__n b_1 X_3))
                    (not (_0__n X_3 b_1))
                    (distinct b_1 tail)
                    (distinct b_1 _0__head))))
        (a!3 (forall ((X_4 node) (Y_5 node))
               (= (_1__n X_4 Y_5)
                  (or (_0__n X_4 Y_5)
                      (and (= X_4 a_0) (= Y_5 b_1))
                      (and (= X_4 b_1) (= Y_5 _0__head))))))
        (a!4 (forall ((X_6 node))
               (= (_1__even X_6)
                  (or (and (_0__even X_6) (distinct X_6 a_0) (distinct X_6 b_1))
                      (= X_6 a_0))))))
    (and a!1 a!2 (distinct a_0 b_1) (= _1__head a_0) a!3 a!4))) :action true))
(define-fun transition_1 () Bool (! (exists ((a_7 node) (b_8 node))
  (let ((a!1 (forall ((X_9 node) (Y_10 node))
               (= (_1__n X_9 Y_10)
                  (and (_0__n X_9 Y_10)
                       (distinct X_9 _0__head)
                       (distinct X_9 a_7))))))
    (and (_0__n _0__head a_7)
         (_0__n a_7 b_8)
         (= _1__head b_8)
         a!1
         (forall ((x0_11 node)) (= (_1__even x0_11) (_0__even x0_11)))))) :action true))
(define-fun safety-prop () Bool (!(and (not (_0__n _0__head tail))) :invar-property 0))
(define-fun invariant_0 () Bool (! (not (_0__n _0__head tail)) :invar-property 0))
(define-fun invariant_1 () Bool (! (_0__even _0__head) :invar-property 1))
(define-fun invariant_2 () Bool (! (_0__even tail) :invar-property 2))
(define-fun invariant_3 () Bool (! (forall ((X_0 node) (Y_1 node))
  (=> (_0__n X_0 Y_1) (= (_0__even X_0) (not (_0__even Y_1))))) :invar-property 3))
