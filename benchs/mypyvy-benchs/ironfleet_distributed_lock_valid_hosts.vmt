(declare-sort host 0)
(declare-sort epoch 0)
(declare-const zero epoch)
(define-fun zero.sv () epoch (! zero :rigid true))
(declare-fun valid (host) Bool)
(declare-fun le (epoch epoch) Bool)
(declare-fun _0__sent_msgs (host epoch) Bool)
(declare-fun _1__sent_msgs (host epoch) Bool)
(define-fun _0__sent_msgs.sv ((V0 host) (V1 epoch)) Bool (! (_0__sent_msgs V0 V1) :next _1__sent_msgs))
(declare-fun _0__holds_lock (host) Bool)
(declare-fun _1__holds_lock (host) Bool)
(define-fun _0__holds_lock.sv ((V0 host)) Bool (! (_0__holds_lock V0) :next _1__holds_lock))
(declare-fun _0__host_epoch (host) epoch)
(declare-fun _1__host_epoch (host) epoch)
(define-fun _0__host_epoch.sv ((V0 host)) epoch (! (_0__host_epoch V0) :next _1__host_epoch))
(define-fun axiom_0 () Bool (! (forall ((X_0 epoch)) (le X_0 X_0)) :axiom true))
(define-fun axiom_1 () Bool (! (forall ((X_1 epoch) (Y_2 epoch) (Z_3 epoch))
  (=> (and (le X_1 Y_2) (le Y_2 Z_3)) (le X_1 Z_3))) :axiom true))
(define-fun axiom_2 () Bool (! (forall ((X_4 epoch) (Y_5 epoch))
  (=> (and (le X_4 Y_5) (le Y_5 X_4)) (= X_4 Y_5))) :axiom true))
(define-fun axiom_3 () Bool (! (forall ((X_6 epoch) (Y_7 epoch)) (or (le X_6 Y_7) (le Y_7 X_6))) :axiom true))
(define-fun axiom_4 () Bool (! (forall ((X_8 epoch)) (le zero X_8)) :axiom true))
(define-fun init () Bool (! (let ((a!1 (exists ((H0_3 host))
             (and (valid H0_3)
                  (forall ((H_4 host))
                    (let ((a!1 (and (= (_0__holds_lock H_4) (= H_4 H0_3))
                                    (= (= (_0__host_epoch H_4) zero)
                                       (distinct H_4 H0_3)))))
                      (=> (valid H_4) a!1)))))))
  (and (forall ((H_0 host) (E_1 epoch)) (not (_0__sent_msgs H_0 E_1)))
       (=> (exists ((H0_2 host)) (valid H0_2)) a!1))) :init true))
(define-fun transition_0 () Bool (! (exists ((h_0 host) (d_1 host) (e_2 epoch))
  (let ((a!1 (forall ((H_3 host))
               (=> (valid H_3)
                   (= (_1__holds_lock H_3)
                      (and (_0__holds_lock H_3) (distinct H_3 h_0)))))))
    (and (valid h_0)
         (valid d_1)
         (_0__holds_lock h_0)
         (not (le e_2 (_0__host_epoch h_0)))
         a!1
         (forall ((D_4 host) (E_5 epoch))
           (let ((a!1 (= (_1__sent_msgs D_4 E_5)
                         (or (_0__sent_msgs D_4 E_5)
                             (and (= D_4 d_1) (= E_5 e_2))))))
             (=> (valid D_4) a!1)))
         (forall ((x0_6 host)) (= (_1__host_epoch x0_6) (_0__host_epoch x0_6)))))) :action true))
(define-fun transition_1 () Bool (! (exists ((h_7 host) (e_8 epoch))
  (let ((a!1 (forall ((H_9 host))
               (=> (valid H_9)
                   (= (_1__holds_lock H_9)
                      (or (_0__holds_lock H_9) (= H_9 h_7))))))
        (a!2 (forall ((H_10 host))
               (=> (valid H_10)
                   (= (_1__host_epoch H_10)
                      (ite (= H_10 h_7) e_8 (_0__host_epoch H_10)))))))
    (and (valid h_7)
         (_0__sent_msgs h_7 e_8)
         (not (le e_8 (_0__host_epoch h_7)))
         a!1
         a!2
         (forall ((x0_11 host) (x1_12 epoch))
           (= (_1__sent_msgs x0_11 x1_12) (_0__sent_msgs x0_11 x1_12)))))) :action true))
(define-fun safety-prop () Bool (!(let ((a!1 (forall ((H1_0 host) (H2_1 host))
             (=> (and (valid H1_0)
                      (valid H2_1)
                      (_0__holds_lock H1_0)
                      (_0__holds_lock H2_1))
                 (= H1_0 H2_1)))))
  (and a!1)) :invar-property 0))
(define-fun invariant_0 () Bool (! (forall ((H1_0 host) (H2_1 host))
  (=> (and (valid H1_0)
           (valid H2_1)
           (_0__holds_lock H1_0)
           (_0__holds_lock H2_1))
      (= H1_0 H2_1))) :invar-property 0))
(define-fun invariant_1 () Bool (! (forall ((D1_2 host) (E1_3 epoch) (D2_4 host) (E2_5 epoch))
  (let ((a!1 (and (valid D1_2)
                  (valid D2_4)
                  (_0__sent_msgs D1_2 E1_3)
                  (not (le E1_3 (_0__host_epoch D1_2)))
                  (_0__sent_msgs D2_4 E2_5)
                  (not (le E2_5 (_0__host_epoch D2_4))))))
    (=> a!1 (and (= D1_2 D2_4) (= E1_3 E2_5))))) :invar-property 1))
(define-fun invariant_2 () Bool (! (forall ((D_6 host) (E_7 epoch) (H_8 host))
  (let ((a!1 (and (valid D_6)
                  (valid H_8)
                  (_0__sent_msgs D_6 E_7)
                  (not (le E_7 (_0__host_epoch D_6))))))
    (=> a!1 (not (_0__holds_lock H_8))))) :invar-property 2))
(define-fun invariant_3 () Bool (! (forall ((H1_9 host) (H2_10 host))
  (=> (and (valid H1_9)
           (valid H2_10)
           (_0__holds_lock H1_9)
           (distinct H1_9 H2_10))
      (not (le (_0__host_epoch H1_9) (_0__host_epoch H2_10))))) :invar-property 3))
(define-fun invariant_4 () Bool (! (forall ((D_11 host) (E_12 epoch) (H_13 host))
  (let ((a!1 (and (valid D_11)
                  (valid H_13)
                  (_0__sent_msgs D_11 E_12)
                  (not (le E_12 (_0__host_epoch D_11))))))
    (=> a!1 (not (le E_12 (_0__host_epoch H_13)))))) :invar-property 4))
