(declare-sort node 0)
(declare-sort lock 0)
(declare-fun _0__lock_msg (node lock) Bool)
(declare-fun _1__lock_msg (node lock) Bool)
(define-fun _0__lock_msg.sv ((V0 node) (V1 lock)) Bool (! (_0__lock_msg V0 V1) :next _1__lock_msg))
(declare-fun _0__grant_msg (node lock) Bool)
(declare-fun _1__grant_msg (node lock) Bool)
(define-fun _0__grant_msg.sv ((V0 node) (V1 lock)) Bool (! (_0__grant_msg V0 V1) :next _1__grant_msg))
(declare-fun _0__unlock_msg (node lock) Bool)
(declare-fun _1__unlock_msg (node lock) Bool)
(define-fun _0__unlock_msg.sv ((V0 node) (V1 lock)) Bool (! (_0__unlock_msg V0 V1) :next _1__unlock_msg))
(declare-fun _0__holds_lock (node lock) Bool)
(declare-fun _1__holds_lock (node lock) Bool)
(define-fun _0__holds_lock.sv ((V0 node) (V1 lock)) Bool (! (_0__holds_lock V0 V1) :next _1__holds_lock))
(declare-fun _0__server_holds_lock (lock) Bool)
(declare-fun _1__server_holds_lock (lock) Bool)
(define-fun _0__server_holds_lock.sv ((V0 lock)) Bool (! (_0__server_holds_lock V0) :next _1__server_holds_lock))
(define-fun init () Bool (! (and (forall ((N_0 node) (L_1 lock)) (not (_0__lock_msg N_0 L_1)))
     (forall ((N_2 node) (L_3 lock)) (not (_0__grant_msg N_2 L_3)))
     (forall ((N_4 node) (L_5 lock)) (not (_0__unlock_msg N_4 L_5)))
     (forall ((N_6 node) (L_7 lock)) (not (_0__holds_lock N_6 L_7)))
     (forall ((L_8 lock)) (_0__server_holds_lock L_8))) :init true))
(define-fun transition_0 () Bool (! (exists ((n_0 node) (l_1 lock))
  (let ((a!1 (forall ((N_2 node) (L_3 lock))
               (= (_1__lock_msg N_2 L_3)
                  (or (_0__lock_msg N_2 L_3) (and (= N_2 n_0) (= L_3 l_1)))))))
    (and a!1
         (forall ((x0_4 node) (x1_5 lock))
           (= (_1__grant_msg x0_4 x1_5) (_0__grant_msg x0_4 x1_5)))
         (forall ((x0_6 node) (x1_7 lock))
           (= (_1__unlock_msg x0_6 x1_7) (_0__unlock_msg x0_6 x1_7)))
         (forall ((x0_8 node) (x1_9 lock))
           (= (_1__holds_lock x0_8 x1_9) (_0__holds_lock x0_8 x1_9)))
         (forall ((x0_10 lock))
           (= (_1__server_holds_lock x0_10) (_0__server_holds_lock x0_10)))))) :action true))
(define-fun transition_1 () Bool (! (exists ((n_11 node) (l_12 lock))
  (let ((a!1 (forall ((L_13 lock) (N_14 node))
               (let ((a!1 (and (_0__lock_msg N_14 L_13)
                               (not (and (= N_14 n_11) (= L_13 l_12)))))
                     (a!2 (= (_1__grant_msg N_14 L_13)
                             (or (_0__grant_msg N_14 L_13)
                                 (and (= N_14 n_11) (= L_13 l_12))))))
                 (and (_0__lock_msg n_11 l_12)
                      (_0__server_holds_lock l_12)
                      (= (_1__server_holds_lock L_13)
                         (and (_0__server_holds_lock L_13) (distinct L_13 l_12)))
                      (= (_1__lock_msg N_14 L_13) a!1)
                      a!2)))))
    (and a!1
         (forall ((x0_15 node) (x1_16 lock))
           (= (_1__unlock_msg x0_15 x1_16) (_0__unlock_msg x0_15 x1_16)))
         (forall ((x0_17 node) (x1_18 lock))
           (= (_1__holds_lock x0_17 x1_18) (_0__holds_lock x0_17 x1_18)))))) :action true))
(define-fun transition_2 () Bool (! (exists ((n_19 node) (l_20 lock))
  (let ((a!1 (forall ((N_21 node) (L_22 lock))
               (let ((a!1 (and (_0__grant_msg N_21 L_22)
                               (not (and (= N_21 n_19) (= L_22 l_20)))))
                     (a!2 (= (_1__holds_lock N_21 L_22)
                             (or (_0__holds_lock N_21 L_22)
                                 (and (= N_21 n_19) (= L_22 l_20))))))
                 (and (_0__grant_msg n_19 l_20)
                      (= (_1__grant_msg N_21 L_22) a!1)
                      a!2)))))
    (and a!1
         (forall ((x0_23 node) (x1_24 lock))
           (= (_1__lock_msg x0_23 x1_24) (_0__lock_msg x0_23 x1_24)))
         (forall ((x0_25 node) (x1_26 lock))
           (= (_1__unlock_msg x0_25 x1_26) (_0__unlock_msg x0_25 x1_26)))
         (forall ((x0_27 lock))
           (= (_1__server_holds_lock x0_27) (_0__server_holds_lock x0_27)))))) :action true))
(define-fun transition_3 () Bool (! (exists ((n_28 node) (l_29 lock))
  (let ((a!1 (forall ((N_30 node) (L_31 lock))
               (let ((a!1 (and (_0__holds_lock N_30 L_31)
                               (not (and (= N_30 n_28) (= L_31 l_29)))))
                     (a!2 (= (_1__unlock_msg N_30 L_31)
                             (or (_0__unlock_msg N_30 L_31)
                                 (and (= N_30 n_28) (= L_31 l_29))))))
                 (and (_0__holds_lock n_28 l_29)
                      (= (_1__holds_lock N_30 L_31) a!1)
                      a!2)))))
    (and a!1
         (forall ((x0_32 node) (x1_33 lock))
           (= (_1__lock_msg x0_32 x1_33) (_0__lock_msg x0_32 x1_33)))
         (forall ((x0_34 node) (x1_35 lock))
           (= (_1__grant_msg x0_34 x1_35) (_0__grant_msg x0_34 x1_35)))
         (forall ((x0_36 lock))
           (= (_1__server_holds_lock x0_36) (_0__server_holds_lock x0_36)))))) :action true))
(define-fun transition_4 () Bool (! (exists ((n_37 node) (l_38 lock))
  (let ((a!1 (forall ((N_39 node) (L_40 lock))
               (let ((a!1 (and (_0__unlock_msg N_39 L_40)
                               (not (and (= N_39 n_37) (= L_40 l_38))))))
                 (and (_0__unlock_msg n_37 l_38)
                      (= (_1__unlock_msg N_39 L_40) a!1)
                      (= (_1__server_holds_lock L_40)
                         (or (_0__server_holds_lock L_40) (= L_40 l_38))))))))
    (and a!1
         (forall ((x0_41 node) (x1_42 lock))
           (= (_1__lock_msg x0_41 x1_42) (_0__lock_msg x0_41 x1_42)))
         (forall ((x0_43 node) (x1_44 lock))
           (= (_1__grant_msg x0_43 x1_44) (_0__grant_msg x0_43 x1_44)))
         (forall ((x0_45 node) (x1_46 lock))
           (= (_1__holds_lock x0_45 x1_46) (_0__holds_lock x0_45 x1_46)))))) :action true))
(define-fun safety-prop () Bool (!(let ((a!1 (forall ((N1_0 node) (L_1 lock) (N2_2 node))
             (=> (and (_0__holds_lock N1_0 L_1) (_0__holds_lock N2_2 L_1))
                 (= N1_0 N2_2)))))
  (and a!1)) :invar-property 0))
(define-fun invariant_0 () Bool (! (forall ((N1_0 node) (L_1 lock) (N2_2 node))
  (=> (and (_0__holds_lock N1_0 L_1) (_0__holds_lock N2_2 L_1)) (= N1_0 N2_2))) :invar-property 0))
(define-fun invariant_1 () Bool (! (forall ((N1_3 node) (L_4 lock) (N2_5 node))
  (=> (and (_0__grant_msg N1_3 L_4) (_0__grant_msg N2_5 L_4)) (= N1_3 N2_5))) :invar-property 1))
(define-fun invariant_2 () Bool (! (forall ((N1_6 node) (L_7 lock) (N2_8 node))
  (=> (and (_0__unlock_msg N1_6 L_7) (_0__unlock_msg N2_8 L_7)) (= N1_6 N2_8))) :invar-property 2))
(define-fun invariant_3 () Bool (! (forall ((N1_9 node) (L_10 lock) (N2_11 node))
  (not (and (_0__holds_lock N1_9 L_10) (_0__grant_msg N2_11 L_10)))) :invar-property 3))
(define-fun invariant_4 () Bool (! (forall ((N1_12 node) (L_13 lock) (N2_14 node))
  (not (and (_0__holds_lock N1_12 L_13) (_0__unlock_msg N2_14 L_13)))) :invar-property 4))
(define-fun invariant_5 () Bool (! (forall ((N1_15 node) (L_16 lock) (N2_17 node))
  (not (and (_0__grant_msg N1_15 L_16) (_0__unlock_msg N2_17 L_16)))) :invar-property 5))
(define-fun invariant_6 () Bool (! (forall ((N_18 node) (L_19 lock))
  (not (and (_0__grant_msg N_18 L_19) (_0__server_holds_lock L_19)))) :invar-property 6))
(define-fun invariant_7 () Bool (! (forall ((N_20 node) (L_21 lock))
  (not (and (_0__holds_lock N_20 L_21) (_0__server_holds_lock L_21)))) :invar-property 7))
(define-fun invariant_8 () Bool (! (forall ((N_22 node) (L_23 lock))
  (not (and (_0__unlock_msg N_22 L_23) (_0__server_holds_lock L_23)))) :invar-property 8))
