(declare-sort node_id 0)
(declare-sort node_state 0)
(declare-const empty node_state)
(define-fun empty.sv () node_state (! empty :rigid true))
(declare-const client node_id)
(define-fun client.sv () node_id (! client :rigid true))
(declare-const head node_id)
(define-fun head.sv () node_id (! head :rigid true))
(declare-const middle node_id)
(define-fun middle.sv () node_id (! middle :rigid true))
(declare-const tail node_id)
(define-fun tail.sv () node_id (! tail :rigid true))
(declare-fun le (node_state node_state) Bool)
(declare-fun _0__msg (node_id node_id node_state) Bool)
(declare-fun _1__msg (node_id node_id node_state) Bool)
(define-fun _0__msg.sv ((V0 node_id) (V1 node_id) (V2 node_state)) Bool (! (_0__msg V0 V1 V2) :next _1__msg))
(declare-fun _0__state (node_id) node_state)
(declare-fun _1__state (node_id) node_state)
(define-fun _0__state.sv ((V0 node_id)) node_state (! (_0__state V0) :next _1__state))
(define-fun axiom_0 () Bool (! (forall ((X_0 node_state)) (le X_0 X_0)) :axiom true))
(define-fun axiom_1 () Bool (! (forall ((X_1 node_state) (Y_2 node_state))
  (=> (and (le X_1 Y_2) (le Y_2 X_1)) (= X_1 Y_2))) :axiom true))
(define-fun axiom_2 () Bool (! (forall ((X_3 node_state) (Y_4 node_state) (Z_5 node_state))
  (=> (and (le X_3 Y_4) (le Y_4 Z_5)) (le X_3 Z_5))) :axiom true))
(define-fun axiom_3 () Bool (! (forall ((X_6 node_state) (Y_7 node_state)) (or (le X_6 Y_7) (le Y_7 X_6))) :axiom true))
(define-fun axiom_4 () Bool (! (forall ((X_8 node_state)) (le empty X_8)) :axiom true))
(define-fun axiom_5 () Bool (! (and (distinct client head) (distinct client middle) (distinct client tail)) :axiom true))
(define-fun axiom_6 () Bool (! (=> (= head tail) (and (= head middle) (= middle tail))) :axiom true))
(define-fun init () Bool (! (and (forall ((X_0 node_id)) (= (_0__state X_0) empty))
     (forall ((X_1 node_id) (Y_2 node_id) (Z_3 node_state))
       (not (_0__msg X_1 Y_2 Z_3)))) :init true))
(define-fun transition_0 () Bool (! (exists ((next_0 node_state))
  (let ((a!1 (forall ((N_1 node_id))
               (=> (distinct N_1 client) (= (_1__state N_1) (_0__state N_1))))))
    (and (le (_0__state client) next_0)
         a!1
         (= (_1__state client) next_0)
         (forall ((x0_2 node_id) (x1_3 node_id) (x2_4 node_state))
           (= (_1__msg x0_2 x1_3 x2_4) (_0__msg x0_2 x1_3 x2_4)))))) :action true))
(define-fun transition_1 () Bool (! (and (forall ((X_5 node_id) (Y_6 node_id) (Z_7 node_state))
       (let ((a!1 (or (_0__msg X_5 Y_6 Z_7)
                      (and (= X_5 client)
                           (= Y_6 head)
                           (= Z_7 (_0__state client))))))
         (= (_1__msg X_5 Y_6 Z_7) a!1)))
     (forall ((x0_8 node_id)) (= (_1__state x0_8) (_0__state x0_8)))) :action true))
(define-fun transition_2 () Bool (! (exists ((recvd_9 node_state))
  (forall ((Z_10 node_state) (X_11 node_id) (Y_12 node_id))
    (let ((a!1 (forall ((N_13 node_id))
                 (=> (distinct N_13 head) (= (_1__state N_13) (_0__state N_13)))))
          (a!2 (and (_0__msg X_11 Y_12 Z_10)
                    (not (and (= X_11 client) (= Y_12 head) (= Z_10 recvd_9))))))
      (and (le (_0__state head) recvd_9)
           (_0__msg client head recvd_9)
           (=> (_0__msg client head Z_10) (le recvd_9 Z_10))
           a!1
           (= (_1__state head) recvd_9)
           (= (_1__msg X_11 Y_12 Z_10) a!2))))) :action true))
(define-fun transition_3 () Bool (! (and (forall ((X_14 node_id) (Y_15 node_id) (Z_16 node_state))
       (let ((a!1 (or (_0__msg X_14 Y_15 Z_16)
                      (and (= X_14 head)
                           (= Y_15 middle)
                           (= Z_16 (_0__state head))))))
         (= (_1__msg X_14 Y_15 Z_16) a!1)))
     (forall ((x0_17 node_id)) (= (_1__state x0_17) (_0__state x0_17)))) :action true))
(define-fun transition_4 () Bool (! (exists ((recvd_18 node_state))
  (forall ((Z_19 node_state) (X_20 node_id) (Y_21 node_id))
    (let ((a!1 (forall ((N_22 node_id))
                 (=> (distinct N_22 middle)
                     (= (_1__state N_22) (_0__state N_22)))))
          (a!2 (and (_0__msg X_20 Y_21 Z_19)
                    (not (and (= X_20 head) (= Y_21 middle) (= Z_19 recvd_18))))))
      (and (le (_0__state middle) recvd_18)
           (_0__msg head middle recvd_18)
           (=> (_0__msg head middle Z_19) (le recvd_18 Z_19))
           a!1
           (= (_1__state middle) recvd_18)
           (= (_1__msg X_20 Y_21 Z_19) a!2))))) :action true))
(define-fun transition_5 () Bool (! (and (forall ((X_23 node_id) (Y_24 node_id) (Z_25 node_state))
       (let ((a!1 (or (_0__msg X_23 Y_24 Z_25)
                      (and (= X_23 middle)
                           (= Y_24 tail)
                           (= Z_25 (_0__state middle))))))
         (= (_1__msg X_23 Y_24 Z_25) a!1)))
     (forall ((x0_26 node_id)) (= (_1__state x0_26) (_0__state x0_26)))) :action true))
(define-fun transition_6 () Bool (! (exists ((recvd_27 node_state))
  (forall ((Z_28 node_state) (X_29 node_id) (Y_30 node_id))
    (let ((a!1 (forall ((N_31 node_id))
                 (=> (distinct N_31 tail) (= (_1__state N_31) (_0__state N_31)))))
          (a!2 (and (_0__msg X_29 Y_30 Z_28)
                    (not (and (= X_29 middle) (= Y_30 tail) (= Z_28 recvd_27))))))
      (and (le (_0__state tail) recvd_27)
           (_0__msg middle tail recvd_27)
           (=> (_0__msg middle tail Z_28) (le recvd_27 Z_28))
           a!1
           (= (_1__state tail) recvd_27)
           (= (_1__state tail) recvd_27)
           (= (_1__msg X_29 Y_30 Z_28) a!2))))) :action true))
(define-fun safety-prop () Bool (! true :invar-property 0))
(define-fun invariant_0 () Bool (! (le (_0__state head) (_0__state client)) :invar-property 0))
(define-fun invariant_1 () Bool (! (le (_0__state middle) (_0__state head)) :invar-property 1))
(define-fun invariant_2 () Bool (! (le (_0__state tail) (_0__state middle)) :invar-property 2))
(define-fun invariant_3 () Bool (! (le (_0__state tail) (_0__state head)) :invar-property 3))
(define-fun invariant_4 () Bool (! (forall ((X_0 node_id) (Y_1 node_id) (Z_2 node_state))
  (=> (_0__msg X_0 Y_1 Z_2) (le Z_2 (_0__state client)))) :invar-property 4))
(define-fun invariant_5 () Bool (! (forall ((Y_3 node_id) (Z_4 node_state))
  (=> (_0__msg client Y_3 Z_4) (le Z_4 (_0__state client)))) :invar-property 5))
(define-fun invariant_6 () Bool (! (forall ((Y_5 node_id) (Z_6 node_state))
  (=> (_0__msg head Y_5 Z_6) (le Z_6 (_0__state head)))) :invar-property 6))
(define-fun invariant_7 () Bool (! (forall ((Y_7 node_id) (Z_8 node_state))
  (=> (_0__msg middle Y_7 Z_8) (le Z_8 (_0__state middle)))) :invar-property 7))
