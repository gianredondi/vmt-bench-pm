(declare-sort node 0)
(declare-const ps node)
(define-fun ps.sv () node (! ps :rigid true))
(declare-fun _0__table (node node) Bool)
(declare-fun _1__table (node node) Bool)
(define-fun _0__table.sv ((V0 node) (V1 node)) Bool (! (_0__table V0 V1) :next _1__table))
(declare-fun _0__pending (node node node) Bool)
(declare-fun _1__pending (node node node) Bool)
(define-fun _0__pending.sv ((V0 node) (V1 node) (V2 node)) Bool (! (_0__pending V0 V1 V2) :next _1__pending))
(define-fun init () Bool (! (and (forall ((N1_0 node) (N2_1 node)) (= (_0__table N1_0 N2_1) (= N1_0 N2_1)))
     (forall ((PD_2 node) (S_3 node) (D_4 node))
       (not (_0__pending PD_2 S_3 D_4)))) :init true))
(define-fun transition_0 () Bool (! (exists ((pd_0 node))
  (let ((a!1 (forall ((PD_1 node) (S_2 node) (D_3 node))
               (= (_1__pending PD_1 S_2 D_3)
                  (or (_0__pending PD_1 S_2 D_3)
                      (and (= PD_1 pd_0) (= S_2 ps) (= D_3 ps)))))))
    (and a!1
         (forall ((x0_4 node) (x1_5 node))
           (= (_1__table x0_4 x1_5) (_0__table x0_4 x1_5)))))) :action true))
(define-fun transition_1 () Bool (! (exists ((pd_6 node) (sw0_7 node) (sw1_8 node))
  (let ((a!1 (forall ((PD_9 node) (S_10 node) (D_11 node))
               (= (_1__pending PD_9 S_10 D_11)
                  (or (_0__pending PD_9 S_10 D_11)
                      (and (= PD_9 pd_6) (= S_10 sw1_8))))))
        (a!2 (forall ((N1_12 node) (N2_13 node))
               (let ((a!1 (forall ((W_14 node))
                            (=> (distinct W_14 sw1_8)
                                (not (_0__table sw1_8 W_14))))))
                 (= (_1__table N1_12 N2_13)
                    (or (_0__table N1_12 N2_13)
                        (and (distinct ps sw1_8)
                             a!1
                             (_0__table N1_12 sw1_8)
                             (_0__table sw0_7 N2_13))))))))
    (and (_0__pending pd_6 sw0_7 sw1_8) a!1 a!2))) :action true))
(define-fun safety-prop () Bool (!(let ((a!1 (forall ((X_1 node) (Y_2 node) (Z_3 node))
             (=> (and (_0__table X_1 Y_2) (_0__table Y_2 Z_3))
                 (_0__table X_1 Z_3))))
      (a!2 (forall ((X_4 node) (Y_5 node))
             (=> (and (_0__table X_4 Y_5) (_0__table Y_5 X_4)) (= X_4 Y_5))))
      (a!3 (forall ((X_6 node) (Y_7 node) (Z_8 node))
             (=> (and (_0__table X_6 Y_7) (_0__table X_6 Z_8))
                 (or (_0__table Y_7 Z_8) (_0__table Z_8 Y_7))))))
  (and (forall ((X_0 node)) (_0__table X_0 X_0)) a!1 a!2 a!3)) :invar-property 0))
(define-fun invariant_0 () Bool (! (forall ((X_0 node)) (_0__table X_0 X_0)) :invar-property 0))
(define-fun invariant_1 () Bool (! (forall ((X_1 node) (Y_2 node) (Z_3 node))
  (=> (and (_0__table X_1 Y_2) (_0__table Y_2 Z_3)) (_0__table X_1 Z_3))) :invar-property 1))
(define-fun invariant_2 () Bool (! (forall ((X_4 node) (Y_5 node))
  (=> (and (_0__table X_4 Y_5) (_0__table Y_5 X_4)) (= X_4 Y_5))) :invar-property 2))
(define-fun invariant_3 () Bool (! (forall ((X_6 node) (Y_7 node) (Z_8 node))
  (=> (and (_0__table X_6 Y_7) (_0__table X_6 Z_8))
      (or (_0__table Y_7 Z_8) (_0__table Z_8 Y_7)))) :invar-property 3))
(define-fun invariant_4 () Bool (! (forall ((PD_9 node) (S_10 node) (D_11 node))
  (=> (and (_0__pending PD_9 S_10 D_11) (distinct ps S_10))
      (exists ((W_12 node)) (and (_0__table S_10 W_12) (distinct W_12 S_10))))) :invar-property 4))
(define-fun invariant_5 () Bool (! (forall ((X_13 node) (Y_14 node))
  (=> (and (_0__table X_13 Y_14) (distinct ps Y_14) (distinct X_13 Y_14))
      (exists ((W_15 node)) (and (_0__table Y_14 W_15) (distinct W_15 Y_14))))) :invar-property 5))
