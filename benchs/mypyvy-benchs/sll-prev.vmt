(declare-sort node 0)
(declare-const _0__h node)
(declare-const _1__h node)
(define-fun _0__h.sv () node (! _0__h :next _1__h))
(declare-const _0__i node)
(declare-const _1__i node)
(define-fun _0__i.sv () node (! _0__i :next _1__i))
(declare-const _0__j node)
(declare-const _1__j node)
(define-fun _0__j.sv () node (! _0__j :next _1__j))
(declare-const _0__null node)
(declare-const _1__null node)
(define-fun _0__null.sv () node (! _0__null :next _1__null))
(declare-const x node)
(define-fun x.sv () node (! x :rigid true))
(declare-fun _0__nrtc (node node) Bool)
(declare-fun _1__nrtc (node node) Bool)
(define-fun _0__nrtc.sv ((V0 node) (V1 node)) Bool (! (_0__nrtc V0 V1) :next _1__nrtc))
(declare-fun _0__n (node node) Bool)
(declare-fun _1__n (node node) Bool)
(define-fun _0__n.sv ((V0 node) (V1 node)) Bool (! (_0__n V0 V1) :next _1__n))
(declare-fun _0__ix () Bool)
(declare-fun _1__ix () Bool)
(define-fun _0__ix.sv () Bool (! _0__ix :next _1__ix))
(declare-fun _0__xh () Bool)
(declare-fun _1__xh () Bool)
(define-fun _0__xh.sv () Bool (! _0__xh :next _1__xh))
(declare-fun _0__inull () Bool)
(declare-fun _1__inull () Bool)
(define-fun _0__inull.sv () Bool (! _0__inull :next _1__inull))
(declare-fun _0__hreachx () Bool)
(declare-fun _1__hreachx () Bool)
(define-fun _0__hreachx.sv () Bool (! _0__hreachx :next _1__hreachx))
(declare-fun _0__ireachx () Bool)
(declare-fun _1__ireachx () Bool)
(define-fun _0__ireachx.sv () Bool (! _0__ireachx :next _1__ireachx))
(declare-fun _0__jnx () Bool)
(declare-fun _1__jnx () Bool)
(define-fun _0__jnx.sv () Bool (! _0__jnx :next _1__jnx))
(define-fun init () Bool (! (let ((a!1 (forall ((X_1 node) (Y_2 node) (Z_3 node))
             (=> (and (_0__nrtc X_1 Y_2) (_0__nrtc Y_2 Z_3)) (_0__nrtc X_1 Z_3))))
      (a!2 (forall ((X_4 node) (Y_5 node))
             (=> (and (_0__nrtc X_4 Y_5) (_0__nrtc Y_5 X_4)) (= X_4 Y_5))))
      (a!3 (forall ((X_6 node) (Y_7 node) (Z_8 node))
             (=> (and (_0__nrtc X_6 Y_7) (_0__nrtc X_6 Z_8))
                 (or (_0__nrtc Y_7 Z_8) (_0__nrtc Z_8 Y_7)))))
      (a!4 (forall ((X_9 node))
             (=> (distinct X_9 _0__null)
                 (and (not (_0__nrtc X_9 _0__null))
                      (not (_0__nrtc _0__null X_9)))))))
  (and (forall ((X_0 node)) (_0__nrtc X_0 X_0))
       a!1
       a!2
       a!3
       a!4
       (forall ((X_10 node)) (=> (_0__nrtc _0__null X_10) (= X_10 _0__null)))
       (= _0__i _0__h)
       (= _0__j _0__null))) :init true))
(define-fun transition_0 () Bool (! (and (distinct _0__i x)
     (distinct _0__i _0__null)
     (= _1__j _0__i)
     (_0__n _0__i _1__i)
     (forall ((x0_0 node) (x1_1 node))
       (= (_1__nrtc x0_0 x1_1) (_0__nrtc x0_0 x1_1)))
     (= _1__h _0__h)
     (= _1__null _0__null)) :action true))
(define-fun safety-prop () Bool (!(let ((a!1 (forall ((X_1 node) (Y_2 node) (Z_3 node))
             (=> (and (_0__nrtc X_1 Y_2) (_0__nrtc Y_2 Z_3)) (_0__nrtc X_1 Z_3))))
      (a!2 (forall ((X_4 node) (Y_5 node))
             (=> (and (_0__nrtc X_4 Y_5) (_0__nrtc Y_5 X_4)) (= X_4 Y_5))))
      (a!3 (forall ((X_6 node) (Y_7 node) (Z_8 node))
             (=> (and (_0__nrtc X_6 Y_7) (_0__nrtc X_6 Z_8))
                 (or (_0__nrtc Y_7 Z_8) (_0__nrtc Z_8 Y_7))))))
  (and (forall ((X_0 node)) (_0__nrtc X_0 X_0))
       a!1
       a!2
       a!3
       (forall ((X_9 node)) (=> (_0__nrtc _0__null X_9) (= X_9 _0__null)))
       (or (and (not _0__ix) (not _0__inull)) (not _0__hreachx) _0__ix)
       (or (not _0__ix) _0__xh _0__jnx))) :invar-property 0))
(define-fun invariant_0 () Bool (! (forall ((X_0 node)) (_0__nrtc X_0 X_0)) :invar-property 0))
(define-fun invariant_1 () Bool (! (forall ((X_1 node) (Y_2 node) (Z_3 node))
  (=> (and (_0__nrtc X_1 Y_2) (_0__nrtc Y_2 Z_3)) (_0__nrtc X_1 Z_3))) :invar-property 1))
(define-fun invariant_2 () Bool (! (forall ((X_4 node) (Y_5 node))
  (=> (and (_0__nrtc X_4 Y_5) (_0__nrtc Y_5 X_4)) (= X_4 Y_5))) :invar-property 2))
(define-fun invariant_3 () Bool (! (forall ((X_6 node) (Y_7 node) (Z_8 node))
  (=> (and (_0__nrtc X_6 Y_7) (_0__nrtc X_6 Z_8))
      (or (_0__nrtc Y_7 Z_8) (_0__nrtc Z_8 Y_7)))) :invar-property 3))
(define-fun invariant_4 () Bool (! (forall ((X_9 node)) (=> (_0__nrtc _0__null X_9) (= X_9 _0__null))) :invar-property 4))
(define-fun invariant_5 () Bool (! (or (and (not _0__ix) (not _0__inull)) (not _0__hreachx) _0__ix) :invar-property 5))
(define-fun invariant_6 () Bool (! (or (not _0__hreachx) _0__ireachx) :invar-property 6))
(define-fun invariant_7 () Bool (! (or (not _0__ix) _0__xh _0__jnx) :invar-property 7))
