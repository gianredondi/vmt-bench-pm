(declare-sort node 0)
(declare-fun internal (node) Bool)
(declare-fun _0__sent (node node) Bool)
(declare-fun _1__sent (node node) Bool)
(define-fun _0__sent.sv ((V0 node) (V1 node)) Bool (! (_0__sent V0 V1) :next _1__sent))
(declare-fun _0__allowed_in (node) Bool)
(declare-fun _1__allowed_in (node) Bool)
(define-fun _0__allowed_in.sv ((V0 node)) Bool (! (_0__allowed_in V0) :next _1__allowed_in))
(define-fun init () Bool (! (and (forall ((S_0 node) (D_1 node)) (not (_0__sent S_0 D_1)))
     (forall ((N_2 node)) (not (_0__allowed_in N_2)))) :init true))
(define-fun transition_0 () Bool (! (exists ((src_0 node) (dst_1 node))
  (let ((a!1 (forall ((S_2 node) (D_3 node))
               (= (_1__sent S_2 D_3)
                  (or (_0__sent S_2 D_3) (and (= S_2 src_0) (= D_3 dst_1))))))
        (a!2 (forall ((N_4 node))
               (= (_1__allowed_in N_4) (or (_0__allowed_in N_4) (= N_4 dst_1))))))
    (and (internal src_0) (not (internal dst_1)) a!1 a!2))) :action true))
(define-fun transition_1 () Bool (! (exists ((src_5 node) (dst_6 node))
  (let ((a!1 (forall ((S_7 node) (D_8 node))
               (= (_1__sent S_7 D_8)
                  (or (_0__sent S_7 D_8) (and (= S_7 src_5) (= D_8 dst_6)))))))
    (and (not (internal src_5))
         (internal dst_6)
         (_0__allowed_in src_5)
         a!1
         (forall ((x0_9 node)) (= (_1__allowed_in x0_9) (_0__allowed_in x0_9)))))) :action true))
(define-fun safety-prop () Bool (!(let ((a!1 (forall ((S_0 node) (D_1 node))
             (=> (and (_0__sent S_0 D_1) (internal D_1))
                 (exists ((I_2 node)) (and (internal I_2) (_0__sent I_2 S_0)))))))
  (and a!1)) :invar-property 0))
(define-fun invariant_0 () Bool (! (forall ((S_0 node) (D_1 node))
  (=> (and (_0__sent S_0 D_1) (internal D_1))
      (exists ((I_2 node)) (and (internal I_2) (_0__sent I_2 S_0))))) :invar-property 0))
(define-fun invariant_1 () Bool (! (forall ((D_3 node))
  (=> (_0__allowed_in D_3)
      (exists ((I_4 node)) (and (internal I_4) (_0__sent I_4 D_3))))) :invar-property 1))
