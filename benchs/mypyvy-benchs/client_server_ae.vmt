(declare-sort node 0)
(declare-sort response 0)
(declare-sort request 0)
(declare-fun _match_ (request response) Bool)
(declare-fun _0__request_sent (node request) Bool)
(declare-fun _1__request_sent (node request) Bool)
(define-fun _0__request_sent.sv ((V0 node) (V1 request)) Bool (! (_0__request_sent V0 V1) :next _1__request_sent))
(declare-fun _0__response_sent (node response) Bool)
(declare-fun _1__response_sent (node response) Bool)
(define-fun _0__response_sent.sv ((V0 node) (V1 response)) Bool (! (_0__response_sent V0 V1) :next _1__response_sent))
(declare-fun _0__response_received (node response) Bool)
(declare-fun _1__response_received (node response) Bool)
(define-fun _0__response_received.sv ((V0 node) (V1 response)) Bool (! (_0__response_received V0 V1) :next _1__response_received))
(define-fun init () Bool (! (and (forall ((N_0 node) (R_1 request)) (not (_0__request_sent N_0 R_1)))
     (forall ((N_2 node) (P_3 response)) (not (_0__response_sent N_2 P_3)))
     (forall ((N_4 node) (P_5 response)) (not (_0__response_received N_4 P_5)))) :init true))
(define-fun transition_0 () Bool (! (exists ((n_0 node) (r_1 request))
  (let ((a!1 (forall ((N_2 node) (R_3 request))
               (= (_1__request_sent N_2 R_3)
                  (or (_0__request_sent N_2 R_3) (and (= N_2 n_0) (= R_3 r_1)))))))
    (and a!1
         (forall ((x0_4 node) (x1_5 response))
           (= (_1__response_sent x0_4 x1_5) (_0__response_sent x0_4 x1_5)))
         (forall ((x0_6 node) (x1_7 response))
           (= (_1__response_received x0_6 x1_7)
              (_0__response_received x0_6 x1_7)))))) :action true))
(define-fun transition_1 () Bool (! (exists ((n_8 node) (r_9 request) (p_10 response))
  (let ((a!1 (forall ((N_11 node) (P_12 response))
               (= (_1__response_sent N_11 P_12)
                  (or (_0__response_sent N_11 P_12)
                      (and (= N_11 n_8) (= P_12 p_10)))))))
    (and (_0__request_sent n_8 r_9)
         (_match_ r_9 p_10)
         a!1
         (forall ((x0_13 node) (x1_14 request))
           (= (_1__request_sent x0_13 x1_14) (_0__request_sent x0_13 x1_14)))
         (forall ((x0_15 node) (x1_16 response))
           (= (_1__response_received x0_15 x1_16)
              (_0__response_received x0_15 x1_16)))))) :action true))
(define-fun transition_2 () Bool (! (exists ((n_17 node) (p_18 response))
  (let ((a!1 (forall ((N_19 node) (P_20 response))
               (= (_1__response_received N_19 P_20)
                  (or (_0__response_received N_19 P_20)
                      (and (= N_19 n_17) (= P_20 p_18)))))))
    (and (_0__response_sent n_17 p_18)
         a!1
         (forall ((x0_21 node) (x1_22 request))
           (= (_1__request_sent x0_21 x1_22) (_0__request_sent x0_21 x1_22)))
         (forall ((x0_23 node) (x1_24 response))
           (= (_1__response_sent x0_23 x1_24) (_0__response_sent x0_23 x1_24)))))) :action true))
(define-fun safety-prop () Bool (!(let ((a!1 (forall ((N_0 node) (P_1 response))
             (=> (_0__response_received N_0 P_1)
                 (exists ((R_2 request))
                   (and (_0__request_sent N_0 R_2) (_match_ R_2 P_1)))))))
  (and a!1)) :invar-property 0))
(define-fun invariant_0 () Bool (! (forall ((N_0 node) (P_1 response))
  (=> (_0__response_received N_0 P_1)
      (exists ((R_2 request)) (and (_0__request_sent N_0 R_2) (_match_ R_2 P_1))))) :invar-property 0))
(define-fun invariant_1 () Bool (! (forall ((N_3 node) (P_4 response))
  (=> (_0__response_sent N_3 P_4)
      (exists ((R_5 request)) (and (_0__request_sent N_3 R_5) (_match_ R_5 P_4))))) :invar-property 1))
