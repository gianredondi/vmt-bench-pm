(declare-sort proc 0)
(declare-sort loc 0)
(declare-const a1 loc)
(define-fun a1.sv () loc (! a1 :rigid true))
(declare-const a2 loc)
(define-fun a2.sv () loc (! a2 :rigid true))
(declare-const a3 loc)
(define-fun a3.sv () loc (! a3 :rigid true))
(declare-const a4 loc)
(define-fun a4.sv () loc (! a4 :rigid true))
(declare-const cs loc)
(define-fun cs.sv () loc (! cs :rigid true))
(declare-const a5 loc)
(define-fun a5.sv () loc (! a5 :rigid true))
(declare-const _0__turn proc)
(declare-const _1__turn proc)
(define-fun _0__turn.sv () proc (! _0__turn :next _1__turn))
(declare-fun _0__flag (proc) Bool)
(declare-fun _1__flag (proc) Bool)
(define-fun _0__flag.sv ((V0 proc)) Bool (! (_0__flag V0) :next _1__flag))
(declare-fun _0__pc (proc) loc)
(declare-fun _1__pc (proc) loc)
(define-fun _0__pc.sv ((V0 proc)) loc (! (_0__pc V0) :next _1__pc))
(define-fun axiom_0 () Bool (! (forall ((x_0 proc))
  (exists ((y_1 proc))
    (and (distinct x_0 y_1)
         (forall ((z_2 proc)) (=> (distinct z_2 y_1) (= z_2 x_0)))))) :axiom true))
(define-fun axiom_1 () Bool (! (distinct a1 a2 a3 a4 cs a5) :axiom true))
(define-fun axiom_2 () Bool (! (forall ((L_3 loc))
  (or (= L_3 a1) (= L_3 a2) (= L_3 a3) (= L_3 a4) (= L_3 cs) (= L_3 a5))) :axiom true))
(define-fun init () Bool (! (and (forall ((P_0 proc)) (= (_0__flag P_0) false))
     (forall ((P_1 proc)) (= (_0__pc P_1) a1))) :init true))
(define-fun transition_0 () Bool (! (exists ((p_0 proc) (other_1 proc))
  (and (distinct p_0 other_1)
       (= (_0__pc p_0) a1)
       (= (_1__pc p_0) a2)
       (= (_1__pc other_1) (_0__pc other_1))
       (forall ((x0_2 proc)) (= (_1__flag x0_2) (_0__flag x0_2)))
       (= _1__turn _0__turn))) :action true))
(define-fun transition_1 () Bool (! (exists ((p_3 proc) (other_4 proc))
  (and (distinct p_3 other_4)
       (= (_0__pc p_3) a2)
       (= (_1__pc p_3) a3)
       (= (_1__pc other_4) (_0__pc other_4))
       (_1__flag p_3)
       (= (_1__flag other_4) (_0__flag other_4))
       (= _1__turn _0__turn))) :action true))
(define-fun transition_2 () Bool (! (exists ((p_5 proc) (other_6 proc))
  (and (distinct p_5 other_6)
       (= (_0__pc p_5) a3)
       (= (_1__pc p_5) a4)
       (= (_1__pc other_6) (_0__pc other_6))
       (= _1__turn other_6)
       (forall ((x0_7 proc)) (= (_1__flag x0_7) (_0__flag x0_7))))) :action true))
(define-fun transition_3 () Bool (! (exists ((p_8 proc) (other_9 proc))
  (and (distinct p_8 other_9)
       (= (_0__pc p_8) a4)
       (or (not (_0__flag other_9)) (= _0__turn p_8))
       (= (_1__pc p_8) cs)
       (= (_1__pc other_9) (_0__pc other_9))
       (forall ((x0_10 proc)) (= (_1__flag x0_10) (_0__flag x0_10)))
       (= _1__turn _0__turn))) :action true))
(define-fun transition_4 () Bool (! (exists ((p_11 proc) (other_12 proc))
  (and (distinct p_11 other_12)
       (= (_0__pc p_11) cs)
       (= (_1__pc p_11) a5)
       (= (_1__pc other_12) (_0__pc other_12))
       (forall ((x0_13 proc)) (= (_1__flag x0_13) (_0__flag x0_13)))
       (= _1__turn _0__turn))) :action true))
(define-fun transition_5 () Bool (! (exists ((p_14 proc) (other_15 proc))
  (and (distinct p_14 other_15)
       (= (_0__pc p_14) a5)
       (= (_1__pc p_14) a1)
       (= (_1__pc other_15) (_0__pc other_15))
       (= (_1__flag p_14) false)
       (= (_1__flag other_15) (_0__flag other_15))
       (= _1__turn _0__turn))) :action true))
(define-fun safety-prop () Bool (!(let ((a!1 (forall ((P_0 proc) (Q_1 proc))
             (=> (and (= (_0__pc P_0) cs) (= (_0__pc Q_1) cs)) (= P_0 Q_1)))))
  (and a!1)) :invar-property 0))
(define-fun invariant_0 () Bool (! (forall ((P_0 proc) (Q_1 proc))
  (=> (and (= (_0__pc P_0) cs) (= (_0__pc Q_1) cs)) (= P_0 Q_1))) :invar-property 0))
(define-fun invariant_1 () Bool (! (forall ((P_2 proc))
  (=> (or (= (_0__pc P_2) a3)
          (= (_0__pc P_2) a4)
          (= (_0__pc P_2) cs)
          (= (_0__pc P_2) a5))
      (_0__flag P_2))) :invar-property 1))
(define-fun invariant_2 () Bool (! (forall ((P_3 proc) (Q_4 proc))
  (let ((a!1 (and (or (= (_0__pc P_3) a4)
                      (= (_0__pc P_3) cs)
                      (= (_0__pc P_3) a5))
                  (= _0__turn P_3)
                  (distinct P_3 Q_4))))
    (=> a!1 (= (_0__pc Q_4) a4)))) :invar-property 2))
