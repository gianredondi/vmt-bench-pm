(declare-sort node 0)
(declare-fun le (node node) Bool)
(declare-fun btw (node node node) Bool)
(declare-fun _0__leader (node) Bool)
(declare-fun _1__leader (node) Bool)
(define-fun _0__leader.sv ((V0 node)) Bool (! (_0__leader V0) :next _1__leader))
(declare-fun _0__pending (node node) Bool)
(declare-fun _1__pending (node node) Bool)
(define-fun _0__pending.sv ((V0 node) (V1 node)) Bool (! (_0__pending V0 V1) :next _1__pending))
(define-fun axiom_0 () Bool (! (forall ((X_0 node)) (le X_0 X_0)) :axiom true))
(define-fun axiom_1 () Bool (! (forall ((X_1 node) (Y_2 node) (Z_3 node))
  (=> (and (le X_1 Y_2) (le Y_2 Z_3)) (le X_1 Z_3))) :axiom true))
(define-fun axiom_2 () Bool (! (forall ((X_4 node) (Y_5 node))
  (=> (and (le X_4 Y_5) (le Y_5 X_4)) (= X_4 Y_5))) :axiom true))
(define-fun axiom_3 () Bool (! (forall ((X_6 node) (Y_7 node)) (or (le X_6 Y_7) (le Y_7 X_6))) :axiom true))
(define-fun axiom_4 () Bool (! (forall ((W_8 node) (X_9 node) (Y_10 node) (Z_11 node))
  (=> (and (btw W_8 X_9 Y_10) (btw W_8 Y_10 Z_11)) (btw W_8 X_9 Z_11))) :axiom true))
(define-fun axiom_5 () Bool (! (forall ((W_12 node) (X_13 node) (Y_14 node))
  (=> (btw W_12 X_13 Y_14) (not (btw W_12 Y_14 X_13)))) :axiom true))
(define-fun axiom_6 () Bool (! (forall ((W_15 node) (X_16 node) (Y_17 node))
  (or (btw W_15 X_16 Y_17)
      (btw W_15 Y_17 X_16)
      (= W_15 X_16)
      (= W_15 Y_17)
      (= X_16 Y_17))) :axiom true))
(define-fun axiom_7 () Bool (! (forall ((X_18 node) (Y_19 node) (Z_20 node))
  (=> (btw X_18 Y_19 Z_20) (btw Y_19 Z_20 X_18))) :axiom true))
(define-fun init () Bool (! (and (forall ((N_0 node)) (not (_0__leader N_0)))
     (forall ((N1_1 node) (N2_2 node)) (not (_0__pending N1_1 N2_2)))) :init true))
(define-fun transition_0 () Bool (! (exists ((n_0 node) (next_1 node))
  (let ((a!1 (forall ((Z_2 node))
               (and (distinct n_0 next_1)
                    (=> (and (distinct Z_2 n_0) (distinct Z_2 next_1))
                        (btw n_0 next_1 Z_2)))))
        (a!2 (forall ((N1_3 node) (N2_4 node))
               (= (_1__pending N1_3 N2_4)
                  (or (_0__pending N1_3 N2_4)
                      (and (= N1_3 n_0) (= N2_4 next_1)))))))
    (and a!1 a!2 (forall ((x0_5 node)) (= (_1__leader x0_5) (_0__leader x0_5)))))) :action true))
(define-fun transition_1 () Bool (! (exists ((sender_6 node) (n_7 node) (next_8 node))
  (let ((a!1 (forall ((Z_9 node))
               (and (distinct n_7 next_8)
                    (=> (and (distinct Z_9 n_7) (distinct Z_9 next_8))
                        (btw n_7 next_8 Z_9)))))
        (a!2 (forall ((N_10 node))
               (= (_1__leader N_10) (or (_0__leader N_10) (= N_10 n_7)))))
        (a!3 (forall ((N1_11 node) (N2_12 node))
               (=> (not (and (= N1_11 sender_6) (= N2_12 n_7)))
                   (= (_1__pending N1_11 N2_12) (_0__pending N1_11 N2_12)))))
        (a!4 (forall ((N1_14 node) (N2_15 node))
               (let ((a!1 (= (_1__pending N1_14 N2_15)
                             (or (_0__pending N1_14 N2_15)
                                 (and (= N1_14 sender_6) (= N2_15 next_8))))))
                 (=> (not (and (= N1_14 sender_6) (= N2_15 n_7))) a!1))))
        (a!5 (forall ((N1_16 node) (N2_17 node))
               (=> (not (and (= N1_16 sender_6) (= N2_17 n_7)))
                   (= (_1__pending N1_16 N2_17) (_0__pending N1_16 N2_17))))))
  (let ((a!6 (and (forall ((N_13 node)) (= (_1__leader N_13) (_0__leader N_13)))
                  (=> (le n_7 sender_6) a!4)
                  (=> (not (le n_7 sender_6)) a!5))))
    (and a!1
         (_0__pending sender_6 n_7)
         (=> (= sender_6 n_7) (and a!2 a!3))
         (=> (distinct sender_6 n_7) a!6))))) :action true))
(define-fun safety-prop () Bool (!(let ((a!1 (forall ((L1_0 node) (L2_1 node))
             (=> (and (_0__leader L1_0) (_0__leader L2_1)) (= L1_0 L2_1)))))
  (and a!1)) :invar-property 0))
(define-fun invariant_0 () Bool (! (forall ((L1_0 node) (L2_1 node))
  (=> (and (_0__leader L1_0) (_0__leader L2_1)) (= L1_0 L2_1))) :invar-property 0))
(define-fun invariant_1 () Bool (! (forall ((L_2 node) (N_3 node)) (=> (_0__leader L_2) (le N_3 L_2))) :invar-property 1))
(define-fun invariant_2 () Bool (! (forall ((L_4 node) (N_5 node)) (=> (_0__pending L_4 L_4) (le N_5 L_4))) :invar-property 2))
(define-fun invariant_3 () Bool (! (forall ((S_6 node) (D_7 node) (N_8 node))
  (=> (and (_0__pending S_6 D_7) (btw S_6 N_8 D_7)) (le N_8 S_6))) :invar-property 3))
