(declare-sort node 0)
(declare-sort value 0)
(declare-sort quorum 0)
(declare-sort round 0)
(declare-sort config 0)
(declare-const none value)
(define-fun none.sv () value (! none :rigid true))
(declare-const _0__master_complete round)
(declare-const _1__master_complete round)
(define-fun _0__master_complete.sv () round (! _0__master_complete :next _1__master_complete))
(declare-fun le (round round) Bool)
(declare-fun member (node quorum) Bool)
(declare-fun quorumin (quorum config) Bool)
(declare-fun complete_of (config round) Bool)
(declare-fun _0__one_a (round round) Bool)
(declare-fun _1__one_a (round round) Bool)
(define-fun _0__one_a.sv ((V0 round) (V1 round)) Bool (! (_0__one_a V0 V1) :next _1__one_a))
(declare-fun _0__one_b (node round round) Bool)
(declare-fun _1__one_b (node round round) Bool)
(define-fun _0__one_b.sv ((V0 node) (V1 round) (V2 round)) Bool (! (_0__one_b V0 V1 V2) :next _1__one_b))
(declare-fun _0__left_round (node round) Bool)
(declare-fun _1__left_round (node round) Bool)
(define-fun _0__left_round.sv ((V0 node) (V1 round)) Bool (! (_0__left_round V0 V1) :next _1__left_round))
(declare-fun _0__proposal (round value) Bool)
(declare-fun _1__proposal (round value) Bool)
(define-fun _0__proposal.sv ((V0 round) (V1 value)) Bool (! (_0__proposal V0 V1) :next _1__proposal))
(declare-fun _0__vote (node round value) Bool)
(declare-fun _1__vote (node round value) Bool)
(define-fun _0__vote.sv ((V0 node) (V1 round) (V2 value)) Bool (! (_0__vote V0 V1 V2) :next _1__vote))
(declare-fun _0__decision (round value) Bool)
(declare-fun _1__decision (round value) Bool)
(define-fun _0__decision.sv ((V0 round) (V1 value)) Bool (! (_0__decision V0 V1) :next _1__decision))
(declare-fun _0__configure_round_msg (round config) Bool)
(declare-fun _1__configure_round_msg (round config) Bool)
(define-fun _0__configure_round_msg.sv ((V0 round) (V1 config)) Bool (! (_0__configure_round_msg V0 V1) :next _1__configure_round_msg))
(declare-fun _0__complete_msg (round) Bool)
(declare-fun _1__complete_msg (round) Bool)
(define-fun _0__complete_msg.sv ((V0 round)) Bool (! (_0__complete_msg V0) :next _1__complete_msg))
(declare-fun _0__decision_quorum (round value) quorum)
(declare-fun _1__decision_quorum (round value) quorum)
(define-fun _0__decision_quorum.sv ((V0 round) (V1 value)) quorum (! (_0__decision_quorum V0 V1) :next _1__decision_quorum))
(declare-fun _0__round_config (round) config)
(declare-fun _1__round_config (round) config)
(define-fun _0__round_config.sv ((V0 round)) config (! (_0__round_config V0) :next _1__round_config))
(declare-fun _0__choosable_node (round value quorum) node)
(declare-fun _1__choosable_node (round value quorum) node)
(define-fun _0__choosable_node.sv ((V0 round) (V1 value) (V2 quorum)) node (! (_0__choosable_node V0 V1 V2) :next _1__choosable_node))
(declare-fun _0__quorum_of_round (round) quorum)
(declare-fun _1__quorum_of_round (round) quorum)
(define-fun _0__quorum_of_round.sv ((V0 round)) quorum (! (_0__quorum_of_round V0) :next _1__quorum_of_round))
(define-fun axiom_0 () Bool (! (forall ((X_0 round)) (le X_0 X_0)) :axiom true))
(define-fun axiom_1 () Bool (! (forall ((X_1 round) (Y_2 round) (Z_3 round))
  (=> (and (le X_1 Y_2) (le Y_2 Z_3)) (le X_1 Z_3))) :axiom true))
(define-fun axiom_2 () Bool (! (forall ((X_4 round) (Y_5 round))
  (=> (and (le X_4 Y_5) (le Y_5 X_4)) (= X_4 Y_5))) :axiom true))
(define-fun axiom_3 () Bool (! (forall ((X_6 round) (Y_7 round)) (or (le X_6 Y_7) (le Y_7 X_6))) :axiom true))
(define-fun axiom_4 () Bool (! (forall ((C_8 config) (Q1_9 quorum) (Q2_10 quorum))
  (=> (and (quorumin Q1_9 C_8) (quorumin Q2_10 C_8))
      (exists ((N_11 node)) (and (member N_11 Q1_9) (member N_11 Q2_10))))) :axiom true))
(define-fun axiom_5 () Bool (! (forall ((C_12 config) (R1_13 round) (R2_14 round))
  (=> (and (complete_of C_12 R1_13) (complete_of C_12 R2_14)) (= R1_13 R2_14))) :axiom true))
(define-fun init () Bool (! (and (forall ((R1_0 round) (R2_1 round)) (not (_0__one_a R1_0 R2_1)))
     (forall ((N_2 node) (R1_3 round) (R2_4 round))
       (not (_0__one_b N_2 R1_3 R2_4)))
     (forall ((N_5 node) (R_6 round)) (not (_0__left_round N_5 R_6)))
     (forall ((R_7 round) (V_8 value)) (not (_0__proposal R_7 V_8)))
     (forall ((N_9 node) (R_10 round) (V_11 value))
       (not (_0__vote N_9 R_10 V_11)))
     (forall ((R_12 round) (V_13 value)) (not (_0__decision R_12 V_13)))
     (forall ((R_14 round) (C_15 config))
       (not (_0__configure_round_msg R_14 C_15)))
     (forall ((R_16 round)) (not (_0__complete_msg R_16)))
     (forall ((R_17 round)) (le _0__master_complete R_17))) :init true))
(define-fun transition_0 () Bool (! (exists ((r_0 round) (c_1 config))
  (let ((a!1 (forall ((R_3 round) (C_4 config))
               (= (_1__configure_round_msg R_3 C_4)
                  (or (_0__configure_round_msg R_3 C_4)
                      (and (= R_3 r_0) (= C_4 c_1))))))
        (a!2 (forall ((R_5 round))
               (=> (distinct R_5 r_0)
                   (= (_1__round_config R_5) (_0__round_config R_5))))))
    (and (forall ((C_2 config)) (not (_0__configure_round_msg r_0 C_2)))
         (le _0__master_complete r_0)
         (complete_of c_1 _0__master_complete)
         a!1
         a!2
         (= (_1__round_config r_0) c_1)
         (forall ((x0_6 round) (x1_7 round))
           (= (_1__one_a x0_6 x1_7) (_0__one_a x0_6 x1_7)))
         (forall ((x0_8 node) (x1_9 round) (x2_10 round))
           (= (_1__one_b x0_8 x1_9 x2_10) (_0__one_b x0_8 x1_9 x2_10)))
         (forall ((x0_11 node) (x1_12 round))
           (= (_1__left_round x0_11 x1_12) (_0__left_round x0_11 x1_12)))
         (forall ((x0_13 round) (x1_14 value))
           (= (_1__proposal x0_13 x1_14) (_0__proposal x0_13 x1_14)))
         (forall ((x0_15 node) (x1_16 round) (x2_17 value))
           (= (_1__vote x0_15 x1_16 x2_17) (_0__vote x0_15 x1_16 x2_17)))
         (forall ((x0_18 round) (x1_19 value))
           (= (_1__decision x0_18 x1_19) (_0__decision x0_18 x1_19)))
         (forall ((x0_20 round))
           (= (_1__complete_msg x0_20) (_0__complete_msg x0_20)))
         (= _1__master_complete _0__master_complete)
         (forall ((x0_21 round) (x1_22 value))
           (= (_1__decision_quorum x0_21 x1_22)
              (_0__decision_quorum x0_21 x1_22)))
         (forall ((x0_23 round) (x1_24 value) (x2_25 quorum))
           (= (_1__choosable_node x0_23 x1_24 x2_25)
              (_0__choosable_node x0_23 x1_24 x2_25)))
         (forall ((x0_26 round))
           (= (_1__quorum_of_round x0_26) (_0__quorum_of_round x0_26)))))) :action true))
(define-fun transition_1 () Bool (! (exists ((r_27 round))
  (and (_0__complete_msg r_27)
       (not (le r_27 _0__master_complete))
       (= _1__master_complete r_27)
       (forall ((x0_28 round) (x1_29 round))
         (= (_1__one_a x0_28 x1_29) (_0__one_a x0_28 x1_29)))
       (forall ((x0_30 node) (x1_31 round) (x2_32 round))
         (= (_1__one_b x0_30 x1_31 x2_32) (_0__one_b x0_30 x1_31 x2_32)))
       (forall ((x0_33 node) (x1_34 round))
         (= (_1__left_round x0_33 x1_34) (_0__left_round x0_33 x1_34)))
       (forall ((x0_35 round) (x1_36 value))
         (= (_1__proposal x0_35 x1_36) (_0__proposal x0_35 x1_36)))
       (forall ((x0_37 node) (x1_38 round) (x2_39 value))
         (= (_1__vote x0_37 x1_38 x2_39) (_0__vote x0_37 x1_38 x2_39)))
       (forall ((x0_40 round) (x1_41 value))
         (= (_1__decision x0_40 x1_41) (_0__decision x0_40 x1_41)))
       (forall ((x0_42 round) (x1_43 config))
         (= (_1__configure_round_msg x0_42 x1_43)
            (_0__configure_round_msg x0_42 x1_43)))
       (forall ((x0_44 round))
         (= (_1__complete_msg x0_44) (_0__complete_msg x0_44)))
       (forall ((x0_45 round) (x1_46 value))
         (= (_1__decision_quorum x0_45 x1_46) (_0__decision_quorum x0_45 x1_46)))
       (forall ((x0_47 round))
         (= (_1__round_config x0_47) (_0__round_config x0_47)))
       (forall ((x0_48 round) (x1_49 value) (x2_50 quorum))
         (= (_1__choosable_node x0_48 x1_49 x2_50)
            (_0__choosable_node x0_48 x1_49 x2_50)))
       (forall ((x0_51 round))
         (= (_1__quorum_of_round x0_51) (_0__quorum_of_round x0_51))))) :action true))
(define-fun transition_2 () Bool (! (exists ((r_52 round) (c_53 config) (cr_54 round))
  (and (_0__configure_round_msg r_52 c_53)
       (complete_of c_53 cr_54)
       (forall ((R1_55 round) (R2_56 round))
         (let ((a!1 (or (_0__one_a R1_55 R2_56)
                        (and (= R1_55 r_52)
                             (le cr_54 R2_56)
                             (not (le r_52 R2_56))))))
           (= (_1__one_a R1_55 R2_56) a!1)))
       (forall ((x0_57 node) (x1_58 round) (x2_59 round))
         (= (_1__one_b x0_57 x1_58 x2_59) (_0__one_b x0_57 x1_58 x2_59)))
       (forall ((x0_60 node) (x1_61 round))
         (= (_1__left_round x0_60 x1_61) (_0__left_round x0_60 x1_61)))
       (forall ((x0_62 round) (x1_63 value))
         (= (_1__proposal x0_62 x1_63) (_0__proposal x0_62 x1_63)))
       (forall ((x0_64 node) (x1_65 round) (x2_66 value))
         (= (_1__vote x0_64 x1_65 x2_66) (_0__vote x0_64 x1_65 x2_66)))
       (forall ((x0_67 round) (x1_68 value))
         (= (_1__decision x0_67 x1_68) (_0__decision x0_67 x1_68)))
       (forall ((x0_69 round) (x1_70 config))
         (= (_1__configure_round_msg x0_69 x1_70)
            (_0__configure_round_msg x0_69 x1_70)))
       (forall ((x0_71 round))
         (= (_1__complete_msg x0_71) (_0__complete_msg x0_71)))
       (= _1__master_complete _0__master_complete)
       (forall ((x0_72 round) (x1_73 value))
         (= (_1__decision_quorum x0_72 x1_73) (_0__decision_quorum x0_72 x1_73)))
       (forall ((x0_74 round))
         (= (_1__round_config x0_74) (_0__round_config x0_74)))
       (forall ((x0_75 round) (x1_76 value) (x2_77 quorum))
         (= (_1__choosable_node x0_75 x1_76 x2_77)
            (_0__choosable_node x0_75 x1_76 x2_77)))
       (forall ((x0_78 round))
         (= (_1__quorum_of_round x0_78) (_0__quorum_of_round x0_78))))) :action true))
(define-fun transition_3 () Bool (! (exists ((n_79 node) (r_80 round) (rp_81 round))
  (let ((a!1 (forall ((N_82 node) (R1_83 round) (R2_84 round))
               (= (_1__one_b N_82 R1_83 R2_84)
                  (or (_0__one_b N_82 R1_83 R2_84)
                      (and (= N_82 n_79) (= R1_83 r_80) (= R2_84 rp_81))))))
        (a!2 (forall ((R_87 round) (V_88 value) (Q_89 quorum))
               (let ((a!1 (and (member n_79 Q_89)
                               (not (le r_80 R_87))
                               (not (_0__vote n_79 R_87 V_88)))))
                 (=> a!1 (= (_1__choosable_node R_87 V_88 Q_89) n_79)))))
        (a!3 (forall ((R_90 round) (V_91 value) (Q_92 quorum))
               (let ((a!1 (and (member n_79 Q_92)
                               (not (le r_80 R_90))
                               (not (_0__vote n_79 R_90 V_91)))))
                 (=> (not a!1)
                     (= (_1__choosable_node R_90 V_91 Q_92)
                        (_0__choosable_node R_90 V_91 Q_92)))))))
    (and (_0__one_a r_80 rp_81)
         (not (_0__left_round n_79 r_80))
         a!1
         (forall ((N_85 node) (R_86 round))
           (let ((a!1 (or (_0__left_round N_85 R_86)
                          (and (= N_85 n_79) (not (le r_80 R_86))))))
             (= (_1__left_round N_85 R_86) a!1)))
         a!2
         a!3
         (forall ((x0_93 round) (x1_94 round))
           (= (_1__one_a x0_93 x1_94) (_0__one_a x0_93 x1_94)))
         (forall ((x0_95 round) (x1_96 value))
           (= (_1__proposal x0_95 x1_96) (_0__proposal x0_95 x1_96)))
         (forall ((x0_97 node) (x1_98 round) (x2_99 value))
           (= (_1__vote x0_97 x1_98 x2_99) (_0__vote x0_97 x1_98 x2_99)))
         (forall ((x0_100 round) (x1_101 value))
           (= (_1__decision x0_100 x1_101) (_0__decision x0_100 x1_101)))
         (forall ((x0_102 round) (x1_103 config))
           (= (_1__configure_round_msg x0_102 x1_103)
              (_0__configure_round_msg x0_102 x1_103)))
         (forall ((x0_104 round))
           (= (_1__complete_msg x0_104) (_0__complete_msg x0_104)))
         (= _1__master_complete _0__master_complete)
         (forall ((x0_105 round) (x1_106 value))
           (= (_1__decision_quorum x0_105 x1_106)
              (_0__decision_quorum x0_105 x1_106)))
         (forall ((x0_107 round))
           (= (_1__round_config x0_107) (_0__round_config x0_107)))
         (forall ((x0_108 round))
           (= (_1__quorum_of_round x0_108) (_0__quorum_of_round x0_108)))))) :action true))
(define-fun transition_4 () Bool (! (exists ((r_109 round) (c_110 config) (cr_111 round) (v_112 value))
  (let ((a!1 (forall ((R_115 round))
               (=> (and (le cr_111 R_115) (not (le r_109 R_115)))
                   (exists ((C_116 config))
                     (_0__configure_round_msg R_115 C_116)))))
        (a!2 (forall ((R_117 round) (C_118 config))
               (=> (and (le cr_111 R_117)
                        (not (le r_109 R_117))
                        (_0__configure_round_msg R_117 C_118))
                   (quorumin (_0__quorum_of_round R_117) C_118))))
        (a!3 (forall ((R_119 round) (N_120 node))
               (=> (and (le cr_111 R_119)
                        (not (le r_109 R_119))
                        (member N_120 (_0__quorum_of_round R_119)))
                   (_0__one_b N_120 r_109 R_119))))
        (a!4 (forall ((N_121 node) (MAXR_122 round) (V_123 value))
               (not (and (le cr_111 MAXR_122)
                         (not (le r_109 MAXR_122))
                         (member N_121 (_0__quorum_of_round MAXR_122))
                         (_0__vote N_121 MAXR_122 V_123)))))
        (a!5 (forall ((R_124 round))
               (= (_1__complete_msg R_124)
                  (or (_0__complete_msg R_124) (= R_124 r_109)))))
        (a!6 (forall ((R_125 round) (V_126 value))
               (= (_1__proposal R_125 V_126)
                  (or (_0__proposal R_125 V_126)
                      (and (= R_125 r_109) (= V_126 v_112)))))))
    (and (forall ((R_113 round))
           (= (_1__quorum_of_round R_113) (_1__quorum_of_round R_113)))
         (_0__configure_round_msg r_109 c_110)
         (complete_of c_110 cr_111)
         (forall ((V_114 value)) (not (_0__proposal r_109 V_114)))
         a!1
         a!2
         a!3
         a!4
         a!5
         (distinct v_112 none)
         a!6
         (forall ((x0_127 round) (x1_128 round))
           (= (_1__one_a x0_127 x1_128) (_0__one_a x0_127 x1_128)))
         (forall ((x0_129 node) (x1_130 round) (x2_131 round))
           (= (_1__one_b x0_129 x1_130 x2_131) (_0__one_b x0_129 x1_130 x2_131)))
         (forall ((x0_132 node) (x1_133 round))
           (= (_1__left_round x0_132 x1_133) (_0__left_round x0_132 x1_133)))
         (forall ((x0_134 node) (x1_135 round) (x2_136 value))
           (= (_1__vote x0_134 x1_135 x2_136) (_0__vote x0_134 x1_135 x2_136)))
         (forall ((x0_137 round) (x1_138 value))
           (= (_1__decision x0_137 x1_138) (_0__decision x0_137 x1_138)))
         (forall ((x0_139 round) (x1_140 config))
           (= (_1__configure_round_msg x0_139 x1_140)
              (_0__configure_round_msg x0_139 x1_140)))
         (= _1__master_complete _0__master_complete)
         (forall ((x0_141 round) (x1_142 value))
           (= (_1__decision_quorum x0_141 x1_142)
              (_0__decision_quorum x0_141 x1_142)))
         (forall ((x0_143 round))
           (= (_1__round_config x0_143) (_0__round_config x0_143)))
         (forall ((x0_144 round) (x1_145 value) (x2_146 quorum))
           (= (_1__choosable_node x0_144 x1_145 x2_146)
              (_0__choosable_node x0_144 x1_145 x2_146)))))) :action true))
(define-fun transition_5 () Bool (! (exists ((r_147 round)
         (c_148 config)
         (cr_149 round)
         (maxr_150 round)
         (v_151 value))
  (let ((a!1 (forall ((R_154 round))
               (=> (and (le cr_149 R_154) (not (le r_147 R_154)))
                   (exists ((C_155 config))
                     (_0__configure_round_msg R_154 C_155)))))
        (a!2 (forall ((R_156 round) (C_157 config))
               (=> (and (le cr_149 R_156)
                        (not (le r_147 R_156))
                        (_0__configure_round_msg R_156 C_157))
                   (quorumin (_0__quorum_of_round R_156) C_157))))
        (a!3 (forall ((R_158 round) (N_159 node))
               (=> (and (le cr_149 R_158)
                        (not (le r_147 R_158))
                        (member N_159 (_0__quorum_of_round R_158)))
                   (_0__one_b N_159 r_147 R_158))))
        (a!4 (exists ((N_160 node))
               (and (le cr_149 maxr_150)
                    (not (le r_147 maxr_150))
                    (member N_160 (_0__quorum_of_round maxr_150))
                    (_0__vote N_160 maxr_150 v_151))))
        (a!5 (forall ((N_161 node) (MAXR_162 round) (V_163 value))
               (=> (and (le cr_149 MAXR_162)
                        (not (le r_147 MAXR_162))
                        (member N_161 (_0__quorum_of_round MAXR_162))
                        (_0__vote N_161 MAXR_162 V_163))
                   (le MAXR_162 maxr_150))))
        (a!6 (forall ((R_164 round) (V_165 value))
               (= (_1__proposal R_164 V_165)
                  (or (_0__proposal R_164 V_165)
                      (and (= R_164 r_147) (= V_165 v_151)))))))
    (and (forall ((R_152 round))
           (= (_1__quorum_of_round R_152) (_1__quorum_of_round R_152)))
         (_0__configure_round_msg r_147 c_148)
         (complete_of c_148 cr_149)
         (forall ((V_153 value)) (not (_0__proposal r_147 V_153)))
         a!1
         a!2
         a!3
         (distinct v_151 none)
         a!4
         a!5
         a!6
         (forall ((x0_166 round) (x1_167 round))
           (= (_1__one_a x0_166 x1_167) (_0__one_a x0_166 x1_167)))
         (forall ((x0_168 node) (x1_169 round) (x2_170 round))
           (= (_1__one_b x0_168 x1_169 x2_170) (_0__one_b x0_168 x1_169 x2_170)))
         (forall ((x0_171 node) (x1_172 round))
           (= (_1__left_round x0_171 x1_172) (_0__left_round x0_171 x1_172)))
         (forall ((x0_173 node) (x1_174 round) (x2_175 value))
           (= (_1__vote x0_173 x1_174 x2_175) (_0__vote x0_173 x1_174 x2_175)))
         (forall ((x0_176 round) (x1_177 value))
           (= (_1__decision x0_176 x1_177) (_0__decision x0_176 x1_177)))
         (forall ((x0_178 round) (x1_179 config))
           (= (_1__configure_round_msg x0_178 x1_179)
              (_0__configure_round_msg x0_178 x1_179)))
         (forall ((x0_180 round))
           (= (_1__complete_msg x0_180) (_0__complete_msg x0_180)))
         (= _1__master_complete _0__master_complete)
         (forall ((x0_181 round) (x1_182 value))
           (= (_1__decision_quorum x0_181 x1_182)
              (_0__decision_quorum x0_181 x1_182)))
         (forall ((x0_183 round))
           (= (_1__round_config x0_183) (_0__round_config x0_183)))
         (forall ((x0_184 round) (x1_185 value) (x2_186 quorum))
           (= (_1__choosable_node x0_184 x1_185 x2_186)
              (_0__choosable_node x0_184 x1_185 x2_186)))))) :action true))
(define-fun transition_6 () Bool (! (exists ((n_187 node) (v_188 value) (r_189 round))
  (let ((a!1 (forall ((N_190 node) (R_191 round) (V_192 value))
               (= (_1__vote N_190 R_191 V_192)
                  (or (_0__vote N_190 R_191 V_192)
                      (and (= N_190 n_187) (= R_191 r_189) (= V_192 v_188)))))))
    (and (distinct v_188 none)
         (not (_0__left_round n_187 r_189))
         (_0__proposal r_189 v_188)
         a!1
         (forall ((x0_193 round) (x1_194 round))
           (= (_1__one_a x0_193 x1_194) (_0__one_a x0_193 x1_194)))
         (forall ((x0_195 node) (x1_196 round) (x2_197 round))
           (= (_1__one_b x0_195 x1_196 x2_197) (_0__one_b x0_195 x1_196 x2_197)))
         (forall ((x0_198 node) (x1_199 round))
           (= (_1__left_round x0_198 x1_199) (_0__left_round x0_198 x1_199)))
         (forall ((x0_200 round) (x1_201 value))
           (= (_1__proposal x0_200 x1_201) (_0__proposal x0_200 x1_201)))
         (forall ((x0_202 round) (x1_203 value))
           (= (_1__decision x0_202 x1_203) (_0__decision x0_202 x1_203)))
         (forall ((x0_204 round) (x1_205 config))
           (= (_1__configure_round_msg x0_204 x1_205)
              (_0__configure_round_msg x0_204 x1_205)))
         (forall ((x0_206 round))
           (= (_1__complete_msg x0_206) (_0__complete_msg x0_206)))
         (= _1__master_complete _0__master_complete)
         (forall ((x0_207 round) (x1_208 value))
           (= (_1__decision_quorum x0_207 x1_208)
              (_0__decision_quorum x0_207 x1_208)))
         (forall ((x0_209 round))
           (= (_1__round_config x0_209) (_0__round_config x0_209)))
         (forall ((x0_210 round) (x1_211 value) (x2_212 quorum))
           (= (_1__choosable_node x0_210 x1_211 x2_212)
              (_0__choosable_node x0_210 x1_211 x2_212)))
         (forall ((x0_213 round))
           (= (_1__quorum_of_round x0_213) (_0__quorum_of_round x0_213)))))) :action true))
(define-fun transition_7 () Bool (! (exists ((r_214 round) (c_215 config) (v_216 value) (q_217 quorum))
  (let ((a!1 (forall ((R_219 round) (V_220 value))
               (= (_1__decision R_219 V_220)
                  (or (_0__decision R_219 V_220)
                      (and (= R_219 r_214) (= V_220 v_216))))))
        (a!2 (forall ((R_221 round))
               (= (_1__complete_msg R_221)
                  (or (_0__complete_msg R_221) (= R_221 r_214)))))
        (a!3 (forall ((R_222 round) (V_223 value))
               (=> (not (and (= R_222 r_214) (= V_223 v_216)))
                   (= (_1__decision_quorum R_222 V_223)
                      (_0__decision_quorum R_222 V_223))))))
    (and (distinct v_216 none)
         (_0__configure_round_msg r_214 c_215)
         (quorumin q_217 c_215)
         (forall ((N_218 node))
           (=> (member N_218 q_217) (_0__vote N_218 r_214 v_216)))
         a!1
         a!2
         a!3
         (= (_1__decision_quorum r_214 v_216) q_217)
         (forall ((x0_224 round) (x1_225 round))
           (= (_1__one_a x0_224 x1_225) (_0__one_a x0_224 x1_225)))
         (forall ((x0_226 node) (x1_227 round) (x2_228 round))
           (= (_1__one_b x0_226 x1_227 x2_228) (_0__one_b x0_226 x1_227 x2_228)))
         (forall ((x0_229 node) (x1_230 round))
           (= (_1__left_round x0_229 x1_230) (_0__left_round x0_229 x1_230)))
         (forall ((x0_231 round) (x1_232 value))
           (= (_1__proposal x0_231 x1_232) (_0__proposal x0_231 x1_232)))
         (forall ((x0_233 node) (x1_234 round) (x2_235 value))
           (= (_1__vote x0_233 x1_234 x2_235) (_0__vote x0_233 x1_234 x2_235)))
         (forall ((x0_236 round) (x1_237 config))
           (= (_1__configure_round_msg x0_236 x1_237)
              (_0__configure_round_msg x0_236 x1_237)))
         (= _1__master_complete _0__master_complete)
         (forall ((x0_238 round))
           (= (_1__round_config x0_238) (_0__round_config x0_238)))
         (forall ((x0_239 round) (x1_240 value) (x2_241 quorum))
           (= (_1__choosable_node x0_239 x1_240 x2_241)
              (_0__choosable_node x0_239 x1_240 x2_241)))
         (forall ((x0_242 round))
           (= (_1__quorum_of_round x0_242) (_0__quorum_of_round x0_242)))))) :action true))
(define-fun safety-prop () Bool (!(let ((a!1 (forall ((R1_0 round) (V1_1 value) (R2_2 round) (V2_3 value))
             (=> (and (_0__decision R1_0 V1_1) (_0__decision R2_2 V2_3))
                 (= V1_1 V2_3)))))
  (and a!1)) :invar-property 0))
(define-fun invariant_0 () Bool (! (forall ((R1_0 round) (V1_1 value) (R2_2 round) (V2_3 value))
  (=> (and (_0__decision R1_0 V1_1) (_0__decision R2_2 V2_3)) (= V1_1 V2_3))) :invar-property 0))
(define-fun invariant_1 () Bool (! (forall ((R_4 round) (V1_5 value) (V2_6 value))
  (=> (and (_0__proposal R_4 V1_5) (_0__proposal R_4 V2_6)) (= V1_5 V2_6))) :invar-property 1))
(define-fun invariant_2 () Bool (! (forall ((N_7 node) (R_8 round) (V_9 value))
  (=> (_0__vote N_7 R_8 V_9) (_0__proposal R_8 V_9))) :invar-property 2))
(define-fun invariant_3 () Bool (! (forall ((R_10 round) (C_11 config))
  (=> (_0__configure_round_msg R_10 C_11) (= C_11 (_0__round_config R_10)))) :invar-property 3))
(define-fun invariant_4 () Bool (! (forall ((R1_12 round) (R2_13 round) (V_14 value) (C_15 config))
  (=> (and (_0__proposal R2_13 V_14)
           (le R1_12 R2_13)
           (= C_15 (_0__round_config R1_12)))
      (_0__configure_round_msg R1_12 C_15))) :invar-property 4))
(define-fun invariant_5 () Bool (! (forall ((R2_16 round) (R3_17 round) (C_18 config) (R1_19 round))
  (let ((a!1 (and (or (= R2_16 _0__master_complete)
                      (and (_0__configure_round_msg R3_17 C_18)
                           (complete_of C_18 R2_16)))
                  (not (le R2_16 R1_19)))))
    (=> a!1 (_0__complete_msg R2_16)))) :invar-property 5))
(define-fun invariant_6 () Bool (! (forall ((R1_20 round) (R2_21 round) (C_22 config))
  (=> (and (_0__complete_msg R2_21)
           (le R1_20 R2_21)
           (= C_22 (_0__round_config R1_20)))
      (_0__configure_round_msg R1_20 C_22))) :invar-property 6))
(define-fun invariant_7 () Bool (! (forall ((R_23 round) (V_24 value) (C_25 config))
  (=> (and (_0__decision R_23 V_24) (= C_25 (_0__round_config R_23)))
      (_0__configure_round_msg R_23 C_25))) :invar-property 7))
(define-fun invariant_8 () Bool (! (forall ((R_26 round) (V_27 value) (C_28 config) (Q_29 quorum))
  (=> (and (_0__decision R_26 V_27)
           (= C_28 (_0__round_config R_26))
           (= Q_29 (_0__decision_quorum R_26 V_27)))
      (quorumin Q_29 C_28))) :invar-property 8))
(define-fun invariant_9 () Bool (! (forall ((R_30 round) (V_31 value) (C_32 config) (Q_33 quorum) (N_34 node))
  (=> (and (_0__decision R_30 V_31)
           (= C_32 (_0__round_config R_30))
           (= Q_33 (_0__decision_quorum R_30 V_31))
           (member N_34 Q_33))
      (_0__vote N_34 R_30 V_31))) :invar-property 9))
(define-fun invariant_10 () Bool (! (forall ((N1_35 node) (Q_36 quorum) (R_37 round) (V_38 value) (N2_39 node))
  (=> (and (member N1_35 Q_36)
           (_0__left_round N1_35 R_37)
           (not (_0__vote N1_35 R_37 V_38))
           (= N2_39 (_0__choosable_node R_37 V_38 Q_36)))
      (and (member N2_39 Q_36)
           (_0__left_round N2_39 R_37)
           (not (_0__vote N2_39 R_37 V_38))))) :invar-property 10))
(define-fun invariant_11 () Bool (! (forall ((R1_40 round)
         (R2_41 round)
         (V1_42 value)
         (V2_43 value)
         (Q_44 quorum)
         (C_45 config)
         (N_46 node))
  (=> (and (not (le R2_41 R1_40))
           (_0__proposal R2_41 V2_43)
           (distinct V1_42 V2_43)
           (_0__configure_round_msg R1_40 C_45)
           (quorumin Q_44 C_45)
           (= N_46 (_0__choosable_node R1_40 V1_42 Q_44)))
      (and (member N_46 Q_44)
           (_0__left_round N_46 R1_40)
           (not (_0__vote N_46 R1_40 V1_42))))) :invar-property 11))
(define-fun invariant_12 () Bool (! (forall ((R_47 round) (C_48 config) (MINREL_49 round))
  (=> (and (_0__configure_round_msg R_47 C_48) (complete_of C_48 MINREL_49))
      (and (le MINREL_49 R_47) (le MINREL_49 _0__master_complete)))) :invar-property 12))
(define-fun invariant_13 () Bool (! (forall ((N_50 node))
  (forall ((RR_51 round) (R_52 round) (C_53 config) (Q_54 quorum) (V_55 value))
    (=> (and (_0__complete_msg RR_51)
             (not (le RR_51 R_52))
             (_0__configure_round_msg R_52 C_53)
             (quorumin Q_54 C_53)
             (not (_0__decision RR_51 V_55))
             (= N_50 (_0__choosable_node R_52 V_55 Q_54)))
        (and (member N_50 Q_54)
             (_0__left_round N_50 R_52)
             (not (_0__vote N_50 R_52 V_55)))))) :invar-property 13))
(define-fun invariant_14 () Bool (! (forall ((N_56 node) (R1_57 round) (R2_58 round) (R3_59 round))
  (=> (and (_0__one_b N_56 R1_57 R2_58) (not (le R1_57 R3_59)))
      (_0__left_round N_56 R3_59))) :invar-property 14))
