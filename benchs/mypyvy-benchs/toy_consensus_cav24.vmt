(declare-sort node 0)
(declare-sort value 0)
(declare-sort quorum 0)
(declare-fun member (node quorum) Bool)
(declare-fun _0__v (node value) Bool)
(declare-fun _1__v (node value) Bool)
(define-fun _0__v.sv ((V0 node) (V1 value)) Bool (! (_0__v V0 V1) :next _1__v))
(declare-fun _0__b (node) Bool)
(declare-fun _1__b (node) Bool)
(define-fun _0__b.sv ((V0 node)) Bool (! (_0__b V0) :next _1__b))
(declare-fun _0__d (value) Bool)
(declare-fun _1__d (value) Bool)
(define-fun _0__d.sv ((V0 value)) Bool (! (_0__d V0) :next _1__d))
(define-fun axiom_0 () Bool (! (forall ((Q1_0 quorum) (Q2_1 quorum))
  (exists ((N_2 node)) (and (member N_2 Q1_0) (member N_2 Q2_1)))) :axiom true))
(define-fun init () Bool (! (and (forall ((N_0 node) (V_1 value)) (not (_0__v N_0 V_1)))
     (forall ((N_2 node)) (not (_0__b N_2)))
     (forall ((V_3 value)) (not (_0__d V_3)))) :init true))
(define-fun transition_0 () Bool (! (exists ((n_0 node) (x_1 value))
  (let ((a!1 (forall ((N_2 node) (V_3 value))
               (= (_1__v N_2 V_3)
                  (or (_0__v N_2 V_3) (and (= N_2 n_0) (= V_3 x_1))))))
        (a!2 (forall ((N_4 node)) (= (_1__b N_4) (or (_0__b N_4) (= N_4 n_0))))))
    (and (not (_0__b n_0))
         a!1
         a!2
         (forall ((x0_5 value)) (= (_1__d x0_5) (_0__d x0_5)))))) :action true))
(define-fun transition_1 () Bool (! (exists ((x_6 value))
  (let ((a!1 (exists ((Q_7 quorum))
               (forall ((N_8 node)) (=> (member N_8 Q_7) (_0__v N_8 x_6)))))
        (a!2 (forall ((V_9 value)) (= (_1__d V_9) (or (_0__d V_9) (= V_9 x_6))))))
    (and a!1
         a!2
         (forall ((x0_10 node) (x1_11 value))
           (= (_1__v x0_10 x1_11) (_0__v x0_10 x1_11)))
         (forall ((x0_12 node)) (= (_1__b x0_12) (_0__b x0_12)))))) :action true))
(define-fun safety-prop () Bool (!(let ((a!1 (forall ((X_0 value) (Y_1 value))
             (=> (and (_0__d X_0) (_0__d Y_1)) (= X_0 Y_1)))))
  (and a!1)) :invar-property 0))
(define-fun invariant_0 () Bool (! (forall ((X_0 value) (Y_1 value))
  (=> (and (_0__d X_0) (_0__d Y_1)) (= X_0 Y_1))) :invar-property 0))
(define-fun invariant_1 () Bool (! (forall ((X_2 value))
  (let ((a!1 (exists ((Q_3 quorum))
               (forall ((N_4 node)) (=> (member N_4 Q_3) (_0__v N_4 X_2))))))
    (=> (_0__d X_2) a!1))) :invar-property 1))
(define-fun invariant_2 () Bool (! (forall ((N_5 node) (X_6 value) (Y_7 value))
  (=> (and (_0__v N_5 X_6) (_0__v N_5 Y_7)) (= X_6 Y_7))) :invar-property 2))
(define-fun invariant_3 () Bool (! (forall ((N_8 node) (X_9 value)) (=> (_0__v N_8 X_9) (_0__b N_8))) :invar-property 3))
