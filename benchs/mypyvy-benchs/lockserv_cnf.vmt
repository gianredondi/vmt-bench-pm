(declare-sort node 0)
(declare-fun _0__lock_msg (node) Bool)
(declare-fun _1__lock_msg (node) Bool)
(define-fun _0__lock_msg.sv ((V0 node)) Bool (! (_0__lock_msg V0) :next _1__lock_msg))
(declare-fun _0__grant_msg (node) Bool)
(declare-fun _1__grant_msg (node) Bool)
(define-fun _0__grant_msg.sv ((V0 node)) Bool (! (_0__grant_msg V0) :next _1__grant_msg))
(declare-fun _0__unlock_msg (node) Bool)
(declare-fun _1__unlock_msg (node) Bool)
(define-fun _0__unlock_msg.sv ((V0 node)) Bool (! (_0__unlock_msg V0) :next _1__unlock_msg))
(declare-fun _0__holds_lock (node) Bool)
(declare-fun _1__holds_lock (node) Bool)
(define-fun _0__holds_lock.sv ((V0 node)) Bool (! (_0__holds_lock V0) :next _1__holds_lock))
(declare-fun _0__server_holds_lock () Bool)
(declare-fun _1__server_holds_lock () Bool)
(define-fun _0__server_holds_lock.sv () Bool (! _0__server_holds_lock :next _1__server_holds_lock))
(define-fun init () Bool (! (and (forall ((N_0 node)) (not (_0__lock_msg N_0)))
     (forall ((N_1 node)) (not (_0__grant_msg N_1)))
     (forall ((N_2 node)) (not (_0__unlock_msg N_2)))
     (forall ((N_3 node)) (not (_0__holds_lock N_3)))
     _0__server_holds_lock) :init true))
(define-fun transition_0 () Bool (! (exists ((n_0 node))
  (let ((a!1 (forall ((N_1 node))
               (= (_1__lock_msg N_1) (or (_0__lock_msg N_1) (= N_1 n_0))))))
    (and a!1
         (forall ((x0_2 node)) (= (_1__grant_msg x0_2) (_0__grant_msg x0_2)))
         (forall ((x0_3 node)) (= (_1__unlock_msg x0_3) (_0__unlock_msg x0_3)))
         (forall ((x0_4 node)) (= (_1__holds_lock x0_4) (_0__holds_lock x0_4)))
         (= _1__server_holds_lock _0__server_holds_lock)))) :action true))
(define-fun transition_1 () Bool (! (exists ((n_5 node))
  (let ((a!1 (forall ((N_6 node))
               (and _0__server_holds_lock
                    (_0__lock_msg n_5)
                    (not _1__server_holds_lock)
                    (= (_1__lock_msg N_6)
                       (and (_0__lock_msg N_6) (distinct N_6 n_5)))
                    (= (_1__grant_msg N_6) (or (_0__grant_msg N_6) (= N_6 n_5)))))))
    (and a!1
         (forall ((x0_7 node)) (= (_1__unlock_msg x0_7) (_0__unlock_msg x0_7)))
         (forall ((x0_8 node)) (= (_1__holds_lock x0_8) (_0__holds_lock x0_8)))))) :action true))
(define-fun transition_2 () Bool (! (exists ((n_9 node))
  (let ((a!1 (forall ((N_10 node))
               (and (_0__grant_msg n_9)
                    (= (_1__grant_msg N_10)
                       (and (_0__grant_msg N_10) (distinct N_10 n_9)))
                    (= (_1__holds_lock N_10)
                       (or (_0__holds_lock N_10) (= N_10 n_9)))))))
    (and a!1
         (forall ((x0_11 node)) (= (_1__lock_msg x0_11) (_0__lock_msg x0_11)))
         (forall ((x0_12 node))
           (= (_1__unlock_msg x0_12) (_0__unlock_msg x0_12)))
         (= _1__server_holds_lock _0__server_holds_lock)))) :action true))
(define-fun transition_3 () Bool (! (exists ((n_13 node))
  (let ((a!1 (forall ((N_14 node))
               (and (_0__holds_lock n_13)
                    (= (_1__holds_lock N_14)
                       (and (_0__holds_lock N_14) (distinct N_14 n_13)))
                    (= (_1__unlock_msg N_14)
                       (or (_0__unlock_msg N_14) (= N_14 n_13)))))))
    (and a!1
         (forall ((x0_15 node)) (= (_1__lock_msg x0_15) (_0__lock_msg x0_15)))
         (forall ((x0_16 node)) (= (_1__grant_msg x0_16) (_0__grant_msg x0_16)))
         (= _1__server_holds_lock _0__server_holds_lock)))) :action true))
(define-fun transition_4 () Bool (! (exists ((n_17 node))
  (let ((a!1 (forall ((N_18 node))
               (and (_0__unlock_msg n_17)
                    (= (_1__unlock_msg N_18)
                       (and (_0__unlock_msg N_18) (distinct N_18 n_17)))
                    _1__server_holds_lock))))
    (and a!1
         (forall ((x0_19 node)) (= (_1__lock_msg x0_19) (_0__lock_msg x0_19)))
         (forall ((x0_20 node)) (= (_1__grant_msg x0_20) (_0__grant_msg x0_20)))
         (forall ((x0_21 node))
           (= (_1__holds_lock x0_21) (_0__holds_lock x0_21)))))) :action true))
(define-fun safety-prop () Bool (!(let ((a!1 (forall ((N1_0 node) (N2_1 node))
             (or (not (_0__holds_lock N1_0))
                 (not (_0__holds_lock N2_1))
                 (= N1_0 N2_1)))))
  (and a!1)) :invar-property 0))
(define-fun invariant_0 () Bool (! (forall ((N1_0 node) (N2_1 node))
  (or (not (_0__holds_lock N1_0)) (not (_0__holds_lock N2_1)) (= N1_0 N2_1))) :invar-property 0))
(define-fun invariant_1 () Bool (! (forall ((N1_2 node) (N2_3 node))
  (or (not (_0__grant_msg N1_2)) (not (_0__grant_msg N2_3)) (= N1_2 N2_3))) :invar-property 1))
(define-fun invariant_2 () Bool (! (forall ((N1_4 node) (N2_5 node))
  (or (not (_0__unlock_msg N1_4)) (not (_0__unlock_msg N2_5)) (= N1_4 N2_5))) :invar-property 2))
(define-fun invariant_3 () Bool (! (forall ((N1_6 node) (N2_7 node))
  (or (not (_0__holds_lock N1_6)) (not (_0__grant_msg N2_7)))) :invar-property 3))
(define-fun invariant_4 () Bool (! (forall ((N1_8 node) (N2_9 node))
  (or (not (_0__holds_lock N1_8)) (not (_0__unlock_msg N2_9)))) :invar-property 4))
(define-fun invariant_5 () Bool (! (forall ((N1_10 node) (N2_11 node))
  (or (not (_0__grant_msg N1_10)) (not (_0__unlock_msg N2_11)))) :invar-property 5))
(define-fun invariant_6 () Bool (! (forall ((N_12 node))
  (or (not (_0__grant_msg N_12)) (not _0__server_holds_lock))) :invar-property 6))
(define-fun invariant_7 () Bool (! (forall ((N_13 node))
  (or (not (_0__holds_lock N_13)) (not _0__server_holds_lock))) :invar-property 7))
(define-fun invariant_8 () Bool (! (forall ((N_14 node))
  (or (not (_0__unlock_msg N_14)) (not _0__server_holds_lock))) :invar-property 8))
(define-fun invariant_9 () Bool (! (forall ((N1_15 node) (N2_16 node))
  (or (not (and (_0__lock_msg N1_15) (distinct N1_15 N2_16))) false)) :invar-property 9))
